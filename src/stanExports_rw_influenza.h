// Generated by rstantools.  Do not edit by hand.

/*
    EpiStrainDynamics is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiStrainDynamics is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiStrainDynamics.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_rw_influenza_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 67> locations_array__ =
  {" (found before start of program)",
  " (in 'rw_influenza', line 23, column 2 to column 31)",
  " (in 'rw_influenza', line 24, column 2 to column 40)",
  " (in 'rw_influenza', line 26, column 2 to column 20)",
  " (in 'rw_influenza', line 27, column 2 to column 20)",
  " (in 'rw_influenza', line 29, column 2 to column 74)",
  " (in 'rw_influenza', line 30, column 2 to column 50)",
  " (in 'rw_influenza', line 32, column 2 to column 43)",
  " (in 'rw_influenza', line 49, column 6 to column 84)",
  " (in 'rw_influenza', line 48, column 4 to line 49, column 84)",
  " (in 'rw_influenza', line 47, column 6 to line 50, column 3)",
  " (in 'rw_influenza', line 44, column 6 to column 84)",
  " (in 'rw_influenza', line 43, column 4 to line 44, column 84)",
  " (in 'rw_influenza', line 42, column 27 to line 45, column 3)",
  " (in 'rw_influenza', line 42, column 7 to line 50, column 3)",
  " (in 'rw_influenza', line 39, column 6 to column 59)",
  " (in 'rw_influenza', line 38, column 4 to line 39, column 59)",
  " (in 'rw_influenza', line 37, column 22 to line 40, column 3)",
  " (in 'rw_influenza', line 37, column 2 to line 50, column 3)",
  " (in 'rw_influenza', line 57, column 6 to column 41)",
  " (in 'rw_influenza', line 56, column 22 to line 58, column 3)",
  " (in 'rw_influenza', line 56, column 2 to line 58, column 3)",
  " (in 'rw_influenza', line 63, column 2 to column 17)",
  " (in 'rw_influenza', line 64, column 2 to column 15)",
  " (in 'rw_influenza', line 65, column 9 to column 19)",
  " (in 'rw_influenza', line 65, column 2 to column 27)",
  " (in 'rw_influenza', line 81, column 6 to column 29)",
  " (in 'rw_influenza', line 82, column 6 to column 32)",
  " (in 'rw_influenza', line 83, column 6 to column 26)",
  " (in 'rw_influenza', line 84, column 6 to column 46)",
  " (in 'rw_influenza', line 86, column 6 to column 86)",
  " (in 'rw_influenza', line 87, column 6 to column 44)",
  " (in 'rw_influenza', line 88, column 6 to column 45)",
  " (in 'rw_influenza', line 80, column 24 to line 89, column 7)",
  " (in 'rw_influenza', line 80, column 4 to line 89, column 7)",
  " (in 'rw_influenza', line 79, column 6 to line 90, column 3)",
  " (in 'rw_influenza', line 69, column 6 to column 29)",
  " (in 'rw_influenza', line 70, column 6 to column 32)",
  " (in 'rw_influenza', line 71, column 6 to column 26)",
  " (in 'rw_influenza', line 72, column 6 to column 46)",
  " (in 'rw_influenza', line 74, column 6 to column 46)",
  " (in 'rw_influenza', line 75, column 6 to column 44)",
  " (in 'rw_influenza', line 76, column 6 to column 45)",
  " (in 'rw_influenza', line 68, column 24 to line 77, column 7)",
  " (in 'rw_influenza', line 68, column 4 to line 77, column 7)",
  " (in 'rw_influenza', line 67, column 20 to line 78, column 3)",
  " (in 'rw_influenza', line 67, column 2 to line 90, column 3)",
  " (in 'rw_influenza', line 13, column 2 to column 15)",
  " (in 'rw_influenza', line 14, column 2 to column 15)",
  " (in 'rw_influenza', line 15, column 8 to column 16)",
  " (in 'rw_influenza', line 15, column 2 to column 18)",
  " (in 'rw_influenza', line 16, column 9 to column 19)",
  " (in 'rw_influenza', line 16, column 21 to column 29)",
  " (in 'rw_influenza', line 16, column 2 to column 31)",
  " (in 'rw_influenza', line 17, column 12 to column 20)",
  " (in 'rw_influenza', line 17, column 2 to column 22)",
  " (in 'rw_influenza', line 18, column 2 to column 18)",
  " (in 'rw_influenza', line 19, column 10 to column 18)",
  " (in 'rw_influenza', line 19, column 2 to column 20)",
  " (in 'rw_influenza', line 20, column 2 to column 42)",
  " (in 'rw_influenza', line 23, column 9 to column 17)",
  " (in 'rw_influenza', line 23, column 19 to column 27)",
  " (in 'rw_influenza', line 24, column 18 to column 26)",
  " (in 'rw_influenza', line 24, column 28 to column 36)",
  " (in 'rw_influenza', line 29, column 20 to column 71)",
  " (in 'rw_influenza', line 30, column 13 to column 42)",
  " (in 'rw_influenza', line 32, column 10 to column 21)"};
#include <stan_meta_header.hpp>
class model_rw_influenza final : public model_base_crtp<model_rw_influenza> {
private:
  int num_data;
  int num_path;
  std::vector<int> Y;
  std::vector<std::vector<int>> P1;
  std::vector<std::vector<int>> P2;
  int week_effect;
  std::vector<int> DOW;
  int cov_structure;
  int tau_1dim__;
  int Sigma_1dim__;
  int Sigma_2dim__;
public:
  ~model_rw_influenza() {}
  model_rw_influenza(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_rw_influenza_namespace::model_rw_influenza";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "num_data", "int",
        std::vector<size_t>{});
      num_data = std::numeric_limits<int>::min();
      current_statement__ = 47;
      num_data = context__.vals_i("num_data")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization", "num_path", "int",
        std::vector<size_t>{});
      num_path = std::numeric_limits<int>::min();
      current_statement__ = 48;
      num_path = context__.vals_i("num_path")[(1 - 1)];
      current_statement__ = 49;
      stan::math::validate_non_negative_index("Y", "num_data", num_data);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(num_data)});
      Y = std::vector<int>(num_data, std::numeric_limits<int>::min());
      current_statement__ = 50;
      Y = context__.vals_i("Y");
      current_statement__ = 51;
      stan::math::validate_non_negative_index("P1", "num_path - 1", (num_path
        - 1));
      current_statement__ = 52;
      stan::math::validate_non_negative_index("P1", "num_data", num_data);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "P1", "int",
        std::vector<size_t>{static_cast<size_t>((num_path - 1)),
          static_cast<size_t>(num_data)});
      P1 = std::vector<std::vector<int>>((num_path - 1),
             std::vector<int>(num_data, std::numeric_limits<int>::min()));
      {
        std::vector<int> P1_flat__;
        current_statement__ = 53;
        P1_flat__ = context__.vals_i("P1");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= (num_path - 1); ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(P1, P1_flat__[(pos__ - 1)],
              "assigning variable P1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("P2", "num_data", num_data);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "P2", "int",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(num_data)});
      P2 = std::vector<std::vector<int>>(2,
             std::vector<int>(num_data, std::numeric_limits<int>::min()));
      {
        std::vector<int> P2_flat__;
        current_statement__ = 55;
        P2_flat__ = context__.vals_i("P2");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(P2, P2_flat__[(pos__ - 1)],
              "assigning variable P2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization", "week_effect", "int",
        std::vector<size_t>{});
      week_effect = std::numeric_limits<int>::min();
      current_statement__ = 56;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 57;
      stan::math::validate_non_negative_index("DOW", "num_data", num_data);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "DOW", "int",
        std::vector<size_t>{static_cast<size_t>(num_data)});
      DOW = std::vector<int>(num_data, std::numeric_limits<int>::min());
      current_statement__ = 58;
      DOW = context__.vals_i("DOW");
      current_statement__ = 59;
      context__.validate_dims("data initialization", "cov_structure", "int",
        std::vector<size_t>{});
      cov_structure = std::numeric_limits<int>::min();
      current_statement__ = 59;
      cov_structure = context__.vals_i("cov_structure")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "cov_structure",
        cov_structure, 0);
      current_statement__ = 59;
      stan::math::check_less_or_equal(function__, "cov_structure",
        cov_structure, 2);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("a", "num_path", num_path);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("a", "num_data", num_data);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("c", "num_path", num_path);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("c", "num_data", num_data);
      current_statement__ = 64;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      tau_1dim__ = (stan::math::logical_eq(cov_structure, 0) ? 1 : (stan::math::logical_eq(
                                                                    cov_structure,
                                                                    1) ? num_path : 0));
      current_statement__ = 64;
      stan::math::validate_non_negative_index("tau",
        "cov_structure == 0 ? 1 : cov_structure == 1 ? num_path : 0",
        tau_1dim__);
      current_statement__ = 65;
      Sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      Sigma_1dim__ = (stan::math::logical_eq(cov_structure, 2) ? num_path : 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("Sigma",
        "cov_structure == 2 ? num_path : 0", Sigma_1dim__);
      current_statement__ = 65;
      Sigma_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      Sigma_2dim__ = (stan::math::logical_eq(cov_structure, 2) ? num_path : 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("Sigma",
        "cov_structure == 2 ? num_path : 0", Sigma_2dim__);
      current_statement__ = 66;
      stan::math::validate_positive_index("day_of_week_simplex",
        "week_effect", week_effect);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (num_path * num_data) + (num_path * num_data) + 1 + 1 +
      tau_1dim__ + (Sigma_1dim__ + ((Sigma_1dim__ * (Sigma_1dim__ - 1)) / 2))
      + (week_effect - 1);
  }
  inline std::string model_name() const final {
    return "model_rw_influenza";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_rw_influenza_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path,
            num_data);
      Eigen::Matrix<local_scalar_t__,-1,-1> c =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      current_statement__ = 2;
      c = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(0, lp__,
            num_path, num_data);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 4;
      eta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      Sigma = in__.template read_constrain_cov_matrix<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Sigma_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 7;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      {
        current_statement__ = 18;
        if (stan::math::logical_eq(cov_structure, 2)) {
          current_statement__ = 16;
          for (int i = 3; i <= num_data; ++i) {
            current_statement__ = 15;
            lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                             stan::model::rvalue(a, "a",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::subtract(
                               stan::math::multiply(2,
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_omni(),
                                   stan::model::index_uni((i - 1)))),
                               stan::model::rvalue(a, "a",
                                 stan::model::index_omni(),
                                 stan::model::index_uni((i - 2)))), Sigma));
          }
        } else {
          current_statement__ = 14;
          if (stan::math::logical_eq(cov_structure, 1)) {
            current_statement__ = 12;
            for (int i = 1; i <= num_path; ++i) {
              current_statement__ = 11;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(i),
                                 stan::model::index_min_max(3, num_data)),
                               stan::math::subtract(
                                 stan::math::multiply(2,
                                   stan::model::rvalue(a, "a",
                                     stan::model::index_uni(i),
                                     stan::model::index_min_max(2, (num_data
                                       - 1)))),
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(i),
                                   stan::model::index_min_max(1, (num_data -
                                     2)))),
                               stan::model::rvalue(tau, "tau",
                                 stan::model::index_uni(i))));
            }
          } else {
            current_statement__ = 9;
            for (int i = 1; i <= num_path; ++i) {
              current_statement__ = 8;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(i),
                                 stan::model::index_min_max(3, num_data)),
                               stan::math::subtract(
                                 stan::math::multiply(2,
                                   stan::model::rvalue(a, "a",
                                     stan::model::index_uni(i),
                                     stan::model::index_min_max(2, (num_data
                                       - 1)))),
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(i),
                                   stan::model::index_min_max(1, (num_data -
                                     2)))),
                               stan::model::rvalue(tau, "tau",
                                 stan::model::index_uni(1))));
            }
          }
        }
        current_statement__ = 21;
        for (int i = 1; i <= num_path; ++i) {
          current_statement__ = 19;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(c, "c",
                             stan::model::index_uni(i),
                             stan::model::index_omni()),
                           stan::math::multiply(
                             stan::math::exp(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(i),
                                 stan::model::index_omni())), eta), eta));
        }
        local_scalar_t__ total_ILI = DUMMY_VAR__;
        local_scalar_t__ total_A = DUMMY_VAR__;
        current_statement__ = 24;
        stan::math::validate_non_negative_index("theta", "num_path - 1",
          (num_path - 1));
        Eigen::Matrix<local_scalar_t__,-1,1> theta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((num_path - 1),
            DUMMY_VAR__);
        current_statement__ = 46;
        if (stan::math::logical_eq(week_effect, 1)) {
          current_statement__ = 44;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 36;
            total_ILI = stan::math::sum(
                          stan::model::rvalue(c, "c",
                            stan::model::index_omni(),
                            stan::model::index_uni(i)));
            current_statement__ = 37;
            total_A = stan::math::sum(
                        stan::model::rvalue(c, "c",
                          stan::model::index_min_max(1, 2),
                          stan::model::index_uni(i)));
            current_statement__ = 38;
            stan::model::assign(theta, total_A, "assigning variable theta",
              stan::model::index_uni(1));
            current_statement__ = 39;
            stan::model::assign(theta,
              stan::model::rvalue(c, "c",
                stan::model::index_min_max(3, num_path),
                stan::model::index_uni(i)), "assigning variable theta",
              stan::model::index_min_max(2, (num_path - 1)));
            current_statement__ = 40;
            lp_accum__.add(stan::math::neg_binomial_lpmf<propto__>(
                             stan::model::rvalue(Y, "Y",
                               stan::model::index_uni(i)), (total_ILI * phi),
                             phi));
            current_statement__ = 41;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(theta, total_ILI)));
            current_statement__ = 42;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P2, "P2",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(
                               stan::model::rvalue(c, "c",
                                 stan::model::index_min_max(1, 2),
                                 stan::model::index_uni(i)), total_A)));
          }
        } else {
          current_statement__ = 34;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 26;
            total_ILI = stan::math::sum(
                          stan::model::rvalue(c, "c",
                            stan::model::index_omni(),
                            stan::model::index_uni(i)));
            current_statement__ = 27;
            total_A = stan::math::sum(
                        stan::model::rvalue(c, "c",
                          stan::model::index_min_max(1, 2),
                          stan::model::index_uni(i)));
            current_statement__ = 28;
            stan::model::assign(theta, total_A, "assigning variable theta",
              stan::model::index_uni(1));
            current_statement__ = 29;
            stan::model::assign(theta,
              stan::model::rvalue(c, "c",
                stan::model::index_min_max(3, num_path),
                stan::model::index_uni(i)), "assigning variable theta",
              stan::model::index_min_max(2, (num_path - 1)));
            current_statement__ = 30;
            lp_accum__.add(stan::math::neg_binomial_lpmf<propto__>(
                             stan::model::rvalue(Y, "Y",
                               stan::model::index_uni(i)), (((total_ILI *
                             phi) * week_effect) *
                             stan::model::rvalue(day_of_week_simplex,
                               "day_of_week_simplex",
                               stan::model::index_uni(
                                 stan::model::rvalue(DOW, "DOW",
                                   stan::model::index_uni(i))))), phi));
            current_statement__ = 31;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(theta, total_ILI)));
            current_statement__ = 32;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P2, "P2",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(
                               stan::model::rvalue(c, "c",
                                 stan::model::index_min_max(1, 2),
                                 stan::model::index_uni(i)), total_A)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_rw_influenza_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> a =
        Eigen::Matrix<double,-1,-1>::Constant(num_path, num_data,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path,
            num_data);
      Eigen::Matrix<double,-1,-1> c =
        Eigen::Matrix<double,-1,-1>::Constant(num_path, num_data,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      c = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(0, lp__,
            num_path, num_data);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      eta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<double> tau =
        std::vector<double>(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(Sigma_1dim__, Sigma_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      Sigma = in__.template read_constrain_cov_matrix<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Sigma_2dim__);
      Eigen::Matrix<double,-1,1> day_of_week_simplex =
        Eigen::Matrix<double,-1,1>::Constant(week_effect,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      out__.write(a);
      out__.write(c);
      out__.write(phi);
      out__.write(eta);
      out__.write(tau);
      out__.write(Sigma);
      out__.write(day_of_week_simplex);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path, num_data),
        "assigning variable a");
      out__.write(a);
      Eigen::Matrix<local_scalar_t__,-1,-1> c =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(c,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path, num_data),
        "assigning variable c");
      out__.write_free_lb(0, c);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 4;
      eta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, eta);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(tau,
        in__.read<std::vector<local_scalar_t__>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(Sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Sigma_1dim__,
          Sigma_2dim__), "assigning variable Sigma");
      out__.write_free_cov_matrix(Sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(day_of_week_simplex,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(week_effect),
        "assigning variable day_of_week_simplex");
      out__.write_free_simplex(day_of_week_simplex);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{static_cast<size_t>(num_path),
          static_cast<size_t>(num_data)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{static_cast<size_t>(num_path),
          static_cast<size_t>(num_data)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "Sigma", "double",
        std::vector<size_t>{static_cast<size_t>(Sigma_1dim__),
          static_cast<size_t>(Sigma_2dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "day_of_week_simplex", "double",
        std::vector<size_t>{static_cast<size_t>(week_effect)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 1;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(a, a_flat__[(pos__ - 1)],
              "assigning variable a", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(a);
      Eigen::Matrix<local_scalar_t__,-1,-1> c =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> c_flat__;
        current_statement__ = 2;
        c_flat__ = context__.vals_r("c");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(c, c_flat__[(pos__ - 1)],
              "assigning variable c", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, c);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lb(0, phi);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 4;
      eta = context__.vals_r("eta")[(1 - 1)];
      out__.write_free_lb(0, eta);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      tau = context__.vals_r("tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Sigma_flat__;
        current_statement__ = 6;
        Sigma_flat__ = context__.vals_r("Sigma");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(Sigma, Sigma_flat__[(pos__ - 1)],
              "assigning variable Sigma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cov_matrix(Sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 7;
        day_of_week_simplex_flat__ = context__.vals_r("day_of_week_simplex");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(day_of_week_simplex,
            day_of_week_simplex_flat__[(pos__ - 1)],
            "assigning variable day_of_week_simplex",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(day_of_week_simplex);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"a", "c", "phi", "eta", "tau",
                "Sigma", "day_of_week_simplex"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    num_path),
                                                 static_cast<size_t>(num_data)},
                std::vector<size_t>{static_cast<size_t>(num_path),
                  static_cast<size_t>(num_data)}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(Sigma_1dim__),
                  static_cast<size_t>(Sigma_2dim__)},
                std::vector<size_t>{static_cast<size_t>(week_effect)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "Sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (Sigma_1dim__ + ((Sigma_1dim__ *
         (Sigma_1dim__ - 1)) / 2)); ++sym1__) {
      param_names__.emplace_back(std::string() + "Sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (week_effect - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_1dim__) + ",\"cols\":" + std::to_string(Sigma_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(week_effect) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((Sigma_1dim__ + ((Sigma_1dim__ * (Sigma_1dim__ - 1)) /2))) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((week_effect -1)) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((num_path * num_data) + (num_path *
      num_data)) + 1) + 1) + tau_1dim__) + (Sigma_1dim__ * Sigma_2dim__)) +
      week_effect);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((num_path * num_data) + (num_path *
      num_data)) + 1) + 1) + tau_1dim__) + (Sigma_1dim__ * Sigma_2dim__)) +
      week_effect);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_rw_influenza_namespace::model_rw_influenza;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_rw_influenza_namespace::profiles__;
}
#endif
#endif
