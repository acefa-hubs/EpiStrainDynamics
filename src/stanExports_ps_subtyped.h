// Generated by rstantools.  Do not edit by hand.

/*
    EpiStrainDynamics is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiStrainDynamics is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiStrainDynamics.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ps_subtyped_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 126> locations_array__ =
  {" (found before start of program)",
  " (in 'ps_subtyped', line 78, column 2 to column 32)",
  " (in 'ps_subtyped', line 79, column 2 to column 35)",
  " (in 'ps_subtyped', line 80, column 2 to column 48)",
  " (in 'ps_subtyped', line 81, column 2 to column 20)",
  " (in 'ps_subtyped', line 82, column 2 to column 74)",
  " (in 'ps_subtyped', line 83, column 2 to column 50)",
  " (in 'ps_subtyped', line 84, column 2 to column 43)",
  " (in 'ps_subtyped', line 87, column 2 to column 35)",
  " (in 'ps_subtyped', line 89, column 4 to column 25)",
  " (in 'ps_subtyped', line 88, column 2 to line 89, column 25)",
  " (in 'ps_subtyped', line 104, column 6 to column 87)",
  " (in 'ps_subtyped', line 103, column 4 to line 104, column 87)",
  " (in 'ps_subtyped', line 102, column 6 to line 105, column 3)",
  " (in 'ps_subtyped', line 100, column 6 to column 87)",
  " (in 'ps_subtyped', line 99, column 4 to line 100, column 87)",
  " (in 'ps_subtyped', line 98, column 27 to line 101, column 3)",
  " (in 'ps_subtyped', line 98, column 7 to line 105, column 3)",
  " (in 'ps_subtyped', line 96, column 6 to column 59)",
  " (in 'ps_subtyped', line 95, column 4 to line 96, column 59)",
  " (in 'ps_subtyped', line 94, column 22 to line 97, column 3)",
  " (in 'ps_subtyped', line 94, column 2 to line 105, column 3)",
  " (in 'ps_subtyped', line 110, column 17 to column 25)",
  " (in 'ps_subtyped', line 110, column 2 to column 27)",
  " (in 'ps_subtyped', line 111, column 2 to column 15)",
  " (in 'ps_subtyped', line 112, column 9 to column 19)",
  " (in 'ps_subtyped', line 112, column 2 to column 27)",
  " (in 'ps_subtyped', line 128, column 6 to column 41)",
  " (in 'ps_subtyped', line 129, column 6 to column 41)",
  " (in 'ps_subtyped', line 130, column 6 to column 26)",
  " (in 'ps_subtyped', line 131, column 6 to column 55)",
  " (in 'ps_subtyped', line 132, column 6 to column 47)",
  " (in 'ps_subtyped', line 133, column 6 to column 54)",
  " (in 'ps_subtyped', line 127, column 24 to line 134, column 5)",
  " (in 'ps_subtyped', line 127, column 4 to line 134, column 5)",
  " (in 'ps_subtyped', line 126, column 6 to line 135, column 3)",
  " (in 'ps_subtyped', line 115, column 6 to column 55)",
  " (in 'ps_subtyped', line 114, column 24 to line 116, column 5)",
  " (in 'ps_subtyped', line 114, column 4 to line 116, column 5)",
  " (in 'ps_subtyped', line 118, column 6 to column 36)",
  " (in 'ps_subtyped', line 119, column 6 to column 36)",
  " (in 'ps_subtyped', line 120, column 6 to column 26)",
  " (in 'ps_subtyped', line 121, column 6 to column 50)",
  " (in 'ps_subtyped', line 122, column 6 to column 47)",
  " (in 'ps_subtyped', line 123, column 6 to column 49)",
  " (in 'ps_subtyped', line 117, column 24 to line 124, column 5)",
  " (in 'ps_subtyped', line 117, column 4 to line 124, column 5)",
  " (in 'ps_subtyped', line 113, column 24 to line 125, column 3)",
  " (in 'ps_subtyped', line 113, column 2 to line 135, column 3)",
  " (in 'ps_subtyped', line 143, column 6 to column 89)",
  " (in 'ps_subtyped', line 142, column 24 to line 144, column 7)",
  " (in 'ps_subtyped', line 142, column 4 to line 144, column 7)",
  " (in 'ps_subtyped', line 141, column 6 to line 145, column 3)",
  " (in 'ps_subtyped', line 138, column 6 to column 49)",
  " (in 'ps_subtyped', line 137, column 24 to line 139, column 7)",
  " (in 'ps_subtyped', line 137, column 4 to line 139, column 7)",
  " (in 'ps_subtyped', line 136, column 20 to line 140, column 3)",
  " (in 'ps_subtyped', line 136, column 2 to line 145, column 3)",
  " (in 'ps_subtyped', line 43, column 2 to column 15)",
  " (in 'ps_subtyped', line 44, column 2 to column 16)",
  " (in 'ps_subtyped', line 45, column 2 to column 15)",
  " (in 'ps_subtyped', line 46, column 9 to column 18)",
  " (in 'ps_subtyped', line 46, column 2 to column 26)",
  " (in 'ps_subtyped', line 47, column 2 to column 20)",
  " (in 'ps_subtyped', line 48, column 8 to column 16)",
  " (in 'ps_subtyped', line 48, column 2 to column 18)",
  " (in 'ps_subtyped', line 49, column 9 to column 19)",
  " (in 'ps_subtyped', line 49, column 21 to column 29)",
  " (in 'ps_subtyped', line 49, column 2 to column 31)",
  " (in 'ps_subtyped', line 50, column 12 to column 20)",
  " (in 'ps_subtyped', line 50, column 2 to column 22)",
  " (in 'ps_subtyped', line 51, column 9 to column 17)",
  " (in 'ps_subtyped', line 51, column 2 to column 19)",
  " (in 'ps_subtyped', line 52, column 2 to column 18)",
  " (in 'ps_subtyped', line 53, column 10 to column 18)",
  " (in 'ps_subtyped', line 53, column 2 to column 20)",
  " (in 'ps_subtyped', line 54, column 2 to column 42)",
  " (in 'ps_subtyped', line 55, column 2 to column 44)",
  " (in 'ps_subtyped', line 58, column 2 to column 48)",
  " (in 'ps_subtyped', line 59, column 9 to column 18)",
  " (in 'ps_subtyped', line 59, column 20 to column 28)",
  " (in 'ps_subtyped', line 59, column 2 to column 32)",
  " (in 'ps_subtyped', line 60, column 9 to column 34)",
  " (in 'ps_subtyped', line 60, column 2 to column 51)",
  " (in 'ps_subtyped', line 61, column 9 to column 36)",
  " (in 'ps_subtyped', line 61, column 2 to column 48)",
  " (in 'ps_subtyped', line 62, column 2 to column 74)",
  " (in 'ps_subtyped', line 63, column 2 to column 86)",
  " (in 'ps_subtyped', line 65, column 4 to column 96)",
  " (in 'ps_subtyped', line 64, column 2 to line 65, column 96)",
  " (in 'ps_subtyped', line 66, column 2 to column 11)",
  " (in 'ps_subtyped', line 67, column 2 to column 11)",
  " (in 'ps_subtyped', line 73, column 4 to column 13)",
  " (in 'ps_subtyped', line 74, column 4 to column 13)",
  " (in 'ps_subtyped', line 72, column 6 to line 75, column 3)",
  " (in 'ps_subtyped', line 69, column 4 to column 20)",
  " (in 'ps_subtyped', line 70, column 4 to column 20)",
  " (in 'ps_subtyped', line 68, column 24 to line 71, column 3)",
  " (in 'ps_subtyped', line 68, column 2 to line 75, column 3)",
  " (in 'ps_subtyped', line 78, column 9 to column 17)",
  " (in 'ps_subtyped', line 78, column 19 to column 28)",
  " (in 'ps_subtyped', line 79, column 18 to column 22)",
  " (in 'ps_subtyped', line 79, column 23 to column 27)",
  " (in 'ps_subtyped', line 80, column 20 to column 45)",
  " (in 'ps_subtyped', line 82, column 20 to column 71)",
  " (in 'ps_subtyped', line 83, column 13 to column 42)",
  " (in 'ps_subtyped', line 84, column 10 to column 21)",
  " (in 'ps_subtyped', line 87, column 9 to column 17)",
  " (in 'ps_subtyped', line 87, column 19 to column 27)",
  " (in 'ps_subtyped', line 22, column 11 to column 18)",
  " (in 'ps_subtyped', line 22, column 4 to column 29)",
  " (in 'ps_subtyped', line 23, column 11 to column 18)",
  " (in 'ps_subtyped', line 23, column 4 to column 48)",
  " (in 'ps_subtyped', line 24, column 11 to column 18)",
  " (in 'ps_subtyped', line 24, column 4 to column 48)",
  " (in 'ps_subtyped', line 30, column 8 to line 31, column 52)",
  " (in 'ps_subtyped', line 29, column 6 to line 31, column 52)",
  " (in 'ps_subtyped', line 33, column 8 to line 34, column 52)",
  " (in 'ps_subtyped', line 32, column 6 to line 34, column 52)",
  " (in 'ps_subtyped', line 36, column 6 to line 37, column 59)",
  " (in 'ps_subtyped', line 28, column 9 to line 38, column 5)",
  " (in 'ps_subtyped', line 27, column 4 to column 72)",
  " (in 'ps_subtyped', line 26, column 6 to line 27, column 72)",
  " (in 'ps_subtyped', line 25, column 4 to line 38, column 5)",
  " (in 'ps_subtyped', line 39, column 4 to column 20)",
  " (in 'ps_subtyped', line 16, column 72 to line 40, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>
build_b_spline(const std::vector<T0__>& t, const std::vector<T1__>&
               ext_knots, const int& ind, const int& order, std::ostream*
               pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>
build_b_spline(const std::vector<T0__>& t, const std::vector<T1__>&
               ext_knots, const int& ind, const int& order, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 109;
    stan::math::validate_non_negative_index("b_spline", "size(t)",
      stan::math::size(t));
    Eigen::Matrix<local_scalar_t__,-1,1> b_spline =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::size(t),
        DUMMY_VAR__);
    current_statement__ = 111;
    stan::math::validate_non_negative_index("w1", "size(t)",
      stan::math::size(t));
    Eigen::Matrix<local_scalar_t__,-1,1> w1 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::size(t),
        DUMMY_VAR__);
    current_statement__ = 112;
    stan::model::assign(w1, stan::math::rep_vector(0, stan::math::size(t)),
      "assigning variable w1");
    current_statement__ = 113;
    stan::math::validate_non_negative_index("w2", "size(t)",
      stan::math::size(t));
    Eigen::Matrix<local_scalar_t__,-1,1> w2 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::size(t),
        DUMMY_VAR__);
    current_statement__ = 114;
    stan::model::assign(w2, stan::math::rep_vector(0, stan::math::size(t)),
      "assigning variable w2");
    current_statement__ = 123;
    if (stan::math::logical_eq(order, 1)) {
      current_statement__ = 122;
      for (int i = 1; i <= stan::math::size(t); ++i) {
        current_statement__ = 121;
        stan::model::assign(b_spline,
          (stan::math::primitive_value(
             stan::math::logical_lte(
               stan::model::rvalue(ext_knots, "ext_knots",
                 stan::model::index_uni(ind)),
               stan::model::rvalue(t, "t", stan::model::index_uni(i)))) &&
          stan::math::primitive_value(
            stan::math::logical_lt(
              stan::model::rvalue(t, "t", stan::model::index_uni(i)),
              stan::model::rvalue(ext_knots, "ext_knots",
                stan::model::index_uni((ind + 1)))))),
          "assigning variable b_spline", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 116;
      if (stan::math::logical_neq(
            stan::model::rvalue(ext_knots, "ext_knots",
              stan::model::index_uni(ind)),
            stan::model::rvalue(ext_knots, "ext_knots",
              stan::model::index_uni(((ind + order) - 1))))) {
        current_statement__ = 115;
        stan::model::assign(w1,
          stan::math::divide(
            stan::math::subtract(stan::math::to_vector(t),
              stan::math::rep_vector(
                stan::model::rvalue(ext_knots, "ext_knots",
                  stan::model::index_uni(ind)), stan::math::size(t))),
            (stan::model::rvalue(ext_knots, "ext_knots",
               stan::model::index_uni(((ind + order) - 1))) -
            stan::model::rvalue(ext_knots, "ext_knots",
              stan::model::index_uni(ind)))), "assigning variable w1");
      }
      current_statement__ = 118;
      if (stan::math::logical_neq(
            stan::model::rvalue(ext_knots, "ext_knots",
              stan::model::index_uni((ind + 1))),
            stan::model::rvalue(ext_knots, "ext_knots",
              stan::model::index_uni((ind + order))))) {
        current_statement__ = 117;
        stan::model::assign(w2,
          stan::math::subtract(1,
            stan::math::divide(
              stan::math::subtract(stan::math::to_vector(t),
                stan::math::rep_vector(
                  stan::model::rvalue(ext_knots, "ext_knots",
                    stan::model::index_uni((ind + 1))), stan::math::size(t))),
              (stan::model::rvalue(ext_knots, "ext_knots",
                 stan::model::index_uni((ind + order))) -
              stan::model::rvalue(ext_knots, "ext_knots",
                stan::model::index_uni((ind + 1)))))),
          "assigning variable w2");
      }
      current_statement__ = 119;
      stan::model::assign(b_spline,
        stan::math::add(
          stan::math::elt_multiply(w1,
            build_b_spline(t, ext_knots, ind, (order - 1), pstream__)),
          stan::math::elt_multiply(w2,
            build_b_spline(t, ext_knots, (ind + 1), (order - 1), pstream__))),
        "assigning variable b_spline");
    }
    current_statement__ = 124;
    return b_spline;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ps_subtyped final : public model_base_crtp<model_ps_subtyped> {
private:
  int num_data;
  int num_knots;
  int num_path;
  Eigen::Matrix<double,-1,1> knots_data__;
  int spline_degree;
  std::vector<int> Y;
  std::vector<std::vector<int>> P1;
  std::vector<std::vector<int>> P2;
  std::vector<double> X;
  int week_effect;
  std::vector<int> DOW;
  int cov_structure;
  int noise_structure;
  int num_basis;
  Eigen::Matrix<double,-1,-1> B_data__;
  Eigen::Matrix<double,-1,1> ext_knots_temp_data__;
  Eigen::Matrix<double,-1,1> ext_knots_data__;
  int cols;
  int rows;
  int eta_1dim__;
  int tau_1dim__;
  int Sigma_1dim__;
  int Sigma_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> knots{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> B{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ext_knots_temp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ext_knots{nullptr, 0};
public:
  ~model_ps_subtyped() {}
  model_ps_subtyped(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ps_subtyped_namespace::model_ps_subtyped";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization", "num_data", "int",
        std::vector<size_t>{});
      num_data = std::numeric_limits<int>::min();
      current_statement__ = 58;
      num_data = context__.vals_i("num_data")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization", "num_knots", "int",
        std::vector<size_t>{});
      num_knots = std::numeric_limits<int>::min();
      current_statement__ = 59;
      num_knots = context__.vals_i("num_knots")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization", "num_path", "int",
        std::vector<size_t>{});
      num_path = std::numeric_limits<int>::min();
      current_statement__ = 60;
      num_path = context__.vals_i("num_path")[(1 - 1)];
      current_statement__ = 61;
      stan::math::validate_non_negative_index("knots", "num_knots", num_knots);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "knots", "double",
        std::vector<size_t>{static_cast<size_t>(num_knots)});
      knots_data__ = Eigen::Matrix<double,-1,1>::Constant(num_knots,
                       std::numeric_limits<double>::quiet_NaN());
      new (&knots)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(knots_data__.data(),
        num_knots);
      {
        std::vector<local_scalar_t__> knots_flat__;
        current_statement__ = 62;
        knots_flat__ = context__.vals_r("knots");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= num_knots; ++sym1__) {
          current_statement__ = 62;
          stan::model::assign(knots, knots_flat__[(pos__ - 1)],
            "assigning variable knots", stan::model::index_uni(sym1__));
          current_statement__ = 62;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      context__.validate_dims("data initialization", "spline_degree", "int",
        std::vector<size_t>{});
      spline_degree = std::numeric_limits<int>::min();
      current_statement__ = 63;
      spline_degree = context__.vals_i("spline_degree")[(1 - 1)];
      current_statement__ = 64;
      stan::math::validate_non_negative_index("Y", "num_data", num_data);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(num_data)});
      Y = std::vector<int>(num_data, std::numeric_limits<int>::min());
      current_statement__ = 65;
      Y = context__.vals_i("Y");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("P1", "num_path - 1", (num_path
        - 1));
      current_statement__ = 67;
      stan::math::validate_non_negative_index("P1", "num_data", num_data);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "P1", "int",
        std::vector<size_t>{static_cast<size_t>((num_path - 1)),
          static_cast<size_t>(num_data)});
      P1 = std::vector<std::vector<int>>((num_path - 1),
             std::vector<int>(num_data, std::numeric_limits<int>::min()));
      {
        std::vector<int> P1_flat__;
        current_statement__ = 68;
        P1_flat__ = context__.vals_i("P1");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 68;
          for (int sym2__ = 1; sym2__ <= (num_path - 1); ++sym2__) {
            current_statement__ = 68;
            stan::model::assign(P1, P1_flat__[(pos__ - 1)],
              "assigning variable P1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 68;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 69;
      stan::math::validate_non_negative_index("P2", "num_data", num_data);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "P2", "int",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(num_data)});
      P2 = std::vector<std::vector<int>>(2,
             std::vector<int>(num_data, std::numeric_limits<int>::min()));
      {
        std::vector<int> P2_flat__;
        current_statement__ = 70;
        P2_flat__ = context__.vals_i("P2");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 70;
            stan::model::assign(P2, P2_flat__[(pos__ - 1)],
              "assigning variable P2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 70;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("X", "num_data", num_data);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(num_data)});
      X = std::vector<double>(num_data,
            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 72;
      X = context__.vals_r("X");
      current_statement__ = 73;
      context__.validate_dims("data initialization", "week_effect", "int",
        std::vector<size_t>{});
      week_effect = std::numeric_limits<int>::min();
      current_statement__ = 73;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 74;
      stan::math::validate_non_negative_index("DOW", "num_data", num_data);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "DOW", "int",
        std::vector<size_t>{static_cast<size_t>(num_data)});
      DOW = std::vector<int>(num_data, std::numeric_limits<int>::min());
      current_statement__ = 75;
      DOW = context__.vals_i("DOW");
      current_statement__ = 76;
      context__.validate_dims("data initialization", "cov_structure", "int",
        std::vector<size_t>{});
      cov_structure = std::numeric_limits<int>::min();
      current_statement__ = 76;
      cov_structure = context__.vals_i("cov_structure")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "cov_structure",
        cov_structure, 0);
      current_statement__ = 76;
      stan::math::check_less_or_equal(function__, "cov_structure",
        cov_structure, 2);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "noise_structure",
        "int", std::vector<size_t>{});
      noise_structure = std::numeric_limits<int>::min();
      current_statement__ = 77;
      noise_structure = context__.vals_i("noise_structure")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "noise_structure",
        noise_structure, 0);
      current_statement__ = 77;
      stan::math::check_less_or_equal(function__, "noise_structure",
        noise_structure, 1);
      current_statement__ = 78;
      num_basis = std::numeric_limits<int>::min();
      current_statement__ = 78;
      num_basis = ((num_knots + spline_degree) - 1);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("B", "num_basis", num_basis);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("B", "num_data", num_data);
      current_statement__ = 81;
      B_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_basis, num_data,
                   std::numeric_limits<double>::quiet_NaN());
      new (&B) Eigen::Map<Eigen::Matrix<double,-1,-1>>(B_data__.data(),
        num_basis, num_data);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("ext_knots_temp",
        "spline_degree + num_knots", (spline_degree + num_knots));
      current_statement__ = 83;
      ext_knots_temp_data__ = Eigen::Matrix<double,-1,1>::Constant((spline_degree
                                + num_knots),
                                std::numeric_limits<double>::quiet_NaN());
      new (&ext_knots_temp)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ext_knots_temp_data__.data(),
        (spline_degree + num_knots));
      current_statement__ = 84;
      stan::math::validate_non_negative_index("ext_knots",
        "2 * spline_degree + num_knots", ((2 * spline_degree) + num_knots));
      current_statement__ = 85;
      ext_knots_data__ = Eigen::Matrix<double,-1,1>::Constant(((2 *
                           spline_degree) + num_knots),
                           std::numeric_limits<double>::quiet_NaN());
      new (&ext_knots)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ext_knots_data__.data(), ((2 *
        spline_degree) + num_knots));
      current_statement__ = 86;
      stan::model::assign(ext_knots_temp,
        stan::math::append_row(
          stan::math::rep_vector(
            stan::model::rvalue(knots, "knots", stan::model::index_uni(1)),
            spline_degree), knots), "assigning variable ext_knots_temp");
      current_statement__ = 87;
      stan::model::assign(ext_knots,
        stan::math::append_row(ext_knots_temp,
          stan::math::rep_vector(
            stan::model::rvalue(knots, "knots",
              stan::model::index_uni(num_knots)), spline_degree)),
        "assigning variable ext_knots");
      current_statement__ = 89;
      for (int ind = 1; ind <= num_basis; ++ind) {
        current_statement__ = 88;
        stan::model::assign(B,
          stan::math::to_row_vector(
            build_b_spline(X, stan::math::to_array_1d(ext_knots), ind,
              (spline_degree + 1), pstream__)), "assigning variable B",
          stan::model::index_uni(ind), stan::model::index_omni());
      }
      current_statement__ = 90;
      cols = std::numeric_limits<int>::min();
      current_statement__ = 91;
      rows = std::numeric_limits<int>::min();
      current_statement__ = 98;
      if (stan::math::logical_eq(noise_structure, 1)) {
        current_statement__ = 95;
        cols = num_path;
        current_statement__ = 96;
        rows = num_data;
      } else {
        current_statement__ = 92;
        cols = 0;
        current_statement__ = 93;
        rows = 0;
      }
      current_statement__ = 99;
      stan::math::validate_non_negative_index("a", "num_path", num_path);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("a", "num_basis", num_basis);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("c_new", "cols", cols);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("c_new", "rows", rows);
      current_statement__ = 103;
      eta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 103;
      eta_1dim__ = (stan::math::logical_eq(noise_structure, 1) ? 1 : 0);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("eta",
        "noise_structure == 1 ? 1 : 0", eta_1dim__);
      current_statement__ = 104;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 104;
      tau_1dim__ = (stan::math::logical_eq(cov_structure, 0) ? 1 : (stan::math::logical_eq(
                                                                    cov_structure,
                                                                    1) ? num_path : 0));
      current_statement__ = 104;
      stan::math::validate_non_negative_index("tau",
        "cov_structure == 0 ? 1 : cov_structure == 1 ? num_path : 0",
        tau_1dim__);
      current_statement__ = 105;
      Sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 105;
      Sigma_1dim__ = (stan::math::logical_eq(cov_structure, 2) ? num_path : 0);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("Sigma",
        "cov_structure == 2 ? num_path : 0", Sigma_1dim__);
      current_statement__ = 105;
      Sigma_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 105;
      Sigma_2dim__ = (stan::math::logical_eq(cov_structure, 2) ? num_path : 0);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("Sigma",
        "cov_structure == 2 ? num_path : 0", Sigma_2dim__);
      current_statement__ = 106;
      stan::math::validate_positive_index("day_of_week_simplex",
        "week_effect", week_effect);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("a_new", "num_path", num_path);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("a_new", "num_data", num_data);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (num_path * num_basis) + (cols * rows) + eta_1dim__ + 1
      + tau_1dim__ + (Sigma_1dim__ + ((Sigma_1dim__ * (Sigma_1dim__ - 1)) /
      2)) + (week_effect - 1);
  }
  inline std::string model_name() const final {
    return "model_ps_subtyped";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ps_subtyped_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_basis,
          DUMMY_VAR__);
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path,
            num_basis);
      Eigen::Matrix<local_scalar_t__,-1,-1> c_new =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(cols, rows,
          DUMMY_VAR__);
      current_statement__ = 2;
      c_new = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(0, lp__,
                cols, rows);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(eta_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      eta = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, eta_1dim__);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 4;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      Sigma = in__.template read_constrain_cov_matrix<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Sigma_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 7;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      Eigen::Matrix<local_scalar_t__,-1,-1> a_new =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_data,
          DUMMY_VAR__);
      current_statement__ = 10;
      for (int i = 1; i <= num_path; ++i) {
        current_statement__ = 9;
        stan::model::assign(a_new,
          stan::math::multiply(
            stan::model::rvalue(a, "a", stan::model::index_uni(i),
              stan::model::index_omni()), B), "assigning variable a_new",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      {
        current_statement__ = 21;
        if (stan::math::logical_eq(cov_structure, 2)) {
          current_statement__ = 19;
          for (int i = 3; i <= num_basis; ++i) {
            current_statement__ = 18;
            lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                             stan::model::rvalue(a, "a",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::subtract(
                               stan::math::multiply(2,
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_omni(),
                                   stan::model::index_uni((i - 1)))),
                               stan::model::rvalue(a, "a",
                                 stan::model::index_omni(),
                                 stan::model::index_uni((i - 2)))), Sigma));
          }
        } else {
          current_statement__ = 17;
          if (stan::math::logical_eq(cov_structure, 1)) {
            current_statement__ = 15;
            for (int i = 1; i <= num_path; ++i) {
              current_statement__ = 14;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(i),
                                 stan::model::index_min_max(3, num_basis)),
                               stan::math::subtract(
                                 stan::math::multiply(2,
                                   stan::model::rvalue(a, "a",
                                     stan::model::index_uni(i),
                                     stan::model::index_min_max(2, (num_basis
                                       - 1)))),
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(i),
                                   stan::model::index_min_max(1, (num_basis -
                                     2)))),
                               stan::model::rvalue(tau, "tau",
                                 stan::model::index_uni(i))));
            }
          } else {
            current_statement__ = 12;
            for (int i = 1; i <= num_path; ++i) {
              current_statement__ = 11;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(i),
                                 stan::model::index_min_max(3, num_basis)),
                               stan::math::subtract(
                                 stan::math::multiply(2,
                                   stan::model::rvalue(a, "a",
                                     stan::model::index_uni(i),
                                     stan::model::index_min_max(2, (num_basis
                                       - 1)))),
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(i),
                                   stan::model::index_min_max(1, (num_basis -
                                     2)))),
                               stan::model::rvalue(tau, "tau",
                                 stan::model::index_uni(1))));
            }
          }
        }
        current_statement__ = 22;
        stan::math::validate_non_negative_index("total_ILI", "num_data",
          num_data);
        std::vector<local_scalar_t__> total_ILI =
          std::vector<local_scalar_t__>(num_data, DUMMY_VAR__);
        local_scalar_t__ total_A = DUMMY_VAR__;
        current_statement__ = 25;
        stan::math::validate_non_negative_index("theta", "num_path - 1",
          (num_path - 1));
        Eigen::Matrix<local_scalar_t__,-1,1> theta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((num_path - 1),
            DUMMY_VAR__);
        current_statement__ = 48;
        if (stan::math::logical_eq(noise_structure, 1)) {
          current_statement__ = 38;
          for (int i = 1; i <= num_path; ++i) {
            current_statement__ = 36;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(c_new, "c_new",
                               stan::model::index_uni(i),
                               stan::model::index_omni()),
                             stan::math::multiply(
                               stan::math::exp(
                                 stan::model::rvalue(a_new, "a_new",
                                   stan::model::index_uni(i),
                                   stan::model::index_omni())),
                               stan::model::rvalue(eta, "eta",
                                 stan::model::index_uni(1))),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(1))));
          }
          current_statement__ = 46;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 39;
            stan::model::assign(total_ILI,
              stan::math::sum(
                stan::model::rvalue(c_new, "c_new",
                  stan::model::index_omni(), stan::model::index_uni(i))),
              "assigning variable total_ILI", stan::model::index_uni(i));
            current_statement__ = 40;
            total_A = stan::math::sum(
                        stan::model::rvalue(c_new, "c_new",
                          stan::model::index_min_max(1, 2),
                          stan::model::index_uni(i)));
            current_statement__ = 41;
            stan::model::assign(theta, total_A, "assigning variable theta",
              stan::model::index_uni(1));
            current_statement__ = 42;
            stan::model::assign(theta,
              stan::model::rvalue(c_new, "c_new",
                stan::model::index_min_max(3, num_path),
                stan::model::index_uni(i)), "assigning variable theta",
              stan::model::index_min_max(2, (num_path - 1)));
            current_statement__ = 43;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(theta,
                               stan::model::rvalue(total_ILI, "total_ILI",
                                 stan::model::index_uni(i)))));
            current_statement__ = 44;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P2, "P2",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(
                               stan::model::rvalue(c_new, "c_new",
                                 stan::model::index_min_max(1, 2),
                                 stan::model::index_uni(i)), total_A)));
          }
        } else {
          current_statement__ = 34;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 27;
            stan::model::assign(total_ILI,
              stan::math::sum(
                stan::math::exp(
                  stan::model::rvalue(a_new, "a_new",
                    stan::model::index_omni(), stan::model::index_uni(i)))),
              "assigning variable total_ILI", stan::model::index_uni(i));
            current_statement__ = 28;
            total_A = stan::math::sum(
                        stan::math::exp(
                          stan::model::rvalue(a_new, "a_new",
                            stan::model::index_min_max(1, 2),
                            stan::model::index_uni(i))));
            current_statement__ = 29;
            stan::model::assign(theta, total_A, "assigning variable theta",
              stan::model::index_uni(1));
            current_statement__ = 30;
            stan::model::assign(theta,
              stan::math::exp(
                stan::model::rvalue(a_new, "a_new",
                  stan::model::index_min_max(3, num_path),
                  stan::model::index_uni(i))), "assigning variable theta",
              stan::model::index_min_max(2, (num_path - 1)));
            current_statement__ = 31;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(theta,
                               stan::model::rvalue(total_ILI, "total_ILI",
                                 stan::model::index_uni(i)))));
            current_statement__ = 32;
            lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                             stan::model::rvalue(P2, "P2",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)),
                             stan::math::divide(
                               stan::math::exp(
                                 stan::model::rvalue(a_new, "a_new",
                                   stan::model::index_min_max(1, 2),
                                   stan::model::index_uni(i))), total_A)));
          }
        }
        current_statement__ = 57;
        if (stan::math::logical_eq(week_effect, 1)) {
          current_statement__ = 55;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 53;
            lp_accum__.add(stan::math::neg_binomial_lpmf<propto__>(
                             stan::model::rvalue(Y, "Y",
                               stan::model::index_uni(i)),
                             (stan::model::rvalue(total_ILI, "total_ILI",
                                stan::model::index_uni(i)) * phi), phi));
          }
        } else {
          current_statement__ = 51;
          for (int i = 1; i <= num_data; ++i) {
            current_statement__ = 49;
            lp_accum__.add(stan::math::neg_binomial_lpmf<propto__>(
                             stan::model::rvalue(Y, "Y",
                               stan::model::index_uni(i)),
                             (((stan::model::rvalue(total_ILI, "total_ILI",
                                  stan::model::index_uni(i)) * phi) *
                             week_effect) *
                             stan::model::rvalue(day_of_week_simplex,
                               "day_of_week_simplex",
                               stan::model::index_uni(
                                 stan::model::rvalue(DOW, "DOW",
                                   stan::model::index_uni(i))))), phi));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ps_subtyped_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> a =
        Eigen::Matrix<double,-1,-1>::Constant(num_path, num_basis,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path,
            num_basis);
      Eigen::Matrix<double,-1,-1> c_new =
        Eigen::Matrix<double,-1,-1>::Constant(cols, rows,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      c_new = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(0, lp__,
                cols, rows);
      std::vector<double> eta =
        std::vector<double>(eta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      eta = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, eta_1dim__);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<double> tau =
        std::vector<double>(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(Sigma_1dim__, Sigma_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      Sigma = in__.template read_constrain_cov_matrix<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Sigma_2dim__);
      Eigen::Matrix<double,-1,1> day_of_week_simplex =
        Eigen::Matrix<double,-1,1>::Constant(week_effect,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      Eigen::Matrix<double,-1,-1> a_new =
        Eigen::Matrix<double,-1,-1>::Constant(num_path, num_data,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(a);
      out__.write(c_new);
      out__.write(eta);
      out__.write(phi);
      out__.write(tau);
      out__.write(Sigma);
      out__.write(day_of_week_simplex);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      for (int i = 1; i <= num_path; ++i) {
        current_statement__ = 9;
        stan::model::assign(a_new,
          stan::math::multiply(
            stan::model::rvalue(a, "a", stan::model::index_uni(i),
              stan::model::index_omni()), B), "assigning variable a_new",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      if (emit_transformed_parameters__) {
        out__.write(a_new);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_basis,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_path, num_basis),
        "assigning variable a");
      out__.write(a);
      Eigen::Matrix<local_scalar_t__,-1,-1> c_new =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(cols, rows,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(c_new,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(cols, rows),
        "assigning variable c_new");
      out__.write_free_lb(0, c_new);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(eta_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(eta,
        in__.read<std::vector<local_scalar_t__>>(eta_1dim__),
        "assigning variable eta");
      out__.write_free_lb(0, eta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 4;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(tau,
        in__.read<std::vector<local_scalar_t__>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(Sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Sigma_1dim__,
          Sigma_2dim__), "assigning variable Sigma");
      out__.write_free_cov_matrix(Sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(day_of_week_simplex,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(week_effect),
        "assigning variable day_of_week_simplex");
      out__.write_free_simplex(day_of_week_simplex);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{static_cast<size_t>(num_path),
          static_cast<size_t>(num_basis)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "c_new", "double",
        std::vector<size_t>{static_cast<size_t>(cols),
          static_cast<size_t>(rows)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(eta_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "Sigma", "double",
        std::vector<size_t>{static_cast<size_t>(Sigma_1dim__),
          static_cast<size_t>(Sigma_2dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "day_of_week_simplex", "double",
        std::vector<size_t>{static_cast<size_t>(week_effect)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_path, num_basis,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 1;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= num_basis; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(a, a_flat__[(pos__ - 1)],
              "assigning variable a", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(a);
      Eigen::Matrix<local_scalar_t__,-1,-1> c_new =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(cols, rows,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> c_new_flat__;
        current_statement__ = 2;
        c_new_flat__ = context__.vals_r("c_new");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= rows; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= cols; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(c_new, c_new_flat__[(pos__ - 1)],
              "assigning variable c_new", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, c_new);
      std::vector<local_scalar_t__> eta =
        std::vector<local_scalar_t__>(eta_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      eta = context__.vals_r("eta");
      out__.write_free_lb(0, eta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 4;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lb(0, phi);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      tau = context__.vals_r("tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Sigma_flat__;
        current_statement__ = 6;
        Sigma_flat__ = context__.vals_r("Sigma");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(Sigma, Sigma_flat__[(pos__ - 1)],
              "assigning variable Sigma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cov_matrix(Sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 7;
        day_of_week_simplex_flat__ = context__.vals_r("day_of_week_simplex");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(day_of_week_simplex,
            day_of_week_simplex_flat__[(pos__ - 1)],
            "assigning variable day_of_week_simplex",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(day_of_week_simplex);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"a", "c_new", "eta", "phi", "tau",
                "Sigma", "day_of_week_simplex"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"a_new"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    num_path),
                                                 static_cast<size_t>(
                                                   num_basis)},
                std::vector<size_t>{static_cast<size_t>(cols),
                  static_cast<size_t>(rows)},
                std::vector<size_t>{static_cast<size_t>(eta_1dim__)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(Sigma_1dim__),
                  static_cast<size_t>(Sigma_2dim__)},
                std::vector<size_t>{static_cast<size_t>(week_effect)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(num_path),
               static_cast<size_t>(num_data)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= num_basis; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= rows; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= cols; ++sym2__) {
        param_names__.emplace_back(std::string() + "c_new" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "Sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
          param_names__.emplace_back(std::string() + "a_new" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= num_basis; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= rows; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= cols; ++sym2__) {
        param_names__.emplace_back(std::string() + "c_new" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (Sigma_1dim__ + ((Sigma_1dim__ *
         (Sigma_1dim__ - 1)) / 2)); ++sym1__) {
      param_names__.emplace_back(std::string() + "Sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (week_effect - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_data; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_path; ++sym2__) {
          param_names__.emplace_back(std::string() + "a_new" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_basis) + "},\"block\":\"parameters\"},{\"name\":\"c_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(cols) + ",\"cols\":" + std::to_string(rows) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(eta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_1dim__) + ",\"cols\":" + std::to_string(Sigma_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(week_effect) + "},\"block\":\"parameters\"},{\"name\":\"a_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_basis) + "},\"block\":\"parameters\"},{\"name\":\"c_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(cols) + ",\"cols\":" + std::to_string(rows) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(eta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((Sigma_1dim__ + ((Sigma_1dim__ * (Sigma_1dim__ - 1)) /2))) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((week_effect -1)) + "},\"block\":\"parameters\"},{\"name\":\"a_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_path) + ",\"cols\":" + std::to_string(num_data) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((num_path * num_basis) + (cols * rows))
      + eta_1dim__) + 1) + tau_1dim__) + (Sigma_1dim__ * Sigma_2dim__)) +
      week_effect);
    const size_t num_transformed = emit_transformed_parameters * ((num_path *
      num_data));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((num_path * num_basis) + (cols * rows))
      + eta_1dim__) + 1) + tau_1dim__) + (Sigma_1dim__ * Sigma_2dim__)) +
      week_effect);
    const size_t num_transformed = emit_transformed_parameters * ((num_path *
      num_data));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ps_subtyped_namespace::model_ps_subtyped;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ps_subtyped_namespace::profiles__;
}
#endif
#endif
