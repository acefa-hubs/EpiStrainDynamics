[{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to EpiStrainDynamics","title":"Contributing to EpiStrainDynamics","text":"outlines propose change EpiStrainDynamics. detailed discussion contributing package, please see development contributing guide code review principles.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to EpiStrainDynamics","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to EpiStrainDynamics","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to EpiStrainDynamics","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"acefa-hubs/EpiStrainDynamics\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to EpiStrainDynamics","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to EpiStrainDynamics","text":"Please note EpiStrainDynamics project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"step-1-construct-model","dir":"Articles","previous_headings":"","what":"Step 1: Construct model","title":"Using EpiStainDynamics","text":"modelling specifications specified using construct_model function. correct stan model applied based specifications provided. construct_model() takes three arguments: method, pathogen_structure, dow_effect. break one one.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"method","dir":"Articles","previous_headings":"Step 1: Construct model","what":"Method","title":"Using EpiStainDynamics","text":"EpiStrainDynamics pre-compiled stan models fit either bayesian penalised splines random walks. specified using method argument construct_model() functions, either random_walk() p_spline(). penalised spline model two options specify: spline_degree polynomial degree individual spline segments used construct overall curve (must positive whole number) days_per_knot, number days knot (must also positive whole number). may specify:","code":"mod <- construct_model(   method = random_walk(),   ... ) # OR  mod <- construct_model(   method = p_spline(spline_degree = 3, days_per_knot = 2),  # example options   ... )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"pathogen-structure","dir":"Articles","previous_headings":"Step 1: Construct model","what":"Pathogen structure","title":"Using EpiStainDynamics","text":"three main types pathogen structure available model: single(), multiple(), subtyped(). single() pathogen structure simplest models single pathogen timeseries. vector case timeseries provided argument case_timeseries, vector date time labels provided time, optionally pathogen name can assigned pathogen_name. can specified follows, illustrated using data provided package sarscov2: multiple() subtyped() pathogen structures also case_timeseries time arguments, single() structure. addition two arguments, instead single argument pathogen_name, multiple() subtyped() one arguments allow user define names data different components subtypes modelled. multiple(), specified named list argument component_pathogen_timeseries. names list using subsequent plotting. subtyped(), allows user incorporate testing data influenza subtypes, vector total unsubtyped influenza cases specified influenzaA_unsubtyped_timeseries, named list subtyped influenza timeseries provided influenzaA_subtyped_timeseries, pathogens provided named list other_pathogen_timeseries. addition specifying data pathogen names, multiple() subtyped() allow user modify correlation structures parameters describing smoothness (argument smoothing_structure) account additional sources noise observation process (observation_noise). smoothing_structure either 'shared' (pathogens smoothness), 'independent' (pathogen completely independent smoothing structure), 'correlated' (smoothing structure correlated among pathogens). observation_noise either 'observation_noise_only' (includes observation noise - pathogens) 'pathogen_specific_noise' (includes noise individual pathogens well). Example pathogen structure specification multiple pathogens model: Example pathogen structure specification subtyped model:","code":"single(   case_timeseries = sarscov2$cases,           # timeseries of case data   time = sarscov2$date,                       # date or time variable labels   pathogen_name = 'SARS-COV-2'                # optional name of pathogen ) multiple(    case_timeseries = sarscov2$cases,        # timeseries of case data    time = sarscov2$date,                    # date or time variable labels     component_pathogen_timeseries = list(    # named list of component pathogens      alpha = sarscov2$alpha,      delta = sarscov2$delta,      omicron = sarscov2$omicron,      other = sarscov2$other    ),     smoothing_structure = 'independent',             # correlation structures    observation_noise = 'observation_noise_only'     # observation noise  ) subtyped(    case_timeseries = influenza$ili,         # timeseries of case data    time = influenza$week,                   # date or time variable labels     influenzaA_unsubtyped_timeseries = influenza$inf_A,  # unsubtyped influenzaA    influenzaA_subtyped_timeseries = list(       # named list of subtyped infA      H3N2 = influenza$inf_H3N2,      H1N1 = influenza$inf_H1N1    ),    other_pathogen_timeseries = list(            # named list of other pathogens      influenzaB = influenza$inf_B,      other = influenza$num_spec - influenza$inf_all    ),     smoothing_structure = 'correlated',            # correlation structures    observation_noise = 'pathogen_specific_noise'  # observation noise  )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"day-of-week-effect","dir":"Articles","previous_headings":"Step 1: Construct model","what":"Day of week effect","title":"Using EpiStainDynamics","text":"Day week effect specified logical (TRUE FALSE) dow_effect argument. plotting day week effect can selectively removed. constructed model object named list containing input data, accessed $data, parameter values (smoothing structure, observation noise, penalised spline parameters, appropriate), accessed model_params, names provided pathogens, accessed pathogen_names, record whether day week effect selected, accessed dow_effect.","code":"mod <- construct_model(   method = ...,   pathogen_structure = ...,   dow_effect = TRUE )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"step-2-fit-model","dir":"Articles","previous_headings":"","what":"Step 2: Fit model","title":"Using EpiStainDynamics","text":"model estimates expected value time series (eg, smoothed trend daily number cases accounting noise) individual pathogen. Model parameterisation decisions specified constructing model step 1 mean correct stan model applied stage simply calling fit_model() onto constructed model object. output function list stan fit object, accessed $fit, elements constructed model object previous step, accessed $constructed_model.","code":"fit <- fit_model(   mod,   iter = 2000,   warmup = 1000,   chains = 3 )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/articles/Using-EpiStrainDynamics.html","id":"step-3-calculate-and-explore-epidemiological-quantities","dir":"Articles","previous_headings":"","what":"Step 3: Calculate and explore epidemiological quantities","title":"Using EpiStainDynamics","text":"package provides helper functions calculate number useful epidemiological quantities. output methods functions named list containing data frame outcome quantity ($measure), fit object ($fit), constructed model object ($constructed_model). measure data frame containing median epidemiological quantity (y), 50% credible interval quantity (lb_50 & ub_50), 95% credible interval (lb_95 & ub_95), proportion greater defined threshold value (prop), pathogen name (pathogen), time label (time). Calculate epidemic growth rate growth_rate(): Calculate effective reproduction number time Rt() (requiring specification generation interval distribution): Calculate incidence without day week effect incidence(): Calculate proportions different combinations cases attributable different pathogens/subtypes using proportion(). default, function return dataframe proportions pathogen subtype pathogens/subtypes. Alternatively, one can specify selection pathogens/subtypes names named lists provided construct_model():","code":"gr <- growth_rate(fit) head(gr$measure) #>   pathogen pathogen_idx          y         lb_50      ub_50 #> 1    Total           NA 0.03698827 -0.0089480085 0.08706294 #> 2    Total           NA 0.03972700 -0.0002951054 0.07915102 #> 3    Total           NA 0.03678505  0.0066676300 0.06701464 #> 4    Total           NA 0.03218735  0.0065694847 0.05737864 #> 5    Total           NA 0.02799872  0.0034695705 0.05295108 #> 6    Total           NA 0.02606898  0.0036616871 0.04803510 #>         lb_95      ub_95      prop       time #> 1 -0.09949339 0.18583034 0.7086667 2012-01-09 #> 2 -0.07437469 0.15766399 0.7480000 2012-01-16 #> 3 -0.04990268 0.12807260 0.7936667 2012-01-23 #> 4 -0.04024085 0.10721439 0.8116667 2012-01-30 #> 5 -0.04507178 0.10040364 0.7816667 2012-02-06 #> 6 -0.03690913 0.08900377 0.7860000 2012-02-13 plot(gr) rt <- Rt(fit, gi_dist = function(x) 4*x*exp(-2*x)) plot(rt) inc_dow <- incidence(fit, dow = TRUE) plot(inc_dow) prop <- proportion(   fit,   numerator_combination = c('alpha', 'delta', 'omicron'),   denominator_combination = c('alpha', 'delta', 'omicron', 'other') ) prop <- proportion(fit) plot(prop)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Saras Windecker. Author, maintainer. Oliver Eales. Author. James McCaw. Contributor. Freya Shearer. Contributor. Milad Kharratzadeh. Contributor.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Windecker S, Eales O (2025). Infer temporal trends multiple pathogens. R package, https://github.com/acefa-hubs/EpiStrainDynamics. Eales O, Windecker S, McCaw J, Shearer F (2025). “Inferring temporal trends multiple pathogens, variants, subtypes serotypes routine surveillance data.” American Journal Epidemiology, kwaf119. doi:10.1093/aje/kwaf119.","code":"@Manual{EpiStrainDynamics,   title = {Infer temporal trends of multiple pathogens},   author = {Saras Windecker and Oliver Eales},   note = {R package},   year = {2025},   url = {https://github.com/acefa-hubs/EpiStrainDynamics}, } @Article{EpiStrainDynamicspaper,   title = {Inferring temporal trends of multiple pathogens, variants, subtypes or serotypes from routine surveillance data},   author = {Oliver Eales and Saras Windecker and James McCaw and Freya Shearer},   journal = {American Journal of Epidemiology},   year = {2025},   pages = {kwaf119},   month = {06},   doi = {10.1093/aje/kwaf119}, }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"epistraindynamics","dir":"","previous_headings":"","what":"Infer temporal trends of multiple pathogens","title":"Infer temporal trends of multiple pathogens","text":"EpiStrainDynamics statistical modelling framework capable inferring trends multiple pathogens. Estimating temporal trends infectious disease activity crucial monitoring disease spread impact interventions. Surveillance indicators routinely collected monitor trends often composite multiple pathogens. example, ‘influenza-like illness’ — routinely monitored proxy influenza infections — symptom definition caused wide range pathogens, including multiple subtypes influenza, SARS-CoV-2, RSV. Inferred trends composite time series may reflect trends one component pathogens, can exhibit distinct dynamics. Although many surveillance systems routinely test subset individuals contributing surveillance indicator — providing information relative contribution component pathogens — trends may obscured time-varying testing rates substantial noise observation process. EpiStrainDynamics builds existing modelling frameworks built handle two pathogens, extends able : infer trends number pathogens fit time series data counts (eg, daily number cases) incorporate influenza testing data subtype influenza samples may undetermined account day---week effects daily data include options fitting penalized splines random walks support additional (optional) correlation structures parameters describing smoothness penalized splines (random walks), account additional (optional) sources noise observation process.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Infer temporal trends of multiple pathogens","text":"can install EpiStrainDynamics :","code":"devtools::install_github('acefa-hubs/EpiStrainDynamics')"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"using-epistraindynamics","dir":"","previous_headings":"","what":"Using EpiStrainDynamics","title":"Infer temporal trends of multiple pathogens","text":"Detailed instructions can found vignette website. provide short overview.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"step-1-construct-model","dir":"","previous_headings":"Using EpiStrainDynamics","what":"Step 1: Construct model","title":"Infer temporal trends of multiple pathogens","text":"Modelling specifications provided using construct_model function. correct stan model applied based specifications provided. construct_model() takes three arguments: method, pathogen_structure, dow_effect.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"method","dir":"","previous_headings":"Using EpiStrainDynamics > Step 1: Construct model","what":"method","title":"Infer temporal trends of multiple pathogens","text":"EpiStrainDynamics pre-compiled stan models fit either bayesian penalised splines random walks. specified using method argument construct_model() functions, either random_walk() p_spline(). penalised spline model two options specify: spline_degree polynomial degree individual spline segments used construct overall curve (must positive whole number) days_per_knot, number days knot (must also positive whole number). may specify:","code":"method = random_walk(),  # OR method = p_spline(spline_degree = 3, days_per_knot = 2),  # example options"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"pathogen_structure","dir":"","previous_headings":"Using EpiStrainDynamics > Step 1: Construct model","what":"pathogen_structure","title":"Infer temporal trends of multiple pathogens","text":"three main types pathogen structure available model: single(), multiple(), subtyped(). single() pathogen structure simplest models single pathogen timeseries. vector case timeseries provided argument case_timeseries, vector date time labels provided time, optionally pathogen name can assigned pathogen_name. multiple() subtyped() pathogen structures also case_timeseries time arguments, single() structure. addition two arguments, instead single argument pathogen_name, multiple() subtyped() one arguments allow user define names data different components subtypes modelled. multiple(), specified named list argument component_pathogen_timeseries. names list using subsequent plotting. subtyped(), allows user incorporate testing data influenza subtypes, vector total unsubtyped influenza cases specified influenzaA_unsubtyped_timeseries, named list subtyped influenza timeseries provided influenzaA_subtyped_timeseries, pathogens provided named list other_pathogen_timeseries. addition specifying data pathogen names, multiple() subtyped() allow user modify correlation structures parameters describing smoothness (argument smoothing_structure) account additional sources noise observation process (observation_noise). smoothing_structure either 'shared' (pathogens smoothness), 'independent' (pathogen completely independent smoothing structure), 'correlated' (smoothing structure correlated among pathogens). observation_noise either 'observation_noise_only' (includes observation noise - pathogens) 'pathogen_specific_noise' (includes noise individual pathogens well).","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"dow_effect","dir":"","previous_headings":"Using EpiStrainDynamics > Step 1: Construct model","what":"dow_effect","title":"Infer temporal trends of multiple pathogens","text":"Day week effect specified logical (TRUE FALSE) dow_effect argument. plotting day week effect can selectively removed. Altogether, example constructed model random walk model multiple pathogens might look follows, illustrated using data provided package sarscov2:","code":"mod <- construct_model(   method = random_walk(),                   # specify `random_walk` method    pathogen_structure = multiple(            # specify `multiple` pathogen structure    case_timeseries = sarscov2$cases,        # timeseries of case data    time = sarscov2$date,                    # date or time variable labels     component_pathogen_timeseries = list(    # named list of component pathogens      alpha = sarscov2$alpha,      delta = sarscov2$delta,      omicron = sarscov2$omicron,      other = sarscov2$other    ),     smoothing_structure = 'independent',             # correlation structure    observation_noise = 'observation_noise_only'     # observation noise  ),   dow_effect = TRUE                         # day of week effect )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"step-2-fit-model","dir":"","previous_headings":"Using EpiStrainDynamics","what":"Step 2: fit model","title":"Infer temporal trends of multiple pathogens","text":"model estimates expected value time series (eg, smoothed trend daily number cases accounting noise) individual pathogen. Model parameterisation decisions specified constructing model step 1 mean correct stan model applied stage simply calling:","code":"fit <- fit_model(mod)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"step-3-calculate-and-visualise-epidemiological-quantities","dir":"","previous_headings":"Using EpiStrainDynamics","what":"Step 3: Calculate and visualise epidemiological quantities","title":"Infer temporal trends of multiple pathogens","text":"Calculate epidemic growth rate growth_rate(fit), effective reproduction number time Rt(fit, gi_dist = X) (requiring specification generation interval distribution X), incidence without day week effect incidence(fit, dow_effect = TRUE), proportions different combinations cases attributable different pathogens/subtypes using proportion(). detailed discussion, check vignette.","code":"prop <- proportion(fit) plot(prop)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Infer temporal trends of multiple pathogens","text":"using package, please cite package research article underlying statistical model developments: Windecker S, Eales O (2025). EpiStrainDynamics: Infer temporal trends multiple pathogens. R package version 0.0.0.9000, https://acefa-hubs.github.io/EpiStrainDynamics/. Oliver Eales, Saras M Windecker, James M McCaw, Freya M Shearer, Inferring temporal trends multiple pathogens, variants, subtypes serotypes routine surveillance data, American Journal Epidemiology, 2025;, kwaf119, https://doi.org/10.1093/aje/kwaf119 code corresponding paper, see branch paper_analysis.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Infer temporal trends of multiple pathogens","text":"work progress. see mistakes package (branch main) code associated analyses paper (branch paper_analysis), let us know logging bug issues page.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Infer temporal trends of multiple pathogens","text":"Please note EpiStrainDynamics project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Infer temporal trends of multiple pathogens","text":"project supported Australia-Aotearoa Consortium Epidemic Forecasting Analytics.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/EpiStrainDynamics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'EpiStrainDynamics' package. — EpiStrainDynamics-package","title":"The 'EpiStrainDynamics' package. — EpiStrainDynamics-package","text":"statistical framework developed inferring temporal trends multiple pathogens routinely collected surveillance data.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/EpiStrainDynamics-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'EpiStrainDynamics' package. — EpiStrainDynamics-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.32.3. https://mc-stan.org","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/Rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for Rt Analysis — Rt","title":"Generic Method for Rt Analysis — Rt","text":"S3 generic computing reproduction numbers fitted models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/Rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for Rt Analysis — Rt","text":"","code":"Rt(fitted_model, tau_max = 7, gi_dist, ...)  # S3 method for class 'ps' Rt(fitted_model, tau_max = 7, gi_dist, ...)  # S3 method for class 'rw' Rt(fitted_model, tau_max = 7, gi_dist, ...)  # S3 method for class 'ps_single' Rt(fitted_model, tau_max = 7, gi_dist, ...)  # S3 method for class 'rw_single' Rt(fitted_model, tau_max = 7, gi_dist, ...)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/Rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for Rt Analysis — Rt","text":"fitted_model Fitted model object class `EpiStrainDynamics.fit` tau_max Integer maximum generation interval days (default: 7) gi_dist Function returns generation interval probability given day ... Additional arguments passed metrics calculation","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/Rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for Rt Analysis — Rt","text":"named list class `EpiStrainDynamics.metric` containing dataframe  calculated metric outcome (`$measure`), fit object (`$fit`),  constructed model object (`$constructed_model`). `measure` data frame  contains median epidemiological quantity (`y`), 50  interval quantity (`lb_50` & `ub_50`), 95  (`lb_95` & `ub_95`), proportion greater defined threshold value  (`prop`), pathogen name (`pathogen`), time label (`time`).","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/Rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for Rt Analysis — Rt","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = random_walk(),     pathogen_structure = single(       case_timeseries = sarscov2$cases,       time = sarscov2$date))    fit <- fit_model(mod)    rt <- Rt(fit, tau_max = 7, gi_dist = function(x) 4*x*exp(-2*x)) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Growth Rate for Individual Pathogen — calc_growth_individual","title":"Calculate Growth Rate for Individual Pathogen — calc_growth_individual","text":"Computes log-difference incidence specific pathogen","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Growth Rate for Individual Pathogen — calc_growth_individual","text":"","code":"calc_growth_individual(a, time_idx, pathogen_idx, post, components)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Growth Rate for Individual Pathogen — calc_growth_individual","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx Integer pathogen index post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Growth Rate for Individual Pathogen — calc_growth_individual","text":"Vector growth rate posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Growth Rate for Single Pathogen Model — calc_growth_single","title":"Calculate Growth Rate for Single Pathogen Model — calc_growth_single","text":"Computes log-difference incidence single pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Growth Rate for Single Pathogen Model — calc_growth_single","text":"","code":"calc_growth_single(a, time_idx, pathogen_idx, post, components)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Growth Rate for Single Pathogen Model — calc_growth_single","text":"Array log-incidence posterior samples [samples, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Growth Rate for Single Pathogen Model — calc_growth_single","text":"Vector growth rate posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Total Growth Rate Across All Pathogens — calc_growth_total","title":"Calculate Total Growth Rate Across All Pathogens — calc_growth_total","text":"Computes log-difference total incidence across pathogens","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Total Growth Rate Across All Pathogens — calc_growth_total","text":"","code":"calc_growth_total(a, time_idx, pathogen_idx, post, components)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Total Growth Rate Across All Pathogens — calc_growth_total","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_growth_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Total Growth Rate Across All Pathogens — calc_growth_total","text":"Vector total growth rate posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Incidence for Individual Pathogen (with DOW adjustment) — calc_incidence_individual","title":"Calculate Incidence for Individual Pathogen (with DOW adjustment) — calc_incidence_individual","text":"Computes incidence specific pathogen, applying day--week effects present","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Incidence for Individual Pathogen (with DOW adjustment) — calc_incidence_individual","text":"","code":"calc_incidence_individual(   a,   time_idx,   pathogen_idx,   post,   components,   dow_effect )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Incidence for Individual Pathogen (with DOW adjustment) — calc_incidence_individual","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx Integer pathogen index post Posterior samples object containing day_of_week_simplex DOW effects used components Model components containing DOW information dow_effect Logical whether day--week effect calculated","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Incidence for Individual Pathogen (with DOW adjustment) — calc_incidence_individual","text":"Vector incidence posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Incidence for Single Pathogen Model (with DOW adjustment) — calc_incidence_single","title":"Calculate Incidence for Single Pathogen Model (with DOW adjustment) — calc_incidence_single","text":"Computes incidence single pathogen models, applying day--week effects present","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Incidence for Single Pathogen Model (with DOW adjustment) — calc_incidence_single","text":"","code":"calc_incidence_single(a, time_idx, pathogen_idx, post, components, dow_effect)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Incidence for Single Pathogen Model (with DOW adjustment) — calc_incidence_single","text":"Array log-incidence posterior samples [samples, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object containing day_of_week_simplex DOW effects used components Model components containing DOW information dow_effect Logical whether day--week effect calculated","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Incidence for Single Pathogen Model (with DOW adjustment) — calc_incidence_single","text":"Vector incidence posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Total Incidence Across All Pathogens (with DOW adjustment) — calc_incidence_total","title":"Calculate Total Incidence Across All Pathogens (with DOW adjustment) — calc_incidence_total","text":"Computes total incidence across pathogens, applying day--week effects present","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Total Incidence Across All Pathogens (with DOW adjustment) — calc_incidence_total","text":"","code":"calc_incidence_total(a, time_idx, pathogen_idx, post, components, dow_effect)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Total Incidence Across All Pathogens (with DOW adjustment) — calc_incidence_total","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object containing day_of_week_simplex DOW effects used components Model components containing DOW information dow_effect Logical whether day--week effect calculated","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_incidence_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Total Incidence Across All Pathogens (with DOW adjustment) — calc_incidence_total","text":"Vector total incidence posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate proportion for Individual Pathogen — calc_proportion","title":"Calculate proportion for Individual Pathogen — calc_proportion","text":"Computes log-difference incidence specific pathogen","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate proportion for Individual Pathogen — calc_proportion","text":"","code":"calc_proportion(   a,   time_idx,   pathogen_idx,   post,   components,   numerator_idx,   denominator_idx )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate proportion for Individual Pathogen — calc_proportion","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx Integer pathogen index post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency) numerator_idx Integer index pathogen/s used numerator proportion denominator_idx Integer index pathogen/s used denominator proportion","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate proportion for Individual Pathogen — calc_proportion","text":"Vector proportion posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Rt for Individual Pathogen — calc_rt_individual","title":"Calculate Rt for Individual Pathogen — calc_rt_individual","text":"Computes reproduction number specific pathogen using generation interval convolution","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Rt for Individual Pathogen — calc_rt_individual","text":"","code":"calc_rt_individual(   a,   time_idx,   pathogen_idx,   post,   components,   tau_max,   gi_dist,   g_a )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Rt for Individual Pathogen — calc_rt_individual","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx Integer pathogen index post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency) tau_max Integer maximum generation interval (days) gi_dist Function returning generation interval probability given day g_a Numeric normalization constant (sum generation interval)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Rt for Individual Pathogen — calc_rt_individual","text":"Vector Rt posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Rt for Single Pathogen Model — calc_rt_single","title":"Calculate Rt for Single Pathogen Model — calc_rt_single","text":"Computes reproduction number single pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Rt for Single Pathogen Model — calc_rt_single","text":"","code":"calc_rt_single(   a,   time_idx,   pathogen_idx,   post,   components,   tau_max,   gi_dist,   g_a )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Rt for Single Pathogen Model — calc_rt_single","text":"Array log-incidence posterior samples [samples, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency) tau_max Integer maximum generation interval (days) gi_dist Function returning generation interval probability given day g_a Numeric normalization constant (sum generation interval)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Rt for Single Pathogen Model — calc_rt_single","text":"Vector Rt posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Total Rt Across All Pathogens — calc_rt_total","title":"Calculate Total Rt Across All Pathogens — calc_rt_total","text":"Computes total reproduction number across pathogens","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Total Rt Across All Pathogens — calc_rt_total","text":"","code":"calc_rt_total(   a,   time_idx,   pathogen_idx,   post,   components,   tau_max,   gi_dist,   g_a )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Total Rt Across All Pathogens — calc_rt_total","text":"Array log-incidence posterior samples [samples, pathogens, time] time_idx Integer time index pathogen_idx NULL (unused required interface consistency) post Posterior samples object (unused required interface consistency) components Model components (unused required interface consistency) tau_max Integer maximum generation interval (days) gi_dist Function returning generation interval probability given day g_a Numeric normalization constant (sum generation interval)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_rt_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Total Rt Across All Pathogens — calc_rt_total","text":"Vector total Rt posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Summary Statistics for Posterior Samples — calc_stats","title":"Calculate Summary Statistics for Posterior Samples — calc_stats","text":"Computes quantiles proportion threshold vector posterior samples","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Summary Statistics for Posterior Samples — calc_stats","text":"","code":"calc_stats(values, threshold = 0)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Summary Statistics for Posterior Samples — calc_stats","text":"values Numeric vector posterior samples threshold Numeric threshold calculating proportion (default: 0)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Summary Statistics for Posterior Samples — calc_stats","text":"Data frame columns: y (median), lb_50/ub_50 (50","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Calculation Wrapper — calc_wrapper","title":"Unified Calculation Wrapper — calc_wrapper","text":"Wrapper function applies calculation functions data computes summary statistics","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Calculation Wrapper — calc_wrapper","text":"","code":"calc_wrapper(   df,   time_idx_col,   pathogen_idx_col,   calc_fn,   a,   post,   components,   extra_args,   threshold )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified Calculation Wrapper — calc_wrapper","text":"df Data frame containing time grid pathogen grid time_idx_col Vector time indices pathogen_idx_col Vector pathogen indices (list NULLs) calc_fn Calculation function apply Array posterior samples post Posterior samples object components Model components get_model_components() extra_args List additional arguments calc_fn threshold Numeric threshold summary statistics","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/calc_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified Calculation Wrapper — calc_wrapper","text":"Data frame expanded summary statistics","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_multi_pathogen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","title":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","text":"High-level function coordinates analysis multiple pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_multi_pathogen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","text":"","code":"compute_multi_pathogen(   fitted_model,   start_idx,   measure,   threshold = 0,   use_splines = FALSE,   ... )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_multi_pathogen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","text":"fitted_model Fitted model object start_idx Integer starting time index analysis measure Character string specifying metric (\"incidence\", \"growth_rate\", \"Rt\") threshold Numeric threshold proportion calculations (default: 0) use_splines Logical indicating whether use spline transformation ... Additional arguments passed calculation functions (e.g., tau_max, gi_dist Rt, dow incidence)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_multi_pathogen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","text":"Data frame results individual pathogens totals","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_multi_pathogen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Computation Engine for Multiple Pathogen Analysis — compute_multi_pathogen","text":"","code":"if (FALSE) { # \\dontrun{ results <- compute_multi_pathogen(fitted_model, 1, \"incidence\") } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_single_pathogen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","title":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","text":"High-level function coordinates analysis single pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_single_pathogen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","text":"","code":"compute_single_pathogen(   fitted_model,   start_idx,   measure,   threshold = 0,   use_splines = FALSE,   ... )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_single_pathogen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","text":"fitted_model Fitted model object start_idx Integer starting time index analysis measure Character string specifying metric (\"incidence\", \"growth_rate\", \"Rt\") threshold Numeric threshold proportion calculations (default: 0) use_splines Logical indicating whether use spline transformation ... Additional arguments passed calculation functions (e.g., tau_max, gi_dist Rt)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_single_pathogen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","text":"Data frame analysis results","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/compute_single_pathogen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Computation Engine for Single Pathogen Analysis — compute_single_pathogen","text":"","code":"if (FALSE) { # \\dontrun{ results <- compute_single_pathogen(fitted_model, 1, \"growth_rate\") } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/construct_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct model — construct_model","title":"Construct model — construct_model","text":"Construct model","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/construct_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct model — construct_model","text":"","code":"construct_model(method, pathogen_structure, dow_effect = FALSE)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/construct_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct model — construct_model","text":"method either `random_walk()` `p_spline()` pathogen_structure either `single()`, `multiple()`, `subtyped()` dow_effect logical whether incorporate day week model","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/construct_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct model — construct_model","text":"list containing data, model parameters, pathogen  names class `EpiStrainDynamics.model`","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/construct_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct model — construct_model","text":"","code":"# Basic usage method_obj <- random_walk() pathogen_obj <- single(   case_timeseries = sarscov2$cases,   time = sarscov2$date,   pathogen_name = \"SARS-CoV-2\" )  mod <- construct_model(   method = method_obj,   pathogen_structure = pathogen_obj,   dow_effect = TRUE )  # Alternatively, call the methods and pathogen structure inside the function mod <- construct_model(   method = p_spline(),   pathogen_structure = multiple(     case_timeseries = sarscov2$cases,     time = sarscov2$date,     component_pathogen_timeseries = list(       alpha = sarscov2$alpha,       delta = sarscov2$delta,       omicron = sarscov2$omicron,       other = sarscov2$other)),   dow_effect = FALSE )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/expand_pathogen_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Time Grid for Multiple Pathogens — expand_pathogen_grid","title":"Expand Time Grid for Multiple Pathogens — expand_pathogen_grid","text":"Expands time grid include pathogen-time combinations (sequential pairing, Cartesian product)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/expand_pathogen_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Time Grid for Multiple Pathogens — expand_pathogen_grid","text":"","code":"expand_pathogen_grid(time_grid, pathogen_names)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/expand_pathogen_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Time Grid for Multiple Pathogens — expand_pathogen_grid","text":"time_grid Data frame time_idx columns pathogen_names Character vector pathogen names","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/expand_pathogen_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Time Grid for Multiple Pathogens — expand_pathogen_grid","text":"Data frame columns: pathogen, pathogen_idx, time_idx","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for fitting model — fit_model","title":"Generic Method for fitting model — fit_model","text":"S3 generic fitted models constructed model object","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for fitting model — fit_model","text":"","code":"fit_model(constructed_model, iter = 2000, warmup = 1000, chains = 3)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for fitting model — fit_model","text":"constructed_model prepared model object class `EpiStrainDynamics.model` iter number iterations, defaults 2000 warmup number warmup iterations, defaults 1000 chains number chains, defaults 3","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for fitting model — fit_model","text":"fit model class `EpiStrainDynamics.fit`","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for fitting model — fit_model","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = random_walk(),     pathogen_structure = single(       case_timeseries = sarscov2$cases,       time = sarscov2$date))    fit <- fit_model(mod)    # or specify additional mcmc parameters   fit <- fit_model(     mod, iter = 3000, warmup = 2000, chains = 4   ) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_cov_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get covariance structure from assigned smoothing structure — get_cov_structure","title":"Get covariance structure from assigned smoothing structure — get_cov_structure","text":"Get covariance structure assigned smoothing structure","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_cov_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get covariance structure from assigned smoothing structure — get_cov_structure","text":"","code":"get_cov_structure(   smoothing_structure = c(\"shared\", \"independent\", \"correlated\") )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_cov_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get covariance structure from assigned smoothing structure — get_cov_structure","text":"smoothing_structure either 'shared' (pathogens ; tau[1]), 'independent' (pathogen completely independent smoothing structure; tau[number pathogens]), 'correlated' (smoothing structure correlated among pathogens Sigma[number pathogens, number pathogens]). Case-insensitive.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_cov_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get covariance structure from assigned smoothing structure — get_cov_structure","text":"numeric value covariance structure needed stan models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_knots.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for getting knot locations — get_knots","title":"Function for getting knot locations — get_knots","text":"Function getting knot locations","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_knots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for getting knot locations — get_knots","text":"","code":"get_knots(X, days_per_knot = 3, spline_degree = 3)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_knots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for getting knot locations — get_knots","text":"X Numeric vector time points days_per_knot Number days knots (must positive) spline_degree Polynomial degree spline (must positive)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_knots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for getting knot locations — get_knots","text":"Numeric vector knot locations","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Components from Fitted Model — get_model_components","title":"Extract Model Components from Fitted Model — get_model_components","text":"Extracts commonly used components fitted model object analysis functions","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Components from Fitted Model — get_model_components","text":"","code":"get_model_components(fitted_model)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Components from Fitted Model — get_model_components","text":"fitted_model Fitted model object containing fit, constructed_model, etc.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Components from Fitted Model — get_model_components","text":"List containing extracted components: fit, pathogen_names, num_path,   time_seq, time, num_days, days_per_knot, spline_degree, DOW, week_effect, dow_effect","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model type from method and pathogen structure — get_model_type","title":"Extract model type from method and pathogen structure — get_model_type","text":"Extract model type method pathogen structure","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model type from method and pathogen structure — get_model_type","text":"","code":"get_model_type(method_name, pathogen_type)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model type from method and pathogen structure — get_model_type","text":"method_name Character string: method name ('random-walk' 'p-spline') pathogen_type Character string: pathogen structure type","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model type from method and pathogen structure — get_model_type","text":"Character string: model type","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_noise_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get noise structure from specified observation noise — get_noise_structure","title":"Get noise structure from specified observation noise — get_noise_structure","text":"Get noise structure specified observation noise","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_noise_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get noise structure from specified observation noise — get_noise_structure","text":"","code":"get_noise_structure(   observation_noise = c(\"observation_noise_only\", \"pathogen_specific_noise\") )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_noise_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get noise structure from specified observation noise — get_noise_structure","text":"observation_noise either 'observation_noise_only' (includes observation noise - pathogens) 'pathogen_specific_noise' (includes noise individual pathogens well). Case-insensitive.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/get_noise_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get noise structure from specified observation noise — get_noise_structure","text":"numeric value noise structure needed stan models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/growth_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for Growth Rate Analysis — growth_rate","title":"Generic Method for Growth Rate Analysis — growth_rate","text":"S3 generic computing growth rates fitted models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/growth_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for Growth Rate Analysis — growth_rate","text":"","code":"growth_rate(fitted_model, ...)  # S3 method for class 'ps' growth_rate(fitted_model, ...)  # S3 method for class 'rw' growth_rate(fitted_model, ...)  # S3 method for class 'ps_single' growth_rate(fitted_model, ...)  # S3 method for class 'rw_single' growth_rate(fitted_model, ...)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/growth_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for Growth Rate Analysis — growth_rate","text":"fitted_model Fitted model object class `EpiStrainDynamics.fit` ... Additional arguments passed metrics calculation","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/growth_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for Growth Rate Analysis — growth_rate","text":"named list class `EpiStrainDynamics.metric` containing dataframe  calculated metric outcome (`$measure`), fit object (`$fit`),  constructed model object (`$constructed_model`). `measure` data frame  contains median epidemiological quantity (`y`), 50  interval quantity (`lb_50` & `ub_50`), 95  (`lb_95` & `ub_95`), proportion greater defined threshold value  (`prop`), pathogen name (`pathogen`), time label (`time`).","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/growth_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for Growth Rate Analysis — growth_rate","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = random_walk(),     pathogen_structure = single(       case_timeseries = sarscov2$cases,       time = sarscov2$date))    fit <- fit_model(mod)   gr <- growth_rate(fit) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for Incidence Analysis — incidence","title":"Generic Method for Incidence Analysis — incidence","text":"S3 generic computing incidence fitted models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for Incidence Analysis — incidence","text":"","code":"incidence(fitted_model, dow, ...)  # S3 method for class 'ps' incidence(fitted_model, dow, ...)  # S3 method for class 'rw' incidence(fitted_model, dow, ...)  # S3 method for class 'ps_single' incidence(fitted_model, dow, ...)  # S3 method for class 'rw_single' incidence(fitted_model, dow, ...)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for Incidence Analysis — incidence","text":"fitted_model Fitted model object class `EpiStrainDynamics.fit` dow Logical whether include day--week incidence calc ... Additional arguments passed metrics calculation","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for Incidence Analysis — incidence","text":"named list class `EpiStrainDynamics.metric` containing dataframe  calculated metric outcome (`$measure`), fit object (`$fit`),  constructed model object (`$constructed_model`). `measure` data frame  contains median epidemiological quantity (`y`), 50  interval quantity (`lb_50` & `ub_50`), 95  (`lb_95` & `ub_95`), proportion greater defined threshold value  (`prop`), pathogen name (`pathogen`), time label (`time`).","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/incidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for Incidence Analysis — incidence","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = random_walk(),     pathogen_structure = single(       case_timeseries = sarscov2$cases,       time = sarscov2$date))    fit <- fit_model(mod)   inc <- incidence(fit, dow = TRUE) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/influenza.html","id":null,"dir":"Reference","previous_headings":"","what":"THIS NEEDS TO BE EDITED — influenza","title":"THIS NEEDS TO BE EDITED — influenza","text":"Influenza-like illness data retrieved World Health Organization’s Global Influenza Programme.16 collated weekly data Australia week starting January 2, 2012 week starting December 25, 2023 inclusive. data described: (1) weekly number cases influenza-like illness; (2) weekly number specimens positive influenza subtype (number negative tests). grouped influenza specimens : influenza subtype determined; influenza H3N2; influenza H1N1 (influenza H1N1, influenza H1N1pdm09); influenza B (influenza B Yamagata, influenza B Victoria, influenza B lineage determined); negative tests. Negative tests likely reflect individuals infected ILI-causing pathogens unknown causes data determine.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/influenza.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THIS NEEDS TO BE EDITED — influenza","text":"","code":"influenza"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/influenza.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THIS NEEDS TO BE EDITED — influenza","text":"## `influenza` data frame 830 rows 15 columns: ili Integer, daily total number cases influenza-like illness week Date, 1 January 2012 week starting 1 March 2020 inf_A Integer, daily number cases unsubtyped influenza inf_B Integer, daily number cases influenza B inf_all Integer, daily number cases inf_neg Integer, daily number cases inf_H3N2 Integer, daily number cases influenza subtype H3N2 inf_H1N1 Integer, daily number cases influenza subtype H1N1 num_spec Integer, number specimens","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/influenza.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THIS NEEDS TO BE EDITED — influenza","text":"<https://www..int/teams/global-influenza-programme/surveillance--monitoring/influenza-surveillance-outputs>","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_arg_case_insensitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Case-insensitive argument matching — match_arg_case_insensitive","title":"Case-insensitive argument matching — match_arg_case_insensitive","text":"helper function perform case-insensitive argument matching, similar `match.arg()` ignoring case differences. function converts argument choices lowercase matching.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_arg_case_insensitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case-insensitive argument matching — match_arg_case_insensitive","text":"","code":"match_arg_case_insensitive(arg, choices, several.ok = FALSE, arg_name = NULL)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_arg_case_insensitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case-insensitive argument matching — match_arg_case_insensitive","text":"arg argument match. Can character vector missing. choices Character vector valid choices (lowercase). several.ok Logical; TRUE, multiple matches allowed. arg_name Optional character string giving name argument better error messages.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_arg_case_insensitive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case-insensitive argument matching — match_arg_case_insensitive","text":"matched argument (lowercase).","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_args_case_insensitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply case-insensitive matching to multiple arguments — match_args_case_insensitive","title":"Apply case-insensitive matching to multiple arguments — match_args_case_insensitive","text":"convenience wrapper around `match_arg_case_insensitive()` handling multiple arguments . Useful several string parameters need case-insensitive matching.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_args_case_insensitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply case-insensitive matching to multiple arguments — match_args_case_insensitive","text":"","code":"match_args_case_insensitive(arg_list, choices_list, several.ok = FALSE)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_args_case_insensitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply case-insensitive matching to multiple arguments — match_args_case_insensitive","text":"arg_list Named list names argument names values arguments match choices_list Named list names correspond argument names values character vectors valid choices several.ok Logical; TRUE, multiple matches allowed args","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/match_args_case_insensitive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply case-insensitive matching to multiple arguments — match_args_case_insensitive","text":"Named list matched arguments (lowercase)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple pathogen structure — multiple","title":"Multiple pathogen structure — multiple","text":"Multiple pathogen structure","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple pathogen structure — multiple","text":"","code":"multiple(   case_timeseries,   time,   component_pathogen_timeseries,   smoothing_structure = c(\"shared\", \"independent\", \"correlated\"),   observation_noise = c(\"observation_noise_only\", \"pathogen_specific_noise\") )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple pathogen structure — multiple","text":"case_timeseries vector total case data time vector labelled time data component_pathogen_timeseries named list pathogen timeseries case counts smoothing_structure either `shared` (pathogens smoothing structure; tau[1]), `independent` (pathogen completely independent smoothing structure; tau[number pathogens]), `correlated` (smoothing structure correlated among pathogens Sigma[number pathogens, number pathogens]). Case-insensitive. observation_noise either `observation_noise_only` (includes observation noise - pathogens) `pathogen_specific_noise` (includes noise individual pathogens well). Case-insensitive.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple pathogen structure — multiple","text":"named list including pathogen_structure, pathogen_names, data,   model_params class `EpiStrainDynamics.pathogen_structure`","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple pathogen structure — multiple","text":"","code":"multiple(   case_timeseries = sarscov2$cases,   time = sarscov2$date,   component_pathogen_timeseries = list(     alpha = sarscov2$alpha,     delta = sarscov2$delta,     omicron = sarscov2$omicron,     other = sarscov2$other   ),   smoothing_structure = 'independent',   observation_noise = 'observation_noise_only' ) #> $pathogen_structure #> [1] \"multiple\" #>  #> $pathogen_names #> [1] \"alpha\"   \"delta\"   \"omicron\" \"other\"   #>  #> $data #> $data$case_timeseries #>   [1]   7096   7682   7318   6810   7023   9983  10366  12717  13357  13854 #>  [11]  11667  11953  16753  17250  18573  18425  15893  12648  12202  19671 #>  [21]  19116  19920  18606  17915  14882  14311  25872  25613  25714  23475 #>  [31]  21694  16434  15895  26807  24351  23901  23614  22890  16673  15970 #>  [41]  31925  25943  24027  24063  23659  18766  20244  31510  27789  27757 #>  [51]  24826  24388  18223  16233  26952  23488  21076  18041  17100  12533 #>  [61]  11895  19024  16679  16814  14761  14554  11086  10852  18198  16684 #>  [71]  16676  15860  15834  12893  13731  21584  21065  21909  22916  24390 #>  [81]  19588  22266  35197  34378  35427  34437  36419  25589  33066  48192 #>  [91]  46475  42936  32392  14419  41110  48520  46408  83090  72161  53947 #> [101]  32482  61654  56335  77972  66638  58784  53187  48105  40035  37174 #> [111]  58592  50647  46509  43472  41452  31250  29592  45957  40525  35986 #> [121]  32502  30330  22344  17554  30737  27730  26303  24773  22434  17167 #> [131]  15783  22972  20265  19914  18493  16307  12320  11664  16194  14225 #> [141]  13899  13139  12573   9035   8995  14735  12939  11942  11793  10728 #> [151]   8313   8098  11657   9763   8847   8024   6782   4949   4873   7192 #> [161]   6918   6172   5937   5467   4628   4410   6890   6488   6250   5933 #> [171]   5717   4381   4425   6703   5863   5978   5632   5180   4247   5390 #> [181]   6459   5484   6224   5616   4567   3731   5030   4196   3779   3966 #> [191]   3674   2747   2508   2412   2744   3313   3253   3147   2953   2380 #> [201]   2376   2881   2495   2512   2345   2347   1722   2584   2738   2541 #> [211]   2708   2409   2020   1564   2119   2626   2178   2499   2230   1825 #> [221]   1433   1521   2084   2553   2569   2326   1982   1609   2307   2809 #> [231]   2329   2335   2182   1938   1628   1923   2858   2812   2813   2517 #> [241]   2367   2000   2326   3369   3427   3922   3747   3589   3000   3164 #> [251]   3897   5431   6168   6258   5861   4731   5534   7946   7896   8210 #> [261]   8043   7619   6284   7135  10362  10800  11052  11106  10320   8447 #> [271]  10087  16308  17402  18351  18714  18169  16301  18502  28418  28199 #> [281]  28923  28794  26339  24010  25170  34919  36060  38597  34020  32804 #> [291]  28379  30503  44511  47707  54910  62000  55264  38476  36182  47924 #> [301]  39876  35548  31278  27817  22852  22187  29981  29582  30237  28432 #> [311]  24749  20570  20985  29840  30473  32338  31660  28035  22540  22887 #> [321]  32162  31518  33350  31726  28974  25057  25327  36907  37920  38739 #> [331]  36501  32231  28536  28743  39715  37682  38777  37613  33745  27601 #> [341]  26136  34774  45212  43532  42328  38633  31810  31803  44929  38619 #> [351]  35849  33974  29187  23533  24060  34658  31435  30414  29710  29479 #> [361]  26645  31084  40768  38848  36756  35851  32108  28567  32083  41589 #> [371]  36548  34837  32604  29058  26316  32059  43733  39279  39264  38465 #> [381]  35612  32306  36418  50304  48321  47775  46419  43560  37878  43752 #> [391]  57743  52529  51661  45194  40664  35103  35764  47466  42124  43045 #> [401]  41391  40251  33569  34814  45109  38019  35986  33662  30318  27436 #> [411]  30586  44126  42246  42942  40999  37763  32885  35532  50948  46430 #> [421]  45895  44062  39606  35335  37250  50733  48197  46772  43425  39330 #> [431]  33303  39706  56289  55695  54820  50319  45667  38784  41051  59694 #> [441]  56258  58827  56995  52492  48594  53158  87169 102788 112703 106055 #> [451]  95897  88883  89133 133966 150293 161560 160633 137268  70363 116287 #> [461] 195011 212469 272798 236576 188567 118275 181068 229901 275647 222174 #> [471] 172980 120287  93615  95790 132959 115245 103219  96412  86325  77950 #> [481]  98097 131514 118857 111760 100324  91730  81733 102365 127364 113202 #> [491] 108668  96201  84026  73512  87702 105051  93949  88418  76644  63264 #> [501]  52305  60552  76483  69661  64339  52293  44559  37529  41755  54745 #> [511]  52502  51572  44716  33241  34647  37720  45132  39188  36477  30631 #> [521]  27837  25089  31360  44649  44795  46179  43761  41408  38759  49026 #> [531]  68520  70112  73531  70510  67030  62078  75739  99834  93708  91751 #> [541]  82853  75285  67417  81054 109286  99095  94185  82905  72430  61456 #> [551]  68336  92857  80126  73643  54791  47462  37592  42179  53727  49101 #> [561]  44750  38709  32988  27885  30952  37371  33771  31685  26639  21617 #> [571]  19925  20144  25223  25772  21457  18464  15703  13210  14714  17109 #> [581]  14560  13055  11608  10012   8354   9034  11907  13318  11672  10221 #> [591]   8954   7517   9062  10702   9748   8725   7642   6942   6120   7973 #> [601]   9417   8286   7638   6820   5821   5019   5997   7313   6679   6293 #> [611]   5753   5409   4988   5680   7115   7093   7011   6209   6635   7492 #> [621]   9815  11747  11411  11784  11319  10784  10077  12693  15272  15141 #> [631]  14837  14225  13919  13623  16997  19942  20896  20873  19590  18350 #> [641]  16800  20778  25104  25041  24601  24240  23650  21961  27780  33704 #> [651]  31415  29698  26454  24611  21246  25096  29826  26946  23856  21100 #> [661]  18359  15017  17236  18718  16670  16169  14158  12378   9934  11275 #> [671]  13299  11725  10544   9329   8508   7325   8426   9835   9170   8353 #> [681]   7296   6548   5420   6547   8068   7309   6748   6193   5339   4495 #> [691]   5363   6424   5559   5032   4564   4012   3502   4085   5224   4778 #> [701]   4554   3796   3451   3112   3439   4662   5226   4616   4350   3808 #> [711]   3417   4288   5125   4578   4235   3747   3553   3268   4347   5308 #> [721]   5148   4973   4634   4134   3521   4339   6166   7828   7553   6815 #> [731]   6485   5719   7240   8618   8255   8414   7895   7615   7065   9204 #> [741]  11692  10965  10231   9389   8950   7053   8558  10497   9461   8769 #> [751]   8134   7970   6442   7780  10005   8235   7598   6576   6297   4968 #> [761]   5523   6807   5665   5449   4855   4401   3583   4271   5129   4549 #> [771]   4014   3678   3107   2665   3267   4321   3829   3576   3205   2893 #> [781]   2433   2912   3923   3534   3260   3037   2773   2431   2890   3938 #> [791]   3805   3616   3329   2902   2551   3448   4639   4386   3980   3505 #> [801]   3596   2748   3786   5325   5241   5195   4537   4216   3570   4631 #> [811]   6986   7111   6533   6094   6084   4743   5772   9073   8631   7802 #> [821]   6877   5741   4132   3694   4950   6605   8419   7718   6126   4287 #>  #> $data$time #>   [1] \"2020-09-23\" \"2020-09-24\" \"2020-09-25\" \"2020-09-26\" \"2020-09-27\" #>   [6] \"2020-09-28\" \"2020-09-29\" \"2020-09-30\" \"2020-10-01\" \"2020-10-02\" #>  [11] \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-06\" \"2020-10-07\" #>  [16] \"2020-10-08\" \"2020-10-09\" \"2020-10-10\" \"2020-10-11\" \"2020-10-12\" #>  [21] \"2020-10-13\" \"2020-10-14\" \"2020-10-15\" \"2020-10-16\" \"2020-10-17\" #>  [26] \"2020-10-18\" \"2020-10-19\" \"2020-10-20\" \"2020-10-21\" \"2020-10-22\" #>  [31] \"2020-10-23\" \"2020-10-24\" \"2020-10-25\" \"2020-10-26\" \"2020-10-27\" #>  [36] \"2020-10-28\" \"2020-10-29\" \"2020-10-30\" \"2020-10-31\" \"2020-11-01\" #>  [41] \"2020-11-02\" \"2020-11-03\" \"2020-11-04\" \"2020-11-05\" \"2020-11-06\" #>  [46] \"2020-11-07\" \"2020-11-08\" \"2020-11-09\" \"2020-11-10\" \"2020-11-11\" #>  [51] \"2020-11-12\" \"2020-11-13\" \"2020-11-14\" \"2020-11-15\" \"2020-11-16\" #>  [56] \"2020-11-17\" \"2020-11-18\" \"2020-11-19\" \"2020-11-20\" \"2020-11-21\" #>  [61] \"2020-11-22\" \"2020-11-23\" \"2020-11-24\" \"2020-11-25\" \"2020-11-26\" #>  [66] \"2020-11-27\" \"2020-11-28\" \"2020-11-29\" \"2020-11-30\" \"2020-12-01\" #>  [71] \"2020-12-02\" \"2020-12-03\" \"2020-12-04\" \"2020-12-05\" \"2020-12-06\" #>  [76] \"2020-12-07\" \"2020-12-08\" \"2020-12-09\" \"2020-12-10\" \"2020-12-11\" #>  [81] \"2020-12-12\" \"2020-12-13\" \"2020-12-14\" \"2020-12-15\" \"2020-12-16\" #>  [86] \"2020-12-17\" \"2020-12-18\" \"2020-12-19\" \"2020-12-20\" \"2020-12-21\" #>  [91] \"2020-12-22\" \"2020-12-23\" \"2020-12-24\" \"2020-12-25\" \"2020-12-26\" #>  [96] \"2020-12-27\" \"2020-12-28\" \"2020-12-29\" \"2020-12-30\" \"2020-12-31\" #> [101] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\" #> [106] \"2021-01-06\" \"2021-01-07\" \"2021-01-08\" \"2021-01-09\" \"2021-01-10\" #> [111] \"2021-01-11\" \"2021-01-12\" \"2021-01-13\" \"2021-01-14\" \"2021-01-15\" #> [116] \"2021-01-16\" \"2021-01-17\" \"2021-01-18\" \"2021-01-19\" \"2021-01-20\" #> [121] \"2021-01-21\" \"2021-01-22\" \"2021-01-23\" \"2021-01-24\" \"2021-01-25\" #> [126] \"2021-01-26\" \"2021-01-27\" \"2021-01-28\" \"2021-01-29\" \"2021-01-30\" #> [131] \"2021-01-31\" \"2021-02-01\" \"2021-02-02\" \"2021-02-03\" \"2021-02-04\" #> [136] \"2021-02-05\" \"2021-02-06\" \"2021-02-07\" \"2021-02-08\" \"2021-02-09\" #> [141] \"2021-02-10\" \"2021-02-11\" \"2021-02-12\" \"2021-02-13\" \"2021-02-14\" #> [146] \"2021-02-15\" \"2021-02-16\" \"2021-02-17\" \"2021-02-18\" \"2021-02-19\" #> [151] \"2021-02-20\" \"2021-02-21\" \"2021-02-22\" \"2021-02-23\" \"2021-02-24\" #> [156] \"2021-02-25\" \"2021-02-26\" \"2021-02-27\" \"2021-02-28\" \"2021-03-01\" #> [161] \"2021-03-02\" \"2021-03-03\" \"2021-03-04\" \"2021-03-05\" \"2021-03-06\" #> [166] \"2021-03-07\" \"2021-03-08\" \"2021-03-09\" \"2021-03-10\" \"2021-03-11\" #> [171] \"2021-03-12\" \"2021-03-13\" \"2021-03-14\" \"2021-03-15\" \"2021-03-16\" #> [176] \"2021-03-17\" \"2021-03-18\" \"2021-03-19\" \"2021-03-20\" \"2021-03-21\" #> [181] \"2021-03-22\" \"2021-03-23\" \"2021-03-24\" \"2021-03-25\" \"2021-03-26\" #> [186] \"2021-03-27\" \"2021-03-28\" \"2021-03-29\" \"2021-03-30\" \"2021-03-31\" #> [191] \"2021-04-01\" \"2021-04-02\" \"2021-04-03\" \"2021-04-04\" \"2021-04-05\" #> [196] \"2021-04-06\" \"2021-04-07\" \"2021-04-08\" \"2021-04-09\" \"2021-04-10\" #> [201] \"2021-04-11\" \"2021-04-12\" \"2021-04-13\" \"2021-04-14\" \"2021-04-15\" #> [206] \"2021-04-16\" \"2021-04-17\" \"2021-04-18\" \"2021-04-19\" \"2021-04-20\" #> [211] \"2021-04-21\" \"2021-04-22\" \"2021-04-23\" \"2021-04-24\" \"2021-04-25\" #> [216] \"2021-04-26\" \"2021-04-27\" \"2021-04-28\" \"2021-04-29\" \"2021-04-30\" #> [221] \"2021-05-01\" \"2021-05-02\" \"2021-05-03\" \"2021-05-04\" \"2021-05-05\" #> [226] \"2021-05-06\" \"2021-05-07\" \"2021-05-08\" \"2021-05-09\" \"2021-05-10\" #> [231] \"2021-05-11\" \"2021-05-12\" \"2021-05-13\" \"2021-05-14\" \"2021-05-15\" #> [236] \"2021-05-16\" \"2021-05-17\" \"2021-05-18\" \"2021-05-19\" \"2021-05-20\" #> [241] \"2021-05-21\" \"2021-05-22\" \"2021-05-23\" \"2021-05-24\" \"2021-05-25\" #> [246] \"2021-05-26\" \"2021-05-27\" \"2021-05-28\" \"2021-05-29\" \"2021-05-30\" #> [251] \"2021-05-31\" \"2021-06-01\" \"2021-06-02\" \"2021-06-03\" \"2021-06-04\" #> [256] \"2021-06-05\" \"2021-06-06\" \"2021-06-07\" \"2021-06-08\" \"2021-06-09\" #> [261] \"2021-06-10\" \"2021-06-11\" \"2021-06-12\" \"2021-06-13\" \"2021-06-14\" #> [266] \"2021-06-15\" \"2021-06-16\" \"2021-06-17\" \"2021-06-18\" \"2021-06-19\" #> [271] \"2021-06-20\" \"2021-06-21\" \"2021-06-22\" \"2021-06-23\" \"2021-06-24\" #> [276] \"2021-06-25\" \"2021-06-26\" \"2021-06-27\" \"2021-06-28\" \"2021-06-29\" #> [281] \"2021-06-30\" \"2021-07-01\" \"2021-07-02\" \"2021-07-03\" \"2021-07-04\" #> [286] \"2021-07-05\" \"2021-07-06\" \"2021-07-07\" \"2021-07-08\" \"2021-07-09\" #> [291] \"2021-07-10\" \"2021-07-11\" \"2021-07-12\" \"2021-07-13\" \"2021-07-14\" #> [296] \"2021-07-15\" \"2021-07-16\" \"2021-07-17\" \"2021-07-18\" \"2021-07-19\" #> [301] \"2021-07-20\" \"2021-07-21\" \"2021-07-22\" \"2021-07-23\" \"2021-07-24\" #> [306] \"2021-07-25\" \"2021-07-26\" \"2021-07-27\" \"2021-07-28\" \"2021-07-29\" #> [311] \"2021-07-30\" \"2021-07-31\" \"2021-08-01\" \"2021-08-02\" \"2021-08-03\" #> [316] \"2021-08-04\" \"2021-08-05\" \"2021-08-06\" \"2021-08-07\" \"2021-08-08\" #> [321] \"2021-08-09\" \"2021-08-10\" \"2021-08-11\" \"2021-08-12\" \"2021-08-13\" #> [326] \"2021-08-14\" \"2021-08-15\" \"2021-08-16\" \"2021-08-17\" \"2021-08-18\" #> [331] \"2021-08-19\" \"2021-08-20\" \"2021-08-21\" \"2021-08-22\" \"2021-08-23\" #> [336] \"2021-08-24\" \"2021-08-25\" \"2021-08-26\" \"2021-08-27\" \"2021-08-28\" #> [341] \"2021-08-29\" \"2021-08-30\" \"2021-08-31\" \"2021-09-01\" \"2021-09-02\" #> [346] \"2021-09-03\" \"2021-09-04\" \"2021-09-05\" \"2021-09-06\" \"2021-09-07\" #> [351] \"2021-09-08\" \"2021-09-09\" \"2021-09-10\" \"2021-09-11\" \"2021-09-12\" #> [356] \"2021-09-13\" \"2021-09-14\" \"2021-09-15\" \"2021-09-16\" \"2021-09-17\" #> [361] \"2021-09-18\" \"2021-09-19\" \"2021-09-20\" \"2021-09-21\" \"2021-09-22\" #> [366] \"2021-09-23\" \"2021-09-24\" \"2021-09-25\" \"2021-09-26\" \"2021-09-27\" #> [371] \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\" \"2021-10-02\" #> [376] \"2021-10-03\" \"2021-10-04\" \"2021-10-05\" \"2021-10-06\" \"2021-10-07\" #> [381] \"2021-10-08\" \"2021-10-09\" \"2021-10-10\" \"2021-10-11\" \"2021-10-12\" #> [386] \"2021-10-13\" \"2021-10-14\" \"2021-10-15\" \"2021-10-16\" \"2021-10-17\" #> [391] \"2021-10-18\" \"2021-10-19\" \"2021-10-20\" \"2021-10-21\" \"2021-10-22\" #> [396] \"2021-10-23\" \"2021-10-24\" \"2021-10-25\" \"2021-10-26\" \"2021-10-27\" #> [401] \"2021-10-28\" \"2021-10-29\" \"2021-10-30\" \"2021-10-31\" \"2021-11-01\" #> [406] \"2021-11-02\" \"2021-11-03\" \"2021-11-04\" \"2021-11-05\" \"2021-11-06\" #> [411] \"2021-11-07\" \"2021-11-08\" \"2021-11-09\" \"2021-11-10\" \"2021-11-11\" #> [416] \"2021-11-12\" \"2021-11-13\" \"2021-11-14\" \"2021-11-15\" \"2021-11-16\" #> [421] \"2021-11-17\" \"2021-11-18\" \"2021-11-19\" \"2021-11-20\" \"2021-11-21\" #> [426] \"2021-11-22\" \"2021-11-23\" \"2021-11-24\" \"2021-11-25\" \"2021-11-26\" #> [431] \"2021-11-27\" \"2021-11-28\" \"2021-11-29\" \"2021-11-30\" \"2021-12-01\" #> [436] \"2021-12-02\" \"2021-12-03\" \"2021-12-04\" \"2021-12-05\" \"2021-12-06\" #> [441] \"2021-12-07\" \"2021-12-08\" \"2021-12-09\" \"2021-12-10\" \"2021-12-11\" #> [446] \"2021-12-12\" \"2021-12-13\" \"2021-12-14\" \"2021-12-15\" \"2021-12-16\" #> [451] \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" \"2021-12-20\" \"2021-12-21\" #> [456] \"2021-12-22\" \"2021-12-23\" \"2021-12-24\" \"2021-12-25\" \"2021-12-26\" #> [461] \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" \"2021-12-30\" \"2021-12-31\" #> [466] \"2022-01-01\" \"2022-01-02\" \"2022-01-03\" \"2022-01-04\" \"2022-01-05\" #> [471] \"2022-01-06\" \"2022-01-07\" \"2022-01-08\" \"2022-01-09\" \"2022-01-10\" #> [476] \"2022-01-11\" \"2022-01-12\" \"2022-01-13\" \"2022-01-14\" \"2022-01-15\" #> [481] \"2022-01-16\" \"2022-01-17\" \"2022-01-18\" \"2022-01-19\" \"2022-01-20\" #> [486] \"2022-01-21\" \"2022-01-22\" \"2022-01-23\" \"2022-01-24\" \"2022-01-25\" #> [491] \"2022-01-26\" \"2022-01-27\" \"2022-01-28\" \"2022-01-29\" \"2022-01-30\" #> [496] \"2022-01-31\" \"2022-02-01\" \"2022-02-02\" \"2022-02-03\" \"2022-02-04\" #> [501] \"2022-02-05\" \"2022-02-06\" \"2022-02-07\" \"2022-02-08\" \"2022-02-09\" #> [506] \"2022-02-10\" \"2022-02-11\" \"2022-02-12\" \"2022-02-13\" \"2022-02-14\" #> [511] \"2022-02-15\" \"2022-02-16\" \"2022-02-17\" \"2022-02-18\" \"2022-02-19\" #> [516] \"2022-02-20\" \"2022-02-21\" \"2022-02-22\" \"2022-02-23\" \"2022-02-24\" #> [521] \"2022-02-25\" \"2022-02-26\" \"2022-02-27\" \"2022-02-28\" \"2022-03-01\" #> [526] \"2022-03-02\" \"2022-03-03\" \"2022-03-04\" \"2022-03-05\" \"2022-03-06\" #> [531] \"2022-03-07\" \"2022-03-08\" \"2022-03-09\" \"2022-03-10\" \"2022-03-11\" #> [536] \"2022-03-12\" \"2022-03-13\" \"2022-03-14\" \"2022-03-15\" \"2022-03-16\" #> [541] \"2022-03-17\" \"2022-03-18\" \"2022-03-19\" \"2022-03-20\" \"2022-03-21\" #> [546] \"2022-03-22\" \"2022-03-23\" \"2022-03-24\" \"2022-03-25\" \"2022-03-26\" #> [551] \"2022-03-27\" \"2022-03-28\" \"2022-03-29\" \"2022-03-30\" \"2022-03-31\" #> [556] \"2022-04-01\" \"2022-04-02\" \"2022-04-03\" \"2022-04-04\" \"2022-04-05\" #> [561] \"2022-04-06\" \"2022-04-07\" \"2022-04-08\" \"2022-04-09\" \"2022-04-10\" #> [566] \"2022-04-11\" \"2022-04-12\" \"2022-04-13\" \"2022-04-14\" \"2022-04-15\" #> [571] \"2022-04-16\" \"2022-04-17\" \"2022-04-18\" \"2022-04-19\" \"2022-04-20\" #> [576] \"2022-04-21\" \"2022-04-22\" \"2022-04-23\" \"2022-04-24\" \"2022-04-25\" #> [581] \"2022-04-26\" \"2022-04-27\" \"2022-04-28\" \"2022-04-29\" \"2022-04-30\" #> [586] \"2022-05-01\" \"2022-05-02\" \"2022-05-03\" \"2022-05-04\" \"2022-05-05\" #> [591] \"2022-05-06\" \"2022-05-07\" \"2022-05-08\" \"2022-05-09\" \"2022-05-10\" #> [596] \"2022-05-11\" \"2022-05-12\" \"2022-05-13\" \"2022-05-14\" \"2022-05-15\" #> [601] \"2022-05-16\" \"2022-05-17\" \"2022-05-18\" \"2022-05-19\" \"2022-05-20\" #> [606] \"2022-05-21\" \"2022-05-22\" \"2022-05-23\" \"2022-05-24\" \"2022-05-25\" #> [611] \"2022-05-26\" \"2022-05-27\" \"2022-05-28\" \"2022-05-29\" \"2022-05-30\" #> [616] \"2022-05-31\" \"2022-06-01\" \"2022-06-02\" \"2022-06-03\" \"2022-06-04\" #> [621] \"2022-06-05\" \"2022-06-06\" \"2022-06-07\" \"2022-06-08\" \"2022-06-09\" #> [626] \"2022-06-10\" \"2022-06-11\" \"2022-06-12\" \"2022-06-13\" \"2022-06-14\" #> [631] \"2022-06-15\" \"2022-06-16\" \"2022-06-17\" \"2022-06-18\" \"2022-06-19\" #> [636] \"2022-06-20\" \"2022-06-21\" \"2022-06-22\" \"2022-06-23\" \"2022-06-24\" #> [641] \"2022-06-25\" \"2022-06-26\" \"2022-06-27\" \"2022-06-28\" \"2022-06-29\" #> [646] \"2022-06-30\" \"2022-07-01\" \"2022-07-02\" \"2022-07-03\" \"2022-07-04\" #> [651] \"2022-07-05\" \"2022-07-06\" \"2022-07-07\" \"2022-07-08\" \"2022-07-09\" #> [656] \"2022-07-10\" \"2022-07-11\" \"2022-07-12\" \"2022-07-13\" \"2022-07-14\" #> [661] \"2022-07-15\" \"2022-07-16\" \"2022-07-17\" \"2022-07-18\" \"2022-07-19\" #> [666] \"2022-07-20\" \"2022-07-21\" \"2022-07-22\" \"2022-07-23\" \"2022-07-24\" #> [671] \"2022-07-25\" \"2022-07-26\" \"2022-07-27\" \"2022-07-28\" \"2022-07-29\" #> [676] \"2022-07-30\" \"2022-07-31\" \"2022-08-01\" \"2022-08-02\" \"2022-08-03\" #> [681] \"2022-08-04\" \"2022-08-05\" \"2022-08-06\" \"2022-08-07\" \"2022-08-08\" #> [686] \"2022-08-09\" \"2022-08-10\" \"2022-08-11\" \"2022-08-12\" \"2022-08-13\" #> [691] \"2022-08-14\" \"2022-08-15\" \"2022-08-16\" \"2022-08-17\" \"2022-08-18\" #> [696] \"2022-08-19\" \"2022-08-20\" \"2022-08-21\" \"2022-08-22\" \"2022-08-23\" #> [701] \"2022-08-24\" \"2022-08-25\" \"2022-08-26\" \"2022-08-27\" \"2022-08-28\" #> [706] \"2022-08-29\" \"2022-08-30\" \"2022-08-31\" \"2022-09-01\" \"2022-09-02\" #> [711] \"2022-09-03\" \"2022-09-04\" \"2022-09-05\" \"2022-09-06\" \"2022-09-07\" #> [716] \"2022-09-08\" \"2022-09-09\" \"2022-09-10\" \"2022-09-11\" \"2022-09-12\" #> [721] \"2022-09-13\" \"2022-09-14\" \"2022-09-15\" \"2022-09-16\" \"2022-09-17\" #> [726] \"2022-09-18\" \"2022-09-19\" \"2022-09-20\" \"2022-09-21\" \"2022-09-22\" #> [731] \"2022-09-23\" \"2022-09-24\" \"2022-09-25\" \"2022-09-26\" \"2022-09-27\" #> [736] \"2022-09-28\" \"2022-09-29\" \"2022-09-30\" \"2022-10-01\" \"2022-10-02\" #> [741] \"2022-10-03\" \"2022-10-04\" \"2022-10-05\" \"2022-10-06\" \"2022-10-07\" #> [746] \"2022-10-08\" \"2022-10-09\" \"2022-10-10\" \"2022-10-11\" \"2022-10-12\" #> [751] \"2022-10-13\" \"2022-10-14\" \"2022-10-15\" \"2022-10-16\" \"2022-10-17\" #> [756] \"2022-10-18\" \"2022-10-19\" \"2022-10-20\" \"2022-10-21\" \"2022-10-22\" #> [761] \"2022-10-23\" \"2022-10-24\" \"2022-10-25\" \"2022-10-26\" \"2022-10-27\" #> [766] \"2022-10-28\" \"2022-10-29\" \"2022-10-30\" \"2022-10-31\" \"2022-11-01\" #> [771] \"2022-11-02\" \"2022-11-03\" \"2022-11-04\" \"2022-11-05\" \"2022-11-06\" #> [776] \"2022-11-07\" \"2022-11-08\" \"2022-11-09\" \"2022-11-10\" \"2022-11-11\" #> [781] \"2022-11-12\" \"2022-11-13\" \"2022-11-14\" \"2022-11-15\" \"2022-11-16\" #> [786] \"2022-11-17\" \"2022-11-18\" \"2022-11-19\" \"2022-11-20\" \"2022-11-21\" #> [791] \"2022-11-22\" \"2022-11-23\" \"2022-11-24\" \"2022-11-25\" \"2022-11-26\" #> [796] \"2022-11-27\" \"2022-11-28\" \"2022-11-29\" \"2022-11-30\" \"2022-12-01\" #> [801] \"2022-12-02\" \"2022-12-03\" \"2022-12-04\" \"2022-12-05\" \"2022-12-06\" #> [806] \"2022-12-07\" \"2022-12-08\" \"2022-12-09\" \"2022-12-10\" \"2022-12-11\" #> [811] \"2022-12-12\" \"2022-12-13\" \"2022-12-14\" \"2022-12-15\" \"2022-12-16\" #> [816] \"2022-12-17\" \"2022-12-18\" \"2022-12-19\" \"2022-12-20\" \"2022-12-21\" #> [821] \"2022-12-22\" \"2022-12-23\" \"2022-12-24\" \"2022-12-25\" \"2022-12-26\" #> [826] \"2022-12-27\" \"2022-12-28\" \"2022-12-29\" \"2022-12-30\" \"2022-12-31\" #>  #> $data$component_pathogens #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #> [4,]   10    7    9   15    5    6   23   54   32    15    23     8    35    39 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]    45    25    18    12    25    47    34    18    11    23    24    33 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]    47    55    46    21     7     8     9    10     3     3     4     1 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]     0     3     1     0     0     0     0     1     2     0     0     1 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]     3    22    25     7     6    14    32    14    10    21    25    18 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     0     0     0     2     4     1     1     3     3     3     2     4 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]    20    25    26    10    38    14     4    13    11     8    14    14 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]     6    14     4     4     7     6     3     4     8     0     1     0 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]    14     7     6    10     6    15    11    14     4     1     0     0 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]     0    18    16    12    12    14     7    10    27    63    57    64 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]     5     5    11    11     7     7     5     5    38    34    52    46 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]    47    17    30    52    65    69     0     0     1    48    60   111 #> [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [4,]    34    21    16    29    32    29     0     0     0    27    21    41 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]    68     15      0     35     50    125     93     67     50     55 #> [2,]     0      0      0      0      0      0      0      0      0      0 #> [3,]     0      0      0      0      0      0      0      0      0      0 #> [4,]    13     14      0     22     18     39     28     21      9     15 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]     40     48     81     75     70     38     46     43     45     67 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]     11     17     10     18     18      4      2     12      4      7 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]     54     53     39     34     29     17     19     51     53     44 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      4     17      2      6      5      4      6      1      4      4 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]     39     22     47     36     26     24     31     18     29      2 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      5      3      5      4      0      1      1      0      1      0 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]     33     25     29     23     20     10      8     22     26     17 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      1      2      1      1      0      2      1      0      0 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]      6      5      6      8     13     16     13     11     10      7 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      1      0      1      0      0      1      0 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]     11     10     14     15     11      4      9      6     13      6 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      1      2      0      3      0      0      1      0      0      0 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]     11     10     15     12      8     20      6      6     12      4 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      1      0      0      0      0      0      2      0      0      0 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]      7      8     11      8      8     13      4      8      8     10 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      1      0      0      0      0      0      0      1      0      1 #>      [,189] [,190] [,191] [,192] [,193] [,194] [,195] [,196] [,197] [,198] #> [1,]     11      9      8      5      3      0      5      7      8      2 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,199] [,200] [,201] [,202] [,203] [,204] [,205] [,206] [,207] [,208] #> [1,]      5      6     10      8      4      5      6      3      0      1 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,209] [,210] [,211] [,212] [,213] [,214] [,215] [,216] [,217] [,218] #> [1,]      5      7      3      2      3      3      1      3      4      2 #> [2,]      0      0      0      0      0      0      0      0      0      1 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      1      0      0      0      0      0      0      0 #>      [,219] [,220] [,221] [,222] [,223] [,224] [,225] [,226] [,227] [,228] #> [1,]      2      5      3      0      5      1      0      1      2      2 #> [2,]      0      0      0      0      0      0      0      0      0      1 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,229] [,230] [,231] [,232] [,233] [,234] [,235] [,236] [,237] [,238] #> [1,]      0      1      2      3      2      2      0      0      4      1 #> [2,]      0      0      0      0      0      0      0      0      0     10 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,239] [,240] [,241] [,242] [,243] [,244] [,245] [,246] [,247] [,248] #> [1,]      2      1      0      0      2      0      2      2      2      1 #> [2,]      0      0      4      2      1      4      3      3      0      1 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,249] [,250] [,251] [,252] [,253] [,254] [,255] [,256] [,257] [,258] #> [1,]      0      1      0      4      0      2      2      0      0      0 #> [2,]     10      2      3      7      6      2     10      6      3      6 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      1      0      0      0      0      0      0 #>      [,259] [,260] [,261] [,262] [,263] [,264] [,265] [,266] [,267] [,268] #> [1,]      0      1      2      1      1      0      2      1      1      0 #> [2,]     13      8      6      6     10      6     20      9      7      9 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,269] [,270] [,271] [,272] [,273] [,274] [,275] [,276] [,277] [,278] #> [1,]      1      0      0      0      2      0      2      0      0      1 #> [2,]     18     16      6     22     21     26     26     22     24     24 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      1      0      1      0      0      0      0 #>      [,279] [,280] [,281] [,282] [,283] [,284] [,285] [,286] [,287] [,288] #> [1,]      0      1      0      1      1      0      1      0      0      0 #> [2,]     37     29     40     30     39     21     23     55     61     83 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,289] [,290] [,291] [,292] [,293] [,294] [,295] [,296] [,297] [,298] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     61     63     55     42     73     80     66     94     60     58 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,299] [,300] [,301] [,302] [,303] [,304] [,305] [,306] [,307] [,308] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     79    111    106    111     94    106     70     55     42     28 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      1      0 #>      [,309] [,310] [,311] [,312] [,313] [,314] [,315] [,316] [,317] [,318] #> [1,]      0      0      0      0      0      0      0      1      0      0 #> [2,]     37     54     70     49     49     66     85     70     94     56 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,319] [,320] [,321] [,322] [,323] [,324] [,325] [,326] [,327] [,328] #> [1,]      0      0      0      0      1      0      0      0      0      0 #> [2,]     40     39     48     64     86     71     64     49     56     70 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,329] [,330] [,331] [,332] [,333] [,334] [,335] [,336] [,337] [,338] #> [1,]      1      0      0      0      0      1      0      0      0      0 #> [2,]     97     86     49     58     74     65     68     92     80     73 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,339] [,340] [,341] [,342] [,343] [,344] [,345] [,346] [,347] [,348] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     66     58     53     48    106     82     83     72     73     58 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,349] [,350] [,351] [,352] [,353] [,354] [,355] [,356] [,357] [,358] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     74     93    107    101     74     66     50     99     86     75 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,359] [,360] [,361] [,362] [,363] [,364] [,365] [,366] [,367] [,368] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     78     69     70     77     76     88     98    103     96    103 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,369] [,370] [,371] [,372] [,373] [,374] [,375] [,376] [,377] [,378] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     93    102    119    113    100    104    111    118    127    112 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,379] [,380] [,381] [,382] [,383] [,384] [,385] [,386] [,387] [,388] #> [1,]      0      0      0      0      0      0      0      0      1      0 #> [2,]    143    122    134    141     87    103    124    161    145    151 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,389] [,390] [,391] [,392] [,393] [,394] [,395] [,396] [,397] [,398] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    178    156    188    155    179    159    126    141    173    161 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,399] [,400] [,401] [,402] [,403] [,404] [,405] [,406] [,407] [,408] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    161    184    147    110     94    149    122    150    148    148 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,409] [,410] [,411] [,412] [,413] [,414] [,415] [,416] [,417] [,418] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    116     94    119    113    124    126    110     95    105     96 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,419] [,420] [,421] [,422] [,423] [,424] [,425] [,426] [,427] [,428] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    131    166    123     93    116    106    119    119    147    150 #> [3,]      0      0      0      0      0      0      0      0      0      0 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,429] [,430] [,431] [,432] [,433] [,434] [,435] [,436] [,437] [,438] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    128     93    111     97    122    146    125    136    117    121 #> [3,]      0      0      0      0      2      0      0      0      1      2 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,439] [,440] [,441] [,442] [,443] [,444] [,445] [,446] [,447] [,448] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    108     95    137    106    123     85     81     84     95    117 #> [3,]      5      6     10     16      7     15     15     26     64     88 #> [4,]      0      0      0      0      0      0      0      0      0      2 #>      [,449] [,450] [,451] [,452] [,453] [,454] [,455] [,456] [,457] [,458] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]    133    111     94     72     70    122    112     87     55      0 #> [3,]    124    111    138    150    164    256    331    283    220      0 #> [4,]      0      0      0      0      0      0      1      0      0      0 #>      [,459] [,460] [,461] [,462] [,463] [,464] [,465] [,466] [,467] [,468] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0     38     37     28     29     15      0     12     15 #> [3,]      0      4    335    510    525    520    322      2    410    573 #> [4,]      0      0      1      0      0      0      0      0      0      0 #>      [,469] [,470] [,471] [,472] [,473] [,474] [,475] [,476] [,477] [,478] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]     22     13     10      6      5     13      7      7      5      2 #> [3,]    594    579    570    495    410    421    436    500    469    334 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,479] [,480] [,481] [,482] [,483] [,484] [,485] [,486] [,487] [,488] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      3      7      3      4      3      2      1      2      1      0 #> [3,]    337    348    341    411    452    329    258    321    327    295 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,489] [,490] [,491] [,492] [,493] [,494] [,495] [,496] [,497] [,498] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      1      2      0      0      2      0      2      1      0      1 #> [3,]    408    450    425    352    303    356    388    475    517    501 #> [4,]      0      0      0      0      0      0      0      1      0      0 #>      [,499] [,500] [,501] [,502] [,503] [,504] [,505] [,506] [,507] [,508] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      1      0      0      0      2      0      1      0 #> [3,]    398    372    319    359    423    400    417    346    281    316 #> [4,]      1      0      0      0      0      0      0      0      0      0 #>      [,509] [,510] [,511] [,512] [,513] [,514] [,515] [,516] [,517] [,518] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      1      0      0      0      0      0      0      0      1 #> [3,]    255    282    329    308    275    201    226    269    265    272 #> [4,]      0      0      2      0      0      0      0      0      0      3 #>      [,519] [,520] [,521] [,522] [,523] [,524] [,525] [,526] [,527] [,528] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    274    253    229    237    280    283    289    254    233    262 #> [4,]      1      1      0      0      0      1      0      0      0      0 #>      [,529] [,530] [,531] [,532] [,533] [,534] [,535] [,536] [,537] [,538] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      2      0      0      0      0      0      0      0      0 #> [3,]    300    282    380    385    430    451    435    420    522    563 #> [4,]      0      0      1      0      3      2      2      1      5      3 #>      [,539] [,540] [,541] [,542] [,543] [,544] [,545] [,546] [,547] [,548] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      1      0 #> [3,]    649    614    463    427    394    507    702    752    718    725 #> [4,]      3      7      3      0      4      7      6      3      5      2 #>      [,549] [,550] [,551] [,552] [,553] [,554] [,555] [,556] [,557] [,558] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    590    662    560    831    860    811    673    489    474    479 #> [4,]      5      9      6      9      6     11      3      4      3      4 #>      [,559] [,560] [,561] [,562] [,563] [,564] [,565] [,566] [,567] [,568] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    639    648    558    458    351    294    399    578    588    585 #> [4,]      6      4      6      2      2      4      1      3      4      3 #>      [,569] [,570] [,571] [,572] [,573] [,574] [,575] [,576] [,577] [,578] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    480    367    239      3    355    413    432    370    314    276 #> [4,]      4      0      1      0      4      6      4      1      9      2 #>      [,579] [,580] [,581] [,582] [,583] [,584] [,585] [,586] [,587] [,588] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    204    252    285    196    183    152    133    101    157    166 #> [4,]      2      0      1      0      1      0      0      2      4      1 #>      [,589] [,590] [,591] [,592] [,593] [,594] [,595] [,596] [,597] [,598] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    173    176    109    109    108    145    158    167    127     99 #> [4,]      0      0      2      2      3      1      4      0      0      7 #>      [,599] [,600] [,601] [,602] [,603] [,604] [,605] [,606] [,607] [,608] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    101     88    139    131    154    150    106     78     83    110 #> [4,]      0      0      1      3      1      0      1      1      1      0 #>      [,609] [,610] [,611] [,612] [,613] [,614] [,615] [,616] [,617] [,618] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    118    113     99     85     81     69    115    123    111     84 #> [4,]      0      0      1      0      1      1      0      0      3      0 #>      [,619] [,620] [,621] [,622] [,623] [,624] [,625] [,626] [,627] [,628] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]      1    116    103    171    206    190    170    192    119    121 #> [4,]      0      0      0      1      1      2      0      0      0      0 #>      [,629] [,630] [,631] [,632] [,633] [,634] [,635] [,636] [,637] [,638] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    225    187    229    162    156    156    162    253    284    271 #> [4,]      0      2      0      0      0      1      0      1      1      0 #>      [,639] [,640] [,641] [,642] [,643] [,644] [,645] [,646] [,647] [,648] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    245    256    208    228    330    322    325    297    270    229 #> [4,]      0      0      1      0      0      1      0      2      0      0 #>      [,649] [,650] [,651] [,652] [,653] [,654] [,655] [,656] [,657] [,658] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    230    283    299    321    297    241    173    155    291    325 #> [4,]      0      0      0      0      0      1      1      0      0      0 #>      [,659] [,660] [,661] [,662] [,663] [,664] [,665] [,666] [,667] [,668] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    283    312    268    226    151    287    334    373    348    336 #> [4,]      2      0      0      1      1      1      0      1      0      0 #>      [,669] [,670] [,671] [,672] [,673] [,674] [,675] [,676] [,677] [,678] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    180    167    427    340    311    262    181    113     92    201 #> [4,]      0      0      4      1      0      0      2      0      0      0 #>      [,679] [,680] [,681] [,682] [,683] [,684] [,685] [,686] [,687] [,688] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    138    101    118     97     49     27    171    112     69     95 #> [4,]      0      0      0      1      0      0      0      0      0      0 #>      [,689] [,690] [,691] [,692] [,693] [,694] [,695] [,696] [,697] [,698] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]     94     58     43    180    103    105     88     92     63     43 #> [4,]      0      0      0      0      0      0      0      0      2      0 #>      [,699] [,700] [,701] [,702] [,703] [,704] [,705] [,706] [,707] [,708] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    162    116    105     64     75     31     23     72    114     42 #> [4,]      0      0      0      0      0      0      0      0      1      1 #>      [,709] [,710] [,711] [,712] [,713] [,714] [,715] [,716] [,717] [,718] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    179     95     59     50    187    125     55     30     38     55 #> [4,]      0      0      0      0      0      0      0      0      0      0 #>      [,719] [,720] [,721] [,722] [,723] [,724] [,725] [,726] [,727] [,728] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]     55    182     95    114    119    106     69     22     57    228 #> [4,]      0      0      1      0      3      1      1      0      0      0 #>      [,729] [,730] [,731] [,732] [,733] [,734] [,735] [,736] [,737] [,738] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    179    179    138     83     92    227    167    180    175    102 #> [4,]      0      0      0      1      1      4      2      0      0      0 #>      [,739] [,740] [,741] [,742] [,743] [,744] [,745] [,746] [,747] [,748] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]     61     95    274    237    262    301    246    126     90    369 #> [4,]      1      2      2      1      0      2      1      0      2      2 #>      [,749] [,750] [,751] [,752] [,753] [,754] [,755] [,756] [,757] [,758] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    257    188    118    259    102    101    398    242    162     65 #> [4,]      1      1      2      3      1      4     12      9      7      2 #>      [,759] [,760] [,761] [,762] [,763] [,764] [,765] [,766] [,767] [,768] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    247    105     56    207     78    254    170    177     70     68 #> [4,]      8      2      0      2      1      5      2      5      2      1 #>      [,769] [,770] [,771] [,772] [,773] [,774] [,775] [,776] [,777] [,778] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    177    124    121    119    126     51     65    135    110     96 #> [4,]      6      5      4      5      2      2      2      6      2      4 #>      [,779] [,780] [,781] [,782] [,783] [,784] [,785] [,786] [,787] [,788] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    103     98     55     42    119     75     64     72     64     54 #> [4,]      3      1      2      2      7      5      5      5      3      0 #>      [,789] [,790] [,791] [,792] [,793] [,794] [,795] [,796] [,797] [,798] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]     54    115    110     85     81     65     69     59    232    109 #> [4,]      6     10      8      8      8      4      5      2     16      3 #>      [,799] [,800] [,801] [,802] [,803] [,804] [,805] [,806] [,807] [,808] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]     77     65    150     70     63    218    216    187    153     92 #> [4,]      4      8      9      9      7     13     14     11      6     11 #>      [,809] [,810] [,811] [,812] [,813] [,814] [,815] [,816] [,817] [,818] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    116    100    322    170     98    125    329    159    124    516 #> [4,]     17      8     32     16     10     13     39     13     12     39 #>      [,819] [,820] [,821] [,822] [,823] [,824] [,825] [,826] [,827] [,828] #> [1,]      0      0      0      0      0      0      0      0      0      0 #> [2,]      0      0      0      0      0      0      0      0      0      0 #> [3,]    401    300    165     73     22      7     21    165    451    396 #> [4,]     36     25     33      5      0      0      3     21     42     41 #>      [,829] [,830] #> [1,]      0      0 #> [2,]      0      0 #> [3,]    232     78 #> [4,]     29      3 #>  #>  #> $model_params #> $model_params$cov_structure #> [1] 1 #>  #> $model_params$noise_structure #> [1] 0 #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.pathogen_structure\" #> [2] \"list\""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/p_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify p_spline method — p_spline","title":"Specify p_spline method — p_spline","text":"Specify p_spline method","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/p_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify p_spline method — p_spline","text":"","code":"p_spline(spline_degree = 3, days_per_knot = 3)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/p_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify p_spline method — p_spline","text":"spline_degree polynomial degree individual spline segments used construct overall curve (must positive whole number) days_per_knot number days knot (must positive whole number)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/p_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify p_spline method — p_spline","text":"list method model parameters class   `EpiStrainDynamics.method`","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/p_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify p_spline method — p_spline","text":"","code":"# Valid usage p_spline(spline_degree = 2L, days_per_knot = 5L) #> $method #> [1] \"p-spline\" #>  #> $model_params #> $model_params$spline_degree #> [1] 2 #>  #> $model_params$days_per_knot #> [1] 5 #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.method\" p_spline(spline_degree = 3, days_per_knot = 7) #> $method #> [1] \"p-spline\" #>  #> $model_params #> $model_params$spline_degree #> [1] 3 #>  #> $model_params$days_per_knot #> [1] 7 #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.method\"  # These will produce validation errors (as intended): # \\donttest{ # Non-positive values try(p_spline(spline_degree = 0, days_per_knot = 5)) #> Error in validate_positive_whole_number(spline_degree, \"spline_degree\") :  #>   Argument spline_degree must be a positive number try(p_spline(spline_degree = 3, days_per_knot = -1)) #> Error in validate_positive_whole_number(days_per_knot, \"days_per_knot\") :  #>   Argument days_per_knot must be a positive number  # Non-whole numbers try(p_spline(spline_degree = 2.5, days_per_knot = 5)) #> Error in validate_positive_whole_number(spline_degree, \"spline_degree\") :  #>   Argument spline_degree must be a whole number try(p_spline(spline_degree = 3, days_per_knot = 4.2)) #> Error in validate_positive_whole_number(days_per_knot, \"days_per_knot\") :  #>   Argument days_per_knot must be a whole number  # Non-numeric values try(p_spline(spline_degree = \"invalid\", days_per_knot = 5)) #> Error in validate_positive_whole_number(spline_degree, \"spline_degree\") :  #>   Argument spline_degree must be numeric # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for plotting metrics calculation outputs — plot","title":"Generic Method for plotting metrics calculation outputs — plot","text":"S3 generic plotting","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for plotting metrics calculation outputs — plot","text":"","code":"plot(df, ...)  # S3 method for class 'incidence' plot(df)  # S3 method for class 'growth_rate' plot(df)  # S3 method for class 'Rt' plot(df)  # S3 method for class 'proportion' plot(df)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for plotting metrics calculation outputs — plot","text":"df Metrics calculation output class `EpiStrainDynamics.metric` either `incidence()`, `growth_rate()`, `Rt()`, `proportion()`. ... Additional arguments passed plot","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for plotting metrics calculation outputs — plot","text":"ggplot2 plot output","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for plotting metrics calculation outputs — plot","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = random_walk(),     pathogen_structure = single(       case_timeseries = sarscov2$cases,       time = sarscov2$date))    fit <- fit_model(mod)   gr <- growth_rate(mod)   plot(gr) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/predict_B_true.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict B-spline Basis Matrix — predict_B_true","title":"Predict B-spline Basis Matrix — predict_B_true","text":"Creates B-spline basis matrix transforming spline coefficients time series","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/predict_B_true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict B-spline Basis Matrix — predict_B_true","text":"","code":"predict_B_true(time_seq, days_per_knot, spline_degree)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/predict_B_true.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict B-spline Basis Matrix — predict_B_true","text":"time_seq Numeric vector time points days_per_knot Integer number days knots spline_degree Integer degree B-splines","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/predict_B_true.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict B-spline Basis Matrix — predict_B_true","text":"Matrix B_true transforming spline coefficients","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for proportion Analysis — proportion","title":"Generic Method for proportion Analysis — proportion","text":"S3 generic computing proportions fitted models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Method for proportion Analysis — proportion","text":"","code":"proportion(   fitted_model,   numerator_combination = NULL,   denominator_combination = NULL,   ... )  # S3 method for class 'ps' proportion(   fitted_model,   numerator_combination = NULL,   denominator_combination = NULL,   ... )  # S3 method for class 'rw' proportion(   fitted_model,   numerator_combination = NULL,   denominator_combination = NULL,   ... )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for proportion Analysis — proportion","text":"fitted_model Fitted model object class `EpiStrainDynamics.fit` `multiple` `subtyped` pathogen structure. numerator_combination Named pathogens subtypes included proportion numerator. denominator_combination Named pathogens subtypes included proportion denominator, ''. ... Additional arguments passed metrics calculation","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for proportion Analysis — proportion","text":"named list class `EpiStrainDynamics.metric` containing dataframe  calculated metric outcome (`$measure`), fit object (`$fit`),  constructed model object (`$constructed_model`). `measure` data frame  contains median epidemiological quantity (`y`), 50  interval quantity (`lb_50` & `ub_50`), 95  (`lb_95` & `ub_95`), proportion greater defined threshold value  (`prop`), pathogen name (`pathogen`), time label (`time`).","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Method for proportion Analysis — proportion","text":"","code":"if (FALSE) { # \\dontrun{   mod <- construct_model(     method = p_spline(),     pathogen_structure = multiple(       case_timeseries = sarscov2$cases,       time = sarscov2$date,       component_pathogen_timeseries = list(         alpha = sarscov2$alpha,         delta = sarscov2$delta,         omicron = sarscov2$omicron,         other = sarscov2$other))   )    fit <- fit_model(mod)   prop <- proportion(fit)    # or a unique combination, compared to all pathogens   prop2 <- proportion(fit,     numerator_combination = c('alpha', 'delta', 'omicron'),     denominator_combination = 'all'   )    # or a user-specified combination in both numerator and denominator   prop3 <- proportion(fit,     numerator_combination = 'alpha',     denominator_combination = c('alpha', 'delta', 'omicron')   ) } # }"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify random walk method — random_walk","title":"Specify random walk method — random_walk","text":"Specify random walk method","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify random walk method — random_walk","text":"","code":"random_walk()"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify random walk method — random_walk","text":"list method identified random walk class   `EpiStrainDynamics.method`","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/random_walk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify random walk method — random_walk","text":"","code":"random_walk() #> $method #> [1] \"random-walk\" #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.method\""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/sarscov2.html","id":null,"dir":"Reference","previous_headings":"","what":"United Kingdom Health Security Agency SARS-CoV-2 case data — sarscov2","title":"United Kingdom Health Security Agency SARS-CoV-2 case data — sarscov2","text":"Daily SARS-CoV-2 case numbers specimen date United Kingdom 2020 - 2022 retrieved UK Health Security Agency's data dashboard. downloaded data describing daily number variants detected collection date. data classified sequences based ‘major lineage calls’. considered 11 groupings variants based major lineage calls , consisting lineages designation consistent major lineage calls.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/sarscov2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"United Kingdom Health Security Agency SARS-CoV-2 case data — sarscov2","text":"","code":"sarscov2"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/sarscov2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"United Kingdom Health Security Agency SARS-CoV-2 case data — sarscov2","text":"## `sarscov2` data frame 830 rows 15 columns: date Date, 23 September 2020 31 December 2022 cases Numeric, daily number cases B.1.177 Integer, daily number cases B.1.177 B.1.1.7 Integer, daily number cases B.1.1.7 (Alpha variant) B.1.617.2 Integer, daily number cases B.1.617.2 (Delta variant) BA.1 Integer, daily number cases BA.1 (Omicron BA.1 variant) BA.2 Integer, daily number cases BA.2 (Omicron BA.2 variant) BA.2.75 Integer, daily number cases BA.4 (Omicron BA.4 variant) BA.4 Integer, daily number cases BA.5 (Omicron BA.5 variant) BA.5 Integer, daily number cases BA.2.75 (Omicron BA.2.75 variant) BQ.1 Integer, daily number cases BQ.1 (Omicron BQ.1 variant) XBB Integer, daily number cases XBB (recombinant omicron      sub-variants) Integer, daily number cases lineages      designation consistent major lineage calls total  t","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/sarscov2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"United Kingdom Health Security Agency SARS-CoV-2 case data — sarscov2","text":"<https://ukhsa-dashboard.data.gov.uk/covid-19-archive-data-download; https://datadryad.org/dataset/doi:10.5061/dryad.hx3ffbgm2>","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/single.html","id":null,"dir":"Reference","previous_headings":"","what":"Single pathogen structure — single","title":"Single pathogen structure — single","text":"Single pathogen structure","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single pathogen structure — single","text":"","code":"single(case_timeseries, time, pathogen_name = \"default\")"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single pathogen structure — single","text":"case_timeseries vector total case data time vector labelled time data pathogen_name optionally provided name pathogen. value preserved exactly provided (case-sensitive). Default name `default`.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single pathogen structure — single","text":"formatted list pathogen structure data class   `EpiStrainDynamics.pathogen_structure`.","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single pathogen structure — single","text":"","code":"single(   case_timeseries = sarscov2$cases,   time = sarscov2$date,   pathogen_name = 'SARS-COV-2' # preserved as provided ) #> $pathogen_structure #> [1] \"single\" #>  #> $pathogen_names #> [1] \"SARS-COV-2\" #>  #> $data #> $data$case_timeseries #>   [1]   7096   7682   7318   6810   7023   9983  10366  12717  13357  13854 #>  [11]  11667  11953  16753  17250  18573  18425  15893  12648  12202  19671 #>  [21]  19116  19920  18606  17915  14882  14311  25872  25613  25714  23475 #>  [31]  21694  16434  15895  26807  24351  23901  23614  22890  16673  15970 #>  [41]  31925  25943  24027  24063  23659  18766  20244  31510  27789  27757 #>  [51]  24826  24388  18223  16233  26952  23488  21076  18041  17100  12533 #>  [61]  11895  19024  16679  16814  14761  14554  11086  10852  18198  16684 #>  [71]  16676  15860  15834  12893  13731  21584  21065  21909  22916  24390 #>  [81]  19588  22266  35197  34378  35427  34437  36419  25589  33066  48192 #>  [91]  46475  42936  32392  14419  41110  48520  46408  83090  72161  53947 #> [101]  32482  61654  56335  77972  66638  58784  53187  48105  40035  37174 #> [111]  58592  50647  46509  43472  41452  31250  29592  45957  40525  35986 #> [121]  32502  30330  22344  17554  30737  27730  26303  24773  22434  17167 #> [131]  15783  22972  20265  19914  18493  16307  12320  11664  16194  14225 #> [141]  13899  13139  12573   9035   8995  14735  12939  11942  11793  10728 #> [151]   8313   8098  11657   9763   8847   8024   6782   4949   4873   7192 #> [161]   6918   6172   5937   5467   4628   4410   6890   6488   6250   5933 #> [171]   5717   4381   4425   6703   5863   5978   5632   5180   4247   5390 #> [181]   6459   5484   6224   5616   4567   3731   5030   4196   3779   3966 #> [191]   3674   2747   2508   2412   2744   3313   3253   3147   2953   2380 #> [201]   2376   2881   2495   2512   2345   2347   1722   2584   2738   2541 #> [211]   2708   2409   2020   1564   2119   2626   2178   2499   2230   1825 #> [221]   1433   1521   2084   2553   2569   2326   1982   1609   2307   2809 #> [231]   2329   2335   2182   1938   1628   1923   2858   2812   2813   2517 #> [241]   2367   2000   2326   3369   3427   3922   3747   3589   3000   3164 #> [251]   3897   5431   6168   6258   5861   4731   5534   7946   7896   8210 #> [261]   8043   7619   6284   7135  10362  10800  11052  11106  10320   8447 #> [271]  10087  16308  17402  18351  18714  18169  16301  18502  28418  28199 #> [281]  28923  28794  26339  24010  25170  34919  36060  38597  34020  32804 #> [291]  28379  30503  44511  47707  54910  62000  55264  38476  36182  47924 #> [301]  39876  35548  31278  27817  22852  22187  29981  29582  30237  28432 #> [311]  24749  20570  20985  29840  30473  32338  31660  28035  22540  22887 #> [321]  32162  31518  33350  31726  28974  25057  25327  36907  37920  38739 #> [331]  36501  32231  28536  28743  39715  37682  38777  37613  33745  27601 #> [341]  26136  34774  45212  43532  42328  38633  31810  31803  44929  38619 #> [351]  35849  33974  29187  23533  24060  34658  31435  30414  29710  29479 #> [361]  26645  31084  40768  38848  36756  35851  32108  28567  32083  41589 #> [371]  36548  34837  32604  29058  26316  32059  43733  39279  39264  38465 #> [381]  35612  32306  36418  50304  48321  47775  46419  43560  37878  43752 #> [391]  57743  52529  51661  45194  40664  35103  35764  47466  42124  43045 #> [401]  41391  40251  33569  34814  45109  38019  35986  33662  30318  27436 #> [411]  30586  44126  42246  42942  40999  37763  32885  35532  50948  46430 #> [421]  45895  44062  39606  35335  37250  50733  48197  46772  43425  39330 #> [431]  33303  39706  56289  55695  54820  50319  45667  38784  41051  59694 #> [441]  56258  58827  56995  52492  48594  53158  87169 102788 112703 106055 #> [451]  95897  88883  89133 133966 150293 161560 160633 137268  70363 116287 #> [461] 195011 212469 272798 236576 188567 118275 181068 229901 275647 222174 #> [471] 172980 120287  93615  95790 132959 115245 103219  96412  86325  77950 #> [481]  98097 131514 118857 111760 100324  91730  81733 102365 127364 113202 #> [491] 108668  96201  84026  73512  87702 105051  93949  88418  76644  63264 #> [501]  52305  60552  76483  69661  64339  52293  44559  37529  41755  54745 #> [511]  52502  51572  44716  33241  34647  37720  45132  39188  36477  30631 #> [521]  27837  25089  31360  44649  44795  46179  43761  41408  38759  49026 #> [531]  68520  70112  73531  70510  67030  62078  75739  99834  93708  91751 #> [541]  82853  75285  67417  81054 109286  99095  94185  82905  72430  61456 #> [551]  68336  92857  80126  73643  54791  47462  37592  42179  53727  49101 #> [561]  44750  38709  32988  27885  30952  37371  33771  31685  26639  21617 #> [571]  19925  20144  25223  25772  21457  18464  15703  13210  14714  17109 #> [581]  14560  13055  11608  10012   8354   9034  11907  13318  11672  10221 #> [591]   8954   7517   9062  10702   9748   8725   7642   6942   6120   7973 #> [601]   9417   8286   7638   6820   5821   5019   5997   7313   6679   6293 #> [611]   5753   5409   4988   5680   7115   7093   7011   6209   6635   7492 #> [621]   9815  11747  11411  11784  11319  10784  10077  12693  15272  15141 #> [631]  14837  14225  13919  13623  16997  19942  20896  20873  19590  18350 #> [641]  16800  20778  25104  25041  24601  24240  23650  21961  27780  33704 #> [651]  31415  29698  26454  24611  21246  25096  29826  26946  23856  21100 #> [661]  18359  15017  17236  18718  16670  16169  14158  12378   9934  11275 #> [671]  13299  11725  10544   9329   8508   7325   8426   9835   9170   8353 #> [681]   7296   6548   5420   6547   8068   7309   6748   6193   5339   4495 #> [691]   5363   6424   5559   5032   4564   4012   3502   4085   5224   4778 #> [701]   4554   3796   3451   3112   3439   4662   5226   4616   4350   3808 #> [711]   3417   4288   5125   4578   4235   3747   3553   3268   4347   5308 #> [721]   5148   4973   4634   4134   3521   4339   6166   7828   7553   6815 #> [731]   6485   5719   7240   8618   8255   8414   7895   7615   7065   9204 #> [741]  11692  10965  10231   9389   8950   7053   8558  10497   9461   8769 #> [751]   8134   7970   6442   7780  10005   8235   7598   6576   6297   4968 #> [761]   5523   6807   5665   5449   4855   4401   3583   4271   5129   4549 #> [771]   4014   3678   3107   2665   3267   4321   3829   3576   3205   2893 #> [781]   2433   2912   3923   3534   3260   3037   2773   2431   2890   3938 #> [791]   3805   3616   3329   2902   2551   3448   4639   4386   3980   3505 #> [801]   3596   2748   3786   5325   5241   5195   4537   4216   3570   4631 #> [811]   6986   7111   6533   6094   6084   4743   5772   9073   8631   7802 #> [821]   6877   5741   4132   3694   4950   6605   8419   7718   6126   4287 #>  #> $data$time #>   [1] \"2020-09-23\" \"2020-09-24\" \"2020-09-25\" \"2020-09-26\" \"2020-09-27\" #>   [6] \"2020-09-28\" \"2020-09-29\" \"2020-09-30\" \"2020-10-01\" \"2020-10-02\" #>  [11] \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-06\" \"2020-10-07\" #>  [16] \"2020-10-08\" \"2020-10-09\" \"2020-10-10\" \"2020-10-11\" \"2020-10-12\" #>  [21] \"2020-10-13\" \"2020-10-14\" \"2020-10-15\" \"2020-10-16\" \"2020-10-17\" #>  [26] \"2020-10-18\" \"2020-10-19\" \"2020-10-20\" \"2020-10-21\" \"2020-10-22\" #>  [31] \"2020-10-23\" \"2020-10-24\" \"2020-10-25\" \"2020-10-26\" \"2020-10-27\" #>  [36] \"2020-10-28\" \"2020-10-29\" \"2020-10-30\" \"2020-10-31\" \"2020-11-01\" #>  [41] \"2020-11-02\" \"2020-11-03\" \"2020-11-04\" \"2020-11-05\" \"2020-11-06\" #>  [46] \"2020-11-07\" \"2020-11-08\" \"2020-11-09\" \"2020-11-10\" \"2020-11-11\" #>  [51] \"2020-11-12\" \"2020-11-13\" \"2020-11-14\" \"2020-11-15\" \"2020-11-16\" #>  [56] \"2020-11-17\" \"2020-11-18\" \"2020-11-19\" \"2020-11-20\" \"2020-11-21\" #>  [61] \"2020-11-22\" \"2020-11-23\" \"2020-11-24\" \"2020-11-25\" \"2020-11-26\" #>  [66] \"2020-11-27\" \"2020-11-28\" \"2020-11-29\" \"2020-11-30\" \"2020-12-01\" #>  [71] \"2020-12-02\" \"2020-12-03\" \"2020-12-04\" \"2020-12-05\" \"2020-12-06\" #>  [76] \"2020-12-07\" \"2020-12-08\" \"2020-12-09\" \"2020-12-10\" \"2020-12-11\" #>  [81] \"2020-12-12\" \"2020-12-13\" \"2020-12-14\" \"2020-12-15\" \"2020-12-16\" #>  [86] \"2020-12-17\" \"2020-12-18\" \"2020-12-19\" \"2020-12-20\" \"2020-12-21\" #>  [91] \"2020-12-22\" \"2020-12-23\" \"2020-12-24\" \"2020-12-25\" \"2020-12-26\" #>  [96] \"2020-12-27\" \"2020-12-28\" \"2020-12-29\" \"2020-12-30\" \"2020-12-31\" #> [101] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\" #> [106] \"2021-01-06\" \"2021-01-07\" \"2021-01-08\" \"2021-01-09\" \"2021-01-10\" #> [111] \"2021-01-11\" \"2021-01-12\" \"2021-01-13\" \"2021-01-14\" \"2021-01-15\" #> [116] \"2021-01-16\" \"2021-01-17\" \"2021-01-18\" \"2021-01-19\" \"2021-01-20\" #> [121] \"2021-01-21\" \"2021-01-22\" \"2021-01-23\" \"2021-01-24\" \"2021-01-25\" #> [126] \"2021-01-26\" \"2021-01-27\" \"2021-01-28\" \"2021-01-29\" \"2021-01-30\" #> [131] \"2021-01-31\" \"2021-02-01\" \"2021-02-02\" \"2021-02-03\" \"2021-02-04\" #> [136] \"2021-02-05\" \"2021-02-06\" \"2021-02-07\" \"2021-02-08\" \"2021-02-09\" #> [141] \"2021-02-10\" \"2021-02-11\" \"2021-02-12\" \"2021-02-13\" \"2021-02-14\" #> [146] \"2021-02-15\" \"2021-02-16\" \"2021-02-17\" \"2021-02-18\" \"2021-02-19\" #> [151] \"2021-02-20\" \"2021-02-21\" \"2021-02-22\" \"2021-02-23\" \"2021-02-24\" #> [156] \"2021-02-25\" \"2021-02-26\" \"2021-02-27\" \"2021-02-28\" \"2021-03-01\" #> [161] \"2021-03-02\" \"2021-03-03\" \"2021-03-04\" \"2021-03-05\" \"2021-03-06\" #> [166] \"2021-03-07\" \"2021-03-08\" \"2021-03-09\" \"2021-03-10\" \"2021-03-11\" #> [171] \"2021-03-12\" \"2021-03-13\" \"2021-03-14\" \"2021-03-15\" \"2021-03-16\" #> [176] \"2021-03-17\" \"2021-03-18\" \"2021-03-19\" \"2021-03-20\" \"2021-03-21\" #> [181] \"2021-03-22\" \"2021-03-23\" \"2021-03-24\" \"2021-03-25\" \"2021-03-26\" #> [186] \"2021-03-27\" \"2021-03-28\" \"2021-03-29\" \"2021-03-30\" \"2021-03-31\" #> [191] \"2021-04-01\" \"2021-04-02\" \"2021-04-03\" \"2021-04-04\" \"2021-04-05\" #> [196] \"2021-04-06\" \"2021-04-07\" \"2021-04-08\" \"2021-04-09\" \"2021-04-10\" #> [201] \"2021-04-11\" \"2021-04-12\" \"2021-04-13\" \"2021-04-14\" \"2021-04-15\" #> [206] \"2021-04-16\" \"2021-04-17\" \"2021-04-18\" \"2021-04-19\" \"2021-04-20\" #> [211] \"2021-04-21\" \"2021-04-22\" \"2021-04-23\" \"2021-04-24\" \"2021-04-25\" #> [216] \"2021-04-26\" \"2021-04-27\" \"2021-04-28\" \"2021-04-29\" \"2021-04-30\" #> [221] \"2021-05-01\" \"2021-05-02\" \"2021-05-03\" \"2021-05-04\" \"2021-05-05\" #> [226] \"2021-05-06\" \"2021-05-07\" \"2021-05-08\" \"2021-05-09\" \"2021-05-10\" #> [231] \"2021-05-11\" \"2021-05-12\" \"2021-05-13\" \"2021-05-14\" \"2021-05-15\" #> [236] \"2021-05-16\" \"2021-05-17\" \"2021-05-18\" \"2021-05-19\" \"2021-05-20\" #> [241] \"2021-05-21\" \"2021-05-22\" \"2021-05-23\" \"2021-05-24\" \"2021-05-25\" #> [246] \"2021-05-26\" \"2021-05-27\" \"2021-05-28\" \"2021-05-29\" \"2021-05-30\" #> [251] \"2021-05-31\" \"2021-06-01\" \"2021-06-02\" \"2021-06-03\" \"2021-06-04\" #> [256] \"2021-06-05\" \"2021-06-06\" \"2021-06-07\" \"2021-06-08\" \"2021-06-09\" #> [261] \"2021-06-10\" \"2021-06-11\" \"2021-06-12\" \"2021-06-13\" \"2021-06-14\" #> [266] \"2021-06-15\" \"2021-06-16\" \"2021-06-17\" \"2021-06-18\" \"2021-06-19\" #> [271] \"2021-06-20\" \"2021-06-21\" \"2021-06-22\" \"2021-06-23\" \"2021-06-24\" #> [276] \"2021-06-25\" \"2021-06-26\" \"2021-06-27\" \"2021-06-28\" \"2021-06-29\" #> [281] \"2021-06-30\" \"2021-07-01\" \"2021-07-02\" \"2021-07-03\" \"2021-07-04\" #> [286] \"2021-07-05\" \"2021-07-06\" \"2021-07-07\" \"2021-07-08\" \"2021-07-09\" #> [291] \"2021-07-10\" \"2021-07-11\" \"2021-07-12\" \"2021-07-13\" \"2021-07-14\" #> [296] \"2021-07-15\" \"2021-07-16\" \"2021-07-17\" \"2021-07-18\" \"2021-07-19\" #> [301] \"2021-07-20\" \"2021-07-21\" \"2021-07-22\" \"2021-07-23\" \"2021-07-24\" #> [306] \"2021-07-25\" \"2021-07-26\" \"2021-07-27\" \"2021-07-28\" \"2021-07-29\" #> [311] \"2021-07-30\" \"2021-07-31\" \"2021-08-01\" \"2021-08-02\" \"2021-08-03\" #> [316] \"2021-08-04\" \"2021-08-05\" \"2021-08-06\" \"2021-08-07\" \"2021-08-08\" #> [321] \"2021-08-09\" \"2021-08-10\" \"2021-08-11\" \"2021-08-12\" \"2021-08-13\" #> [326] \"2021-08-14\" \"2021-08-15\" \"2021-08-16\" \"2021-08-17\" \"2021-08-18\" #> [331] \"2021-08-19\" \"2021-08-20\" \"2021-08-21\" \"2021-08-22\" \"2021-08-23\" #> [336] \"2021-08-24\" \"2021-08-25\" \"2021-08-26\" \"2021-08-27\" \"2021-08-28\" #> [341] \"2021-08-29\" \"2021-08-30\" \"2021-08-31\" \"2021-09-01\" \"2021-09-02\" #> [346] \"2021-09-03\" \"2021-09-04\" \"2021-09-05\" \"2021-09-06\" \"2021-09-07\" #> [351] \"2021-09-08\" \"2021-09-09\" \"2021-09-10\" \"2021-09-11\" \"2021-09-12\" #> [356] \"2021-09-13\" \"2021-09-14\" \"2021-09-15\" \"2021-09-16\" \"2021-09-17\" #> [361] \"2021-09-18\" \"2021-09-19\" \"2021-09-20\" \"2021-09-21\" \"2021-09-22\" #> [366] \"2021-09-23\" \"2021-09-24\" \"2021-09-25\" \"2021-09-26\" \"2021-09-27\" #> [371] \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\" \"2021-10-02\" #> [376] \"2021-10-03\" \"2021-10-04\" \"2021-10-05\" \"2021-10-06\" \"2021-10-07\" #> [381] \"2021-10-08\" \"2021-10-09\" \"2021-10-10\" \"2021-10-11\" \"2021-10-12\" #> [386] \"2021-10-13\" \"2021-10-14\" \"2021-10-15\" \"2021-10-16\" \"2021-10-17\" #> [391] \"2021-10-18\" \"2021-10-19\" \"2021-10-20\" \"2021-10-21\" \"2021-10-22\" #> [396] \"2021-10-23\" \"2021-10-24\" \"2021-10-25\" \"2021-10-26\" \"2021-10-27\" #> [401] \"2021-10-28\" \"2021-10-29\" \"2021-10-30\" \"2021-10-31\" \"2021-11-01\" #> [406] \"2021-11-02\" \"2021-11-03\" \"2021-11-04\" \"2021-11-05\" \"2021-11-06\" #> [411] \"2021-11-07\" \"2021-11-08\" \"2021-11-09\" \"2021-11-10\" \"2021-11-11\" #> [416] \"2021-11-12\" \"2021-11-13\" \"2021-11-14\" \"2021-11-15\" \"2021-11-16\" #> [421] \"2021-11-17\" \"2021-11-18\" \"2021-11-19\" \"2021-11-20\" \"2021-11-21\" #> [426] \"2021-11-22\" \"2021-11-23\" \"2021-11-24\" \"2021-11-25\" \"2021-11-26\" #> [431] \"2021-11-27\" \"2021-11-28\" \"2021-11-29\" \"2021-11-30\" \"2021-12-01\" #> [436] \"2021-12-02\" \"2021-12-03\" \"2021-12-04\" \"2021-12-05\" \"2021-12-06\" #> [441] \"2021-12-07\" \"2021-12-08\" \"2021-12-09\" \"2021-12-10\" \"2021-12-11\" #> [446] \"2021-12-12\" \"2021-12-13\" \"2021-12-14\" \"2021-12-15\" \"2021-12-16\" #> [451] \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" \"2021-12-20\" \"2021-12-21\" #> [456] \"2021-12-22\" \"2021-12-23\" \"2021-12-24\" \"2021-12-25\" \"2021-12-26\" #> [461] \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" \"2021-12-30\" \"2021-12-31\" #> [466] \"2022-01-01\" \"2022-01-02\" \"2022-01-03\" \"2022-01-04\" \"2022-01-05\" #> [471] \"2022-01-06\" \"2022-01-07\" \"2022-01-08\" \"2022-01-09\" \"2022-01-10\" #> [476] \"2022-01-11\" \"2022-01-12\" \"2022-01-13\" \"2022-01-14\" \"2022-01-15\" #> [481] \"2022-01-16\" \"2022-01-17\" \"2022-01-18\" \"2022-01-19\" \"2022-01-20\" #> [486] \"2022-01-21\" \"2022-01-22\" \"2022-01-23\" \"2022-01-24\" \"2022-01-25\" #> [491] \"2022-01-26\" \"2022-01-27\" \"2022-01-28\" \"2022-01-29\" \"2022-01-30\" #> [496] \"2022-01-31\" \"2022-02-01\" \"2022-02-02\" \"2022-02-03\" \"2022-02-04\" #> [501] \"2022-02-05\" \"2022-02-06\" \"2022-02-07\" \"2022-02-08\" \"2022-02-09\" #> [506] \"2022-02-10\" \"2022-02-11\" \"2022-02-12\" \"2022-02-13\" \"2022-02-14\" #> [511] \"2022-02-15\" \"2022-02-16\" \"2022-02-17\" \"2022-02-18\" \"2022-02-19\" #> [516] \"2022-02-20\" \"2022-02-21\" \"2022-02-22\" \"2022-02-23\" \"2022-02-24\" #> [521] \"2022-02-25\" \"2022-02-26\" \"2022-02-27\" \"2022-02-28\" \"2022-03-01\" #> [526] \"2022-03-02\" \"2022-03-03\" \"2022-03-04\" \"2022-03-05\" \"2022-03-06\" #> [531] \"2022-03-07\" \"2022-03-08\" \"2022-03-09\" \"2022-03-10\" \"2022-03-11\" #> [536] \"2022-03-12\" \"2022-03-13\" \"2022-03-14\" \"2022-03-15\" \"2022-03-16\" #> [541] \"2022-03-17\" \"2022-03-18\" \"2022-03-19\" \"2022-03-20\" \"2022-03-21\" #> [546] \"2022-03-22\" \"2022-03-23\" \"2022-03-24\" \"2022-03-25\" \"2022-03-26\" #> [551] \"2022-03-27\" \"2022-03-28\" \"2022-03-29\" \"2022-03-30\" \"2022-03-31\" #> [556] \"2022-04-01\" \"2022-04-02\" \"2022-04-03\" \"2022-04-04\" \"2022-04-05\" #> [561] \"2022-04-06\" \"2022-04-07\" \"2022-04-08\" \"2022-04-09\" \"2022-04-10\" #> [566] \"2022-04-11\" \"2022-04-12\" \"2022-04-13\" \"2022-04-14\" \"2022-04-15\" #> [571] \"2022-04-16\" \"2022-04-17\" \"2022-04-18\" \"2022-04-19\" \"2022-04-20\" #> [576] \"2022-04-21\" \"2022-04-22\" \"2022-04-23\" \"2022-04-24\" \"2022-04-25\" #> [581] \"2022-04-26\" \"2022-04-27\" \"2022-04-28\" \"2022-04-29\" \"2022-04-30\" #> [586] \"2022-05-01\" \"2022-05-02\" \"2022-05-03\" \"2022-05-04\" \"2022-05-05\" #> [591] \"2022-05-06\" \"2022-05-07\" \"2022-05-08\" \"2022-05-09\" \"2022-05-10\" #> [596] \"2022-05-11\" \"2022-05-12\" \"2022-05-13\" \"2022-05-14\" \"2022-05-15\" #> [601] \"2022-05-16\" \"2022-05-17\" \"2022-05-18\" \"2022-05-19\" \"2022-05-20\" #> [606] \"2022-05-21\" \"2022-05-22\" \"2022-05-23\" \"2022-05-24\" \"2022-05-25\" #> [611] \"2022-05-26\" \"2022-05-27\" \"2022-05-28\" \"2022-05-29\" \"2022-05-30\" #> [616] \"2022-05-31\" \"2022-06-01\" \"2022-06-02\" \"2022-06-03\" \"2022-06-04\" #> [621] \"2022-06-05\" \"2022-06-06\" \"2022-06-07\" \"2022-06-08\" \"2022-06-09\" #> [626] \"2022-06-10\" \"2022-06-11\" \"2022-06-12\" \"2022-06-13\" \"2022-06-14\" #> [631] \"2022-06-15\" \"2022-06-16\" \"2022-06-17\" \"2022-06-18\" \"2022-06-19\" #> [636] \"2022-06-20\" \"2022-06-21\" \"2022-06-22\" \"2022-06-23\" \"2022-06-24\" #> [641] \"2022-06-25\" \"2022-06-26\" \"2022-06-27\" \"2022-06-28\" \"2022-06-29\" #> [646] \"2022-06-30\" \"2022-07-01\" \"2022-07-02\" \"2022-07-03\" \"2022-07-04\" #> [651] \"2022-07-05\" \"2022-07-06\" \"2022-07-07\" \"2022-07-08\" \"2022-07-09\" #> [656] \"2022-07-10\" \"2022-07-11\" \"2022-07-12\" \"2022-07-13\" \"2022-07-14\" #> [661] \"2022-07-15\" \"2022-07-16\" \"2022-07-17\" \"2022-07-18\" \"2022-07-19\" #> [666] \"2022-07-20\" \"2022-07-21\" \"2022-07-22\" \"2022-07-23\" \"2022-07-24\" #> [671] \"2022-07-25\" \"2022-07-26\" \"2022-07-27\" \"2022-07-28\" \"2022-07-29\" #> [676] \"2022-07-30\" \"2022-07-31\" \"2022-08-01\" \"2022-08-02\" \"2022-08-03\" #> [681] \"2022-08-04\" \"2022-08-05\" \"2022-08-06\" \"2022-08-07\" \"2022-08-08\" #> [686] \"2022-08-09\" \"2022-08-10\" \"2022-08-11\" \"2022-08-12\" \"2022-08-13\" #> [691] \"2022-08-14\" \"2022-08-15\" \"2022-08-16\" \"2022-08-17\" \"2022-08-18\" #> [696] \"2022-08-19\" \"2022-08-20\" \"2022-08-21\" \"2022-08-22\" \"2022-08-23\" #> [701] \"2022-08-24\" \"2022-08-25\" \"2022-08-26\" \"2022-08-27\" \"2022-08-28\" #> [706] \"2022-08-29\" \"2022-08-30\" \"2022-08-31\" \"2022-09-01\" \"2022-09-02\" #> [711] \"2022-09-03\" \"2022-09-04\" \"2022-09-05\" \"2022-09-06\" \"2022-09-07\" #> [716] \"2022-09-08\" \"2022-09-09\" \"2022-09-10\" \"2022-09-11\" \"2022-09-12\" #> [721] \"2022-09-13\" \"2022-09-14\" \"2022-09-15\" \"2022-09-16\" \"2022-09-17\" #> [726] \"2022-09-18\" \"2022-09-19\" \"2022-09-20\" \"2022-09-21\" \"2022-09-22\" #> [731] \"2022-09-23\" \"2022-09-24\" \"2022-09-25\" \"2022-09-26\" \"2022-09-27\" #> [736] \"2022-09-28\" \"2022-09-29\" \"2022-09-30\" \"2022-10-01\" \"2022-10-02\" #> [741] \"2022-10-03\" \"2022-10-04\" \"2022-10-05\" \"2022-10-06\" \"2022-10-07\" #> [746] \"2022-10-08\" \"2022-10-09\" \"2022-10-10\" \"2022-10-11\" \"2022-10-12\" #> [751] \"2022-10-13\" \"2022-10-14\" \"2022-10-15\" \"2022-10-16\" \"2022-10-17\" #> [756] \"2022-10-18\" \"2022-10-19\" \"2022-10-20\" \"2022-10-21\" \"2022-10-22\" #> [761] \"2022-10-23\" \"2022-10-24\" \"2022-10-25\" \"2022-10-26\" \"2022-10-27\" #> [766] \"2022-10-28\" \"2022-10-29\" \"2022-10-30\" \"2022-10-31\" \"2022-11-01\" #> [771] \"2022-11-02\" \"2022-11-03\" \"2022-11-04\" \"2022-11-05\" \"2022-11-06\" #> [776] \"2022-11-07\" \"2022-11-08\" \"2022-11-09\" \"2022-11-10\" \"2022-11-11\" #> [781] \"2022-11-12\" \"2022-11-13\" \"2022-11-14\" \"2022-11-15\" \"2022-11-16\" #> [786] \"2022-11-17\" \"2022-11-18\" \"2022-11-19\" \"2022-11-20\" \"2022-11-21\" #> [791] \"2022-11-22\" \"2022-11-23\" \"2022-11-24\" \"2022-11-25\" \"2022-11-26\" #> [796] \"2022-11-27\" \"2022-11-28\" \"2022-11-29\" \"2022-11-30\" \"2022-12-01\" #> [801] \"2022-12-02\" \"2022-12-03\" \"2022-12-04\" \"2022-12-05\" \"2022-12-06\" #> [806] \"2022-12-07\" \"2022-12-08\" \"2022-12-09\" \"2022-12-10\" \"2022-12-11\" #> [811] \"2022-12-12\" \"2022-12-13\" \"2022-12-14\" \"2022-12-15\" \"2022-12-16\" #> [816] \"2022-12-17\" \"2022-12-18\" \"2022-12-19\" \"2022-12-20\" \"2022-12-21\" #> [821] \"2022-12-22\" \"2022-12-23\" \"2022-12-24\" \"2022-12-25\" \"2022-12-26\" #> [826] \"2022-12-27\" \"2022-12-28\" \"2022-12-29\" \"2022-12-30\" \"2022-12-31\" #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.pathogen_structure\" #> [2] \"list\"                                  single(   case_timeseries = sarscov2$cases,   time = sarscov2$date,   pathogen_name = 'sarscov2' # preserved as provided ) #> $pathogen_structure #> [1] \"single\" #>  #> $pathogen_names #> [1] \"sarscov2\" #>  #> $data #> $data$case_timeseries #>   [1]   7096   7682   7318   6810   7023   9983  10366  12717  13357  13854 #>  [11]  11667  11953  16753  17250  18573  18425  15893  12648  12202  19671 #>  [21]  19116  19920  18606  17915  14882  14311  25872  25613  25714  23475 #>  [31]  21694  16434  15895  26807  24351  23901  23614  22890  16673  15970 #>  [41]  31925  25943  24027  24063  23659  18766  20244  31510  27789  27757 #>  [51]  24826  24388  18223  16233  26952  23488  21076  18041  17100  12533 #>  [61]  11895  19024  16679  16814  14761  14554  11086  10852  18198  16684 #>  [71]  16676  15860  15834  12893  13731  21584  21065  21909  22916  24390 #>  [81]  19588  22266  35197  34378  35427  34437  36419  25589  33066  48192 #>  [91]  46475  42936  32392  14419  41110  48520  46408  83090  72161  53947 #> [101]  32482  61654  56335  77972  66638  58784  53187  48105  40035  37174 #> [111]  58592  50647  46509  43472  41452  31250  29592  45957  40525  35986 #> [121]  32502  30330  22344  17554  30737  27730  26303  24773  22434  17167 #> [131]  15783  22972  20265  19914  18493  16307  12320  11664  16194  14225 #> [141]  13899  13139  12573   9035   8995  14735  12939  11942  11793  10728 #> [151]   8313   8098  11657   9763   8847   8024   6782   4949   4873   7192 #> [161]   6918   6172   5937   5467   4628   4410   6890   6488   6250   5933 #> [171]   5717   4381   4425   6703   5863   5978   5632   5180   4247   5390 #> [181]   6459   5484   6224   5616   4567   3731   5030   4196   3779   3966 #> [191]   3674   2747   2508   2412   2744   3313   3253   3147   2953   2380 #> [201]   2376   2881   2495   2512   2345   2347   1722   2584   2738   2541 #> [211]   2708   2409   2020   1564   2119   2626   2178   2499   2230   1825 #> [221]   1433   1521   2084   2553   2569   2326   1982   1609   2307   2809 #> [231]   2329   2335   2182   1938   1628   1923   2858   2812   2813   2517 #> [241]   2367   2000   2326   3369   3427   3922   3747   3589   3000   3164 #> [251]   3897   5431   6168   6258   5861   4731   5534   7946   7896   8210 #> [261]   8043   7619   6284   7135  10362  10800  11052  11106  10320   8447 #> [271]  10087  16308  17402  18351  18714  18169  16301  18502  28418  28199 #> [281]  28923  28794  26339  24010  25170  34919  36060  38597  34020  32804 #> [291]  28379  30503  44511  47707  54910  62000  55264  38476  36182  47924 #> [301]  39876  35548  31278  27817  22852  22187  29981  29582  30237  28432 #> [311]  24749  20570  20985  29840  30473  32338  31660  28035  22540  22887 #> [321]  32162  31518  33350  31726  28974  25057  25327  36907  37920  38739 #> [331]  36501  32231  28536  28743  39715  37682  38777  37613  33745  27601 #> [341]  26136  34774  45212  43532  42328  38633  31810  31803  44929  38619 #> [351]  35849  33974  29187  23533  24060  34658  31435  30414  29710  29479 #> [361]  26645  31084  40768  38848  36756  35851  32108  28567  32083  41589 #> [371]  36548  34837  32604  29058  26316  32059  43733  39279  39264  38465 #> [381]  35612  32306  36418  50304  48321  47775  46419  43560  37878  43752 #> [391]  57743  52529  51661  45194  40664  35103  35764  47466  42124  43045 #> [401]  41391  40251  33569  34814  45109  38019  35986  33662  30318  27436 #> [411]  30586  44126  42246  42942  40999  37763  32885  35532  50948  46430 #> [421]  45895  44062  39606  35335  37250  50733  48197  46772  43425  39330 #> [431]  33303  39706  56289  55695  54820  50319  45667  38784  41051  59694 #> [441]  56258  58827  56995  52492  48594  53158  87169 102788 112703 106055 #> [451]  95897  88883  89133 133966 150293 161560 160633 137268  70363 116287 #> [461] 195011 212469 272798 236576 188567 118275 181068 229901 275647 222174 #> [471] 172980 120287  93615  95790 132959 115245 103219  96412  86325  77950 #> [481]  98097 131514 118857 111760 100324  91730  81733 102365 127364 113202 #> [491] 108668  96201  84026  73512  87702 105051  93949  88418  76644  63264 #> [501]  52305  60552  76483  69661  64339  52293  44559  37529  41755  54745 #> [511]  52502  51572  44716  33241  34647  37720  45132  39188  36477  30631 #> [521]  27837  25089  31360  44649  44795  46179  43761  41408  38759  49026 #> [531]  68520  70112  73531  70510  67030  62078  75739  99834  93708  91751 #> [541]  82853  75285  67417  81054 109286  99095  94185  82905  72430  61456 #> [551]  68336  92857  80126  73643  54791  47462  37592  42179  53727  49101 #> [561]  44750  38709  32988  27885  30952  37371  33771  31685  26639  21617 #> [571]  19925  20144  25223  25772  21457  18464  15703  13210  14714  17109 #> [581]  14560  13055  11608  10012   8354   9034  11907  13318  11672  10221 #> [591]   8954   7517   9062  10702   9748   8725   7642   6942   6120   7973 #> [601]   9417   8286   7638   6820   5821   5019   5997   7313   6679   6293 #> [611]   5753   5409   4988   5680   7115   7093   7011   6209   6635   7492 #> [621]   9815  11747  11411  11784  11319  10784  10077  12693  15272  15141 #> [631]  14837  14225  13919  13623  16997  19942  20896  20873  19590  18350 #> [641]  16800  20778  25104  25041  24601  24240  23650  21961  27780  33704 #> [651]  31415  29698  26454  24611  21246  25096  29826  26946  23856  21100 #> [661]  18359  15017  17236  18718  16670  16169  14158  12378   9934  11275 #> [671]  13299  11725  10544   9329   8508   7325   8426   9835   9170   8353 #> [681]   7296   6548   5420   6547   8068   7309   6748   6193   5339   4495 #> [691]   5363   6424   5559   5032   4564   4012   3502   4085   5224   4778 #> [701]   4554   3796   3451   3112   3439   4662   5226   4616   4350   3808 #> [711]   3417   4288   5125   4578   4235   3747   3553   3268   4347   5308 #> [721]   5148   4973   4634   4134   3521   4339   6166   7828   7553   6815 #> [731]   6485   5719   7240   8618   8255   8414   7895   7615   7065   9204 #> [741]  11692  10965  10231   9389   8950   7053   8558  10497   9461   8769 #> [751]   8134   7970   6442   7780  10005   8235   7598   6576   6297   4968 #> [761]   5523   6807   5665   5449   4855   4401   3583   4271   5129   4549 #> [771]   4014   3678   3107   2665   3267   4321   3829   3576   3205   2893 #> [781]   2433   2912   3923   3534   3260   3037   2773   2431   2890   3938 #> [791]   3805   3616   3329   2902   2551   3448   4639   4386   3980   3505 #> [801]   3596   2748   3786   5325   5241   5195   4537   4216   3570   4631 #> [811]   6986   7111   6533   6094   6084   4743   5772   9073   8631   7802 #> [821]   6877   5741   4132   3694   4950   6605   8419   7718   6126   4287 #>  #> $data$time #>   [1] \"2020-09-23\" \"2020-09-24\" \"2020-09-25\" \"2020-09-26\" \"2020-09-27\" #>   [6] \"2020-09-28\" \"2020-09-29\" \"2020-09-30\" \"2020-10-01\" \"2020-10-02\" #>  [11] \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-06\" \"2020-10-07\" #>  [16] \"2020-10-08\" \"2020-10-09\" \"2020-10-10\" \"2020-10-11\" \"2020-10-12\" #>  [21] \"2020-10-13\" \"2020-10-14\" \"2020-10-15\" \"2020-10-16\" \"2020-10-17\" #>  [26] \"2020-10-18\" \"2020-10-19\" \"2020-10-20\" \"2020-10-21\" \"2020-10-22\" #>  [31] \"2020-10-23\" \"2020-10-24\" \"2020-10-25\" \"2020-10-26\" \"2020-10-27\" #>  [36] \"2020-10-28\" \"2020-10-29\" \"2020-10-30\" \"2020-10-31\" \"2020-11-01\" #>  [41] \"2020-11-02\" \"2020-11-03\" \"2020-11-04\" \"2020-11-05\" \"2020-11-06\" #>  [46] \"2020-11-07\" \"2020-11-08\" \"2020-11-09\" \"2020-11-10\" \"2020-11-11\" #>  [51] \"2020-11-12\" \"2020-11-13\" \"2020-11-14\" \"2020-11-15\" \"2020-11-16\" #>  [56] \"2020-11-17\" \"2020-11-18\" \"2020-11-19\" \"2020-11-20\" \"2020-11-21\" #>  [61] \"2020-11-22\" \"2020-11-23\" \"2020-11-24\" \"2020-11-25\" \"2020-11-26\" #>  [66] \"2020-11-27\" \"2020-11-28\" \"2020-11-29\" \"2020-11-30\" \"2020-12-01\" #>  [71] \"2020-12-02\" \"2020-12-03\" \"2020-12-04\" \"2020-12-05\" \"2020-12-06\" #>  [76] \"2020-12-07\" \"2020-12-08\" \"2020-12-09\" \"2020-12-10\" \"2020-12-11\" #>  [81] \"2020-12-12\" \"2020-12-13\" \"2020-12-14\" \"2020-12-15\" \"2020-12-16\" #>  [86] \"2020-12-17\" \"2020-12-18\" \"2020-12-19\" \"2020-12-20\" \"2020-12-21\" #>  [91] \"2020-12-22\" \"2020-12-23\" \"2020-12-24\" \"2020-12-25\" \"2020-12-26\" #>  [96] \"2020-12-27\" \"2020-12-28\" \"2020-12-29\" \"2020-12-30\" \"2020-12-31\" #> [101] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\" #> [106] \"2021-01-06\" \"2021-01-07\" \"2021-01-08\" \"2021-01-09\" \"2021-01-10\" #> [111] \"2021-01-11\" \"2021-01-12\" \"2021-01-13\" \"2021-01-14\" \"2021-01-15\" #> [116] \"2021-01-16\" \"2021-01-17\" \"2021-01-18\" \"2021-01-19\" \"2021-01-20\" #> [121] \"2021-01-21\" \"2021-01-22\" \"2021-01-23\" \"2021-01-24\" \"2021-01-25\" #> [126] \"2021-01-26\" \"2021-01-27\" \"2021-01-28\" \"2021-01-29\" \"2021-01-30\" #> [131] \"2021-01-31\" \"2021-02-01\" \"2021-02-02\" \"2021-02-03\" \"2021-02-04\" #> [136] \"2021-02-05\" \"2021-02-06\" \"2021-02-07\" \"2021-02-08\" \"2021-02-09\" #> [141] \"2021-02-10\" \"2021-02-11\" \"2021-02-12\" \"2021-02-13\" \"2021-02-14\" #> [146] \"2021-02-15\" \"2021-02-16\" \"2021-02-17\" \"2021-02-18\" \"2021-02-19\" #> [151] \"2021-02-20\" \"2021-02-21\" \"2021-02-22\" \"2021-02-23\" \"2021-02-24\" #> [156] \"2021-02-25\" \"2021-02-26\" \"2021-02-27\" \"2021-02-28\" \"2021-03-01\" #> [161] \"2021-03-02\" \"2021-03-03\" \"2021-03-04\" \"2021-03-05\" \"2021-03-06\" #> [166] \"2021-03-07\" \"2021-03-08\" \"2021-03-09\" \"2021-03-10\" \"2021-03-11\" #> [171] \"2021-03-12\" \"2021-03-13\" \"2021-03-14\" \"2021-03-15\" \"2021-03-16\" #> [176] \"2021-03-17\" \"2021-03-18\" \"2021-03-19\" \"2021-03-20\" \"2021-03-21\" #> [181] \"2021-03-22\" \"2021-03-23\" \"2021-03-24\" \"2021-03-25\" \"2021-03-26\" #> [186] \"2021-03-27\" \"2021-03-28\" \"2021-03-29\" \"2021-03-30\" \"2021-03-31\" #> [191] \"2021-04-01\" \"2021-04-02\" \"2021-04-03\" \"2021-04-04\" \"2021-04-05\" #> [196] \"2021-04-06\" \"2021-04-07\" \"2021-04-08\" \"2021-04-09\" \"2021-04-10\" #> [201] \"2021-04-11\" \"2021-04-12\" \"2021-04-13\" \"2021-04-14\" \"2021-04-15\" #> [206] \"2021-04-16\" \"2021-04-17\" \"2021-04-18\" \"2021-04-19\" \"2021-04-20\" #> [211] \"2021-04-21\" \"2021-04-22\" \"2021-04-23\" \"2021-04-24\" \"2021-04-25\" #> [216] \"2021-04-26\" \"2021-04-27\" \"2021-04-28\" \"2021-04-29\" \"2021-04-30\" #> [221] \"2021-05-01\" \"2021-05-02\" \"2021-05-03\" \"2021-05-04\" \"2021-05-05\" #> [226] \"2021-05-06\" \"2021-05-07\" \"2021-05-08\" \"2021-05-09\" \"2021-05-10\" #> [231] \"2021-05-11\" \"2021-05-12\" \"2021-05-13\" \"2021-05-14\" \"2021-05-15\" #> [236] \"2021-05-16\" \"2021-05-17\" \"2021-05-18\" \"2021-05-19\" \"2021-05-20\" #> [241] \"2021-05-21\" \"2021-05-22\" \"2021-05-23\" \"2021-05-24\" \"2021-05-25\" #> [246] \"2021-05-26\" \"2021-05-27\" \"2021-05-28\" \"2021-05-29\" \"2021-05-30\" #> [251] \"2021-05-31\" \"2021-06-01\" \"2021-06-02\" \"2021-06-03\" \"2021-06-04\" #> [256] \"2021-06-05\" \"2021-06-06\" \"2021-06-07\" \"2021-06-08\" \"2021-06-09\" #> [261] \"2021-06-10\" \"2021-06-11\" \"2021-06-12\" \"2021-06-13\" \"2021-06-14\" #> [266] \"2021-06-15\" \"2021-06-16\" \"2021-06-17\" \"2021-06-18\" \"2021-06-19\" #> [271] \"2021-06-20\" \"2021-06-21\" \"2021-06-22\" \"2021-06-23\" \"2021-06-24\" #> [276] \"2021-06-25\" \"2021-06-26\" \"2021-06-27\" \"2021-06-28\" \"2021-06-29\" #> [281] \"2021-06-30\" \"2021-07-01\" \"2021-07-02\" \"2021-07-03\" \"2021-07-04\" #> [286] \"2021-07-05\" \"2021-07-06\" \"2021-07-07\" \"2021-07-08\" \"2021-07-09\" #> [291] \"2021-07-10\" \"2021-07-11\" \"2021-07-12\" \"2021-07-13\" \"2021-07-14\" #> [296] \"2021-07-15\" \"2021-07-16\" \"2021-07-17\" \"2021-07-18\" \"2021-07-19\" #> [301] \"2021-07-20\" \"2021-07-21\" \"2021-07-22\" \"2021-07-23\" \"2021-07-24\" #> [306] \"2021-07-25\" \"2021-07-26\" \"2021-07-27\" \"2021-07-28\" \"2021-07-29\" #> [311] \"2021-07-30\" \"2021-07-31\" \"2021-08-01\" \"2021-08-02\" \"2021-08-03\" #> [316] \"2021-08-04\" \"2021-08-05\" \"2021-08-06\" \"2021-08-07\" \"2021-08-08\" #> [321] \"2021-08-09\" \"2021-08-10\" \"2021-08-11\" \"2021-08-12\" \"2021-08-13\" #> [326] \"2021-08-14\" \"2021-08-15\" \"2021-08-16\" \"2021-08-17\" \"2021-08-18\" #> [331] \"2021-08-19\" \"2021-08-20\" \"2021-08-21\" \"2021-08-22\" \"2021-08-23\" #> [336] \"2021-08-24\" \"2021-08-25\" \"2021-08-26\" \"2021-08-27\" \"2021-08-28\" #> [341] \"2021-08-29\" \"2021-08-30\" \"2021-08-31\" \"2021-09-01\" \"2021-09-02\" #> [346] \"2021-09-03\" \"2021-09-04\" \"2021-09-05\" \"2021-09-06\" \"2021-09-07\" #> [351] \"2021-09-08\" \"2021-09-09\" \"2021-09-10\" \"2021-09-11\" \"2021-09-12\" #> [356] \"2021-09-13\" \"2021-09-14\" \"2021-09-15\" \"2021-09-16\" \"2021-09-17\" #> [361] \"2021-09-18\" \"2021-09-19\" \"2021-09-20\" \"2021-09-21\" \"2021-09-22\" #> [366] \"2021-09-23\" \"2021-09-24\" \"2021-09-25\" \"2021-09-26\" \"2021-09-27\" #> [371] \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\" \"2021-10-02\" #> [376] \"2021-10-03\" \"2021-10-04\" \"2021-10-05\" \"2021-10-06\" \"2021-10-07\" #> [381] \"2021-10-08\" \"2021-10-09\" \"2021-10-10\" \"2021-10-11\" \"2021-10-12\" #> [386] \"2021-10-13\" \"2021-10-14\" \"2021-10-15\" \"2021-10-16\" \"2021-10-17\" #> [391] \"2021-10-18\" \"2021-10-19\" \"2021-10-20\" \"2021-10-21\" \"2021-10-22\" #> [396] \"2021-10-23\" \"2021-10-24\" \"2021-10-25\" \"2021-10-26\" \"2021-10-27\" #> [401] \"2021-10-28\" \"2021-10-29\" \"2021-10-30\" \"2021-10-31\" \"2021-11-01\" #> [406] \"2021-11-02\" \"2021-11-03\" \"2021-11-04\" \"2021-11-05\" \"2021-11-06\" #> [411] \"2021-11-07\" \"2021-11-08\" \"2021-11-09\" \"2021-11-10\" \"2021-11-11\" #> [416] \"2021-11-12\" \"2021-11-13\" \"2021-11-14\" \"2021-11-15\" \"2021-11-16\" #> [421] \"2021-11-17\" \"2021-11-18\" \"2021-11-19\" \"2021-11-20\" \"2021-11-21\" #> [426] \"2021-11-22\" \"2021-11-23\" \"2021-11-24\" \"2021-11-25\" \"2021-11-26\" #> [431] \"2021-11-27\" \"2021-11-28\" \"2021-11-29\" \"2021-11-30\" \"2021-12-01\" #> [436] \"2021-12-02\" \"2021-12-03\" \"2021-12-04\" \"2021-12-05\" \"2021-12-06\" #> [441] \"2021-12-07\" \"2021-12-08\" \"2021-12-09\" \"2021-12-10\" \"2021-12-11\" #> [446] \"2021-12-12\" \"2021-12-13\" \"2021-12-14\" \"2021-12-15\" \"2021-12-16\" #> [451] \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" \"2021-12-20\" \"2021-12-21\" #> [456] \"2021-12-22\" \"2021-12-23\" \"2021-12-24\" \"2021-12-25\" \"2021-12-26\" #> [461] \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" \"2021-12-30\" \"2021-12-31\" #> [466] \"2022-01-01\" \"2022-01-02\" \"2022-01-03\" \"2022-01-04\" \"2022-01-05\" #> [471] \"2022-01-06\" \"2022-01-07\" \"2022-01-08\" \"2022-01-09\" \"2022-01-10\" #> [476] \"2022-01-11\" \"2022-01-12\" \"2022-01-13\" \"2022-01-14\" \"2022-01-15\" #> [481] \"2022-01-16\" \"2022-01-17\" \"2022-01-18\" \"2022-01-19\" \"2022-01-20\" #> [486] \"2022-01-21\" \"2022-01-22\" \"2022-01-23\" \"2022-01-24\" \"2022-01-25\" #> [491] \"2022-01-26\" \"2022-01-27\" \"2022-01-28\" \"2022-01-29\" \"2022-01-30\" #> [496] \"2022-01-31\" \"2022-02-01\" \"2022-02-02\" \"2022-02-03\" \"2022-02-04\" #> [501] \"2022-02-05\" \"2022-02-06\" \"2022-02-07\" \"2022-02-08\" \"2022-02-09\" #> [506] \"2022-02-10\" \"2022-02-11\" \"2022-02-12\" \"2022-02-13\" \"2022-02-14\" #> [511] \"2022-02-15\" \"2022-02-16\" \"2022-02-17\" \"2022-02-18\" \"2022-02-19\" #> [516] \"2022-02-20\" \"2022-02-21\" \"2022-02-22\" \"2022-02-23\" \"2022-02-24\" #> [521] \"2022-02-25\" \"2022-02-26\" \"2022-02-27\" \"2022-02-28\" \"2022-03-01\" #> [526] \"2022-03-02\" \"2022-03-03\" \"2022-03-04\" \"2022-03-05\" \"2022-03-06\" #> [531] \"2022-03-07\" \"2022-03-08\" \"2022-03-09\" \"2022-03-10\" \"2022-03-11\" #> [536] \"2022-03-12\" \"2022-03-13\" \"2022-03-14\" \"2022-03-15\" \"2022-03-16\" #> [541] \"2022-03-17\" \"2022-03-18\" \"2022-03-19\" \"2022-03-20\" \"2022-03-21\" #> [546] \"2022-03-22\" \"2022-03-23\" \"2022-03-24\" \"2022-03-25\" \"2022-03-26\" #> [551] \"2022-03-27\" \"2022-03-28\" \"2022-03-29\" \"2022-03-30\" \"2022-03-31\" #> [556] \"2022-04-01\" \"2022-04-02\" \"2022-04-03\" \"2022-04-04\" \"2022-04-05\" #> [561] \"2022-04-06\" \"2022-04-07\" \"2022-04-08\" \"2022-04-09\" \"2022-04-10\" #> [566] \"2022-04-11\" \"2022-04-12\" \"2022-04-13\" \"2022-04-14\" \"2022-04-15\" #> [571] \"2022-04-16\" \"2022-04-17\" \"2022-04-18\" \"2022-04-19\" \"2022-04-20\" #> [576] \"2022-04-21\" \"2022-04-22\" \"2022-04-23\" \"2022-04-24\" \"2022-04-25\" #> [581] \"2022-04-26\" \"2022-04-27\" \"2022-04-28\" \"2022-04-29\" \"2022-04-30\" #> [586] \"2022-05-01\" \"2022-05-02\" \"2022-05-03\" \"2022-05-04\" \"2022-05-05\" #> [591] \"2022-05-06\" \"2022-05-07\" \"2022-05-08\" \"2022-05-09\" \"2022-05-10\" #> [596] \"2022-05-11\" \"2022-05-12\" \"2022-05-13\" \"2022-05-14\" \"2022-05-15\" #> [601] \"2022-05-16\" \"2022-05-17\" \"2022-05-18\" \"2022-05-19\" \"2022-05-20\" #> [606] \"2022-05-21\" \"2022-05-22\" \"2022-05-23\" \"2022-05-24\" \"2022-05-25\" #> [611] \"2022-05-26\" \"2022-05-27\" \"2022-05-28\" \"2022-05-29\" \"2022-05-30\" #> [616] \"2022-05-31\" \"2022-06-01\" \"2022-06-02\" \"2022-06-03\" \"2022-06-04\" #> [621] \"2022-06-05\" \"2022-06-06\" \"2022-06-07\" \"2022-06-08\" \"2022-06-09\" #> [626] \"2022-06-10\" \"2022-06-11\" \"2022-06-12\" \"2022-06-13\" \"2022-06-14\" #> [631] \"2022-06-15\" \"2022-06-16\" \"2022-06-17\" \"2022-06-18\" \"2022-06-19\" #> [636] \"2022-06-20\" \"2022-06-21\" \"2022-06-22\" \"2022-06-23\" \"2022-06-24\" #> [641] \"2022-06-25\" \"2022-06-26\" \"2022-06-27\" \"2022-06-28\" \"2022-06-29\" #> [646] \"2022-06-30\" \"2022-07-01\" \"2022-07-02\" \"2022-07-03\" \"2022-07-04\" #> [651] \"2022-07-05\" \"2022-07-06\" \"2022-07-07\" \"2022-07-08\" \"2022-07-09\" #> [656] \"2022-07-10\" \"2022-07-11\" \"2022-07-12\" \"2022-07-13\" \"2022-07-14\" #> [661] \"2022-07-15\" \"2022-07-16\" \"2022-07-17\" \"2022-07-18\" \"2022-07-19\" #> [666] \"2022-07-20\" \"2022-07-21\" \"2022-07-22\" \"2022-07-23\" \"2022-07-24\" #> [671] \"2022-07-25\" \"2022-07-26\" \"2022-07-27\" \"2022-07-28\" \"2022-07-29\" #> [676] \"2022-07-30\" \"2022-07-31\" \"2022-08-01\" \"2022-08-02\" \"2022-08-03\" #> [681] \"2022-08-04\" \"2022-08-05\" \"2022-08-06\" \"2022-08-07\" \"2022-08-08\" #> [686] \"2022-08-09\" \"2022-08-10\" \"2022-08-11\" \"2022-08-12\" \"2022-08-13\" #> [691] \"2022-08-14\" \"2022-08-15\" \"2022-08-16\" \"2022-08-17\" \"2022-08-18\" #> [696] \"2022-08-19\" \"2022-08-20\" \"2022-08-21\" \"2022-08-22\" \"2022-08-23\" #> [701] \"2022-08-24\" \"2022-08-25\" \"2022-08-26\" \"2022-08-27\" \"2022-08-28\" #> [706] \"2022-08-29\" \"2022-08-30\" \"2022-08-31\" \"2022-09-01\" \"2022-09-02\" #> [711] \"2022-09-03\" \"2022-09-04\" \"2022-09-05\" \"2022-09-06\" \"2022-09-07\" #> [716] \"2022-09-08\" \"2022-09-09\" \"2022-09-10\" \"2022-09-11\" \"2022-09-12\" #> [721] \"2022-09-13\" \"2022-09-14\" \"2022-09-15\" \"2022-09-16\" \"2022-09-17\" #> [726] \"2022-09-18\" \"2022-09-19\" \"2022-09-20\" \"2022-09-21\" \"2022-09-22\" #> [731] \"2022-09-23\" \"2022-09-24\" \"2022-09-25\" \"2022-09-26\" \"2022-09-27\" #> [736] \"2022-09-28\" \"2022-09-29\" \"2022-09-30\" \"2022-10-01\" \"2022-10-02\" #> [741] \"2022-10-03\" \"2022-10-04\" \"2022-10-05\" \"2022-10-06\" \"2022-10-07\" #> [746] \"2022-10-08\" \"2022-10-09\" \"2022-10-10\" \"2022-10-11\" \"2022-10-12\" #> [751] \"2022-10-13\" \"2022-10-14\" \"2022-10-15\" \"2022-10-16\" \"2022-10-17\" #> [756] \"2022-10-18\" \"2022-10-19\" \"2022-10-20\" \"2022-10-21\" \"2022-10-22\" #> [761] \"2022-10-23\" \"2022-10-24\" \"2022-10-25\" \"2022-10-26\" \"2022-10-27\" #> [766] \"2022-10-28\" \"2022-10-29\" \"2022-10-30\" \"2022-10-31\" \"2022-11-01\" #> [771] \"2022-11-02\" \"2022-11-03\" \"2022-11-04\" \"2022-11-05\" \"2022-11-06\" #> [776] \"2022-11-07\" \"2022-11-08\" \"2022-11-09\" \"2022-11-10\" \"2022-11-11\" #> [781] \"2022-11-12\" \"2022-11-13\" \"2022-11-14\" \"2022-11-15\" \"2022-11-16\" #> [786] \"2022-11-17\" \"2022-11-18\" \"2022-11-19\" \"2022-11-20\" \"2022-11-21\" #> [791] \"2022-11-22\" \"2022-11-23\" \"2022-11-24\" \"2022-11-25\" \"2022-11-26\" #> [796] \"2022-11-27\" \"2022-11-28\" \"2022-11-29\" \"2022-11-30\" \"2022-12-01\" #> [801] \"2022-12-02\" \"2022-12-03\" \"2022-12-04\" \"2022-12-05\" \"2022-12-06\" #> [806] \"2022-12-07\" \"2022-12-08\" \"2022-12-09\" \"2022-12-10\" \"2022-12-11\" #> [811] \"2022-12-12\" \"2022-12-13\" \"2022-12-14\" \"2022-12-15\" \"2022-12-16\" #> [816] \"2022-12-17\" \"2022-12-18\" \"2022-12-19\" \"2022-12-20\" \"2022-12-21\" #> [821] \"2022-12-22\" \"2022-12-23\" \"2022-12-24\" \"2022-12-25\" \"2022-12-26\" #> [826] \"2022-12-27\" \"2022-12-28\" \"2022-12-29\" \"2022-12-30\" \"2022-12-31\" #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.pathogen_structure\" #> [2] \"list\"                                  single(   case_timeseries = sarscov2$cases,   time = sarscov2$date ) #> $pathogen_structure #> [1] \"single\" #>  #> $pathogen_names #> [1] \"default\" #>  #> $data #> $data$case_timeseries #>   [1]   7096   7682   7318   6810   7023   9983  10366  12717  13357  13854 #>  [11]  11667  11953  16753  17250  18573  18425  15893  12648  12202  19671 #>  [21]  19116  19920  18606  17915  14882  14311  25872  25613  25714  23475 #>  [31]  21694  16434  15895  26807  24351  23901  23614  22890  16673  15970 #>  [41]  31925  25943  24027  24063  23659  18766  20244  31510  27789  27757 #>  [51]  24826  24388  18223  16233  26952  23488  21076  18041  17100  12533 #>  [61]  11895  19024  16679  16814  14761  14554  11086  10852  18198  16684 #>  [71]  16676  15860  15834  12893  13731  21584  21065  21909  22916  24390 #>  [81]  19588  22266  35197  34378  35427  34437  36419  25589  33066  48192 #>  [91]  46475  42936  32392  14419  41110  48520  46408  83090  72161  53947 #> [101]  32482  61654  56335  77972  66638  58784  53187  48105  40035  37174 #> [111]  58592  50647  46509  43472  41452  31250  29592  45957  40525  35986 #> [121]  32502  30330  22344  17554  30737  27730  26303  24773  22434  17167 #> [131]  15783  22972  20265  19914  18493  16307  12320  11664  16194  14225 #> [141]  13899  13139  12573   9035   8995  14735  12939  11942  11793  10728 #> [151]   8313   8098  11657   9763   8847   8024   6782   4949   4873   7192 #> [161]   6918   6172   5937   5467   4628   4410   6890   6488   6250   5933 #> [171]   5717   4381   4425   6703   5863   5978   5632   5180   4247   5390 #> [181]   6459   5484   6224   5616   4567   3731   5030   4196   3779   3966 #> [191]   3674   2747   2508   2412   2744   3313   3253   3147   2953   2380 #> [201]   2376   2881   2495   2512   2345   2347   1722   2584   2738   2541 #> [211]   2708   2409   2020   1564   2119   2626   2178   2499   2230   1825 #> [221]   1433   1521   2084   2553   2569   2326   1982   1609   2307   2809 #> [231]   2329   2335   2182   1938   1628   1923   2858   2812   2813   2517 #> [241]   2367   2000   2326   3369   3427   3922   3747   3589   3000   3164 #> [251]   3897   5431   6168   6258   5861   4731   5534   7946   7896   8210 #> [261]   8043   7619   6284   7135  10362  10800  11052  11106  10320   8447 #> [271]  10087  16308  17402  18351  18714  18169  16301  18502  28418  28199 #> [281]  28923  28794  26339  24010  25170  34919  36060  38597  34020  32804 #> [291]  28379  30503  44511  47707  54910  62000  55264  38476  36182  47924 #> [301]  39876  35548  31278  27817  22852  22187  29981  29582  30237  28432 #> [311]  24749  20570  20985  29840  30473  32338  31660  28035  22540  22887 #> [321]  32162  31518  33350  31726  28974  25057  25327  36907  37920  38739 #> [331]  36501  32231  28536  28743  39715  37682  38777  37613  33745  27601 #> [341]  26136  34774  45212  43532  42328  38633  31810  31803  44929  38619 #> [351]  35849  33974  29187  23533  24060  34658  31435  30414  29710  29479 #> [361]  26645  31084  40768  38848  36756  35851  32108  28567  32083  41589 #> [371]  36548  34837  32604  29058  26316  32059  43733  39279  39264  38465 #> [381]  35612  32306  36418  50304  48321  47775  46419  43560  37878  43752 #> [391]  57743  52529  51661  45194  40664  35103  35764  47466  42124  43045 #> [401]  41391  40251  33569  34814  45109  38019  35986  33662  30318  27436 #> [411]  30586  44126  42246  42942  40999  37763  32885  35532  50948  46430 #> [421]  45895  44062  39606  35335  37250  50733  48197  46772  43425  39330 #> [431]  33303  39706  56289  55695  54820  50319  45667  38784  41051  59694 #> [441]  56258  58827  56995  52492  48594  53158  87169 102788 112703 106055 #> [451]  95897  88883  89133 133966 150293 161560 160633 137268  70363 116287 #> [461] 195011 212469 272798 236576 188567 118275 181068 229901 275647 222174 #> [471] 172980 120287  93615  95790 132959 115245 103219  96412  86325  77950 #> [481]  98097 131514 118857 111760 100324  91730  81733 102365 127364 113202 #> [491] 108668  96201  84026  73512  87702 105051  93949  88418  76644  63264 #> [501]  52305  60552  76483  69661  64339  52293  44559  37529  41755  54745 #> [511]  52502  51572  44716  33241  34647  37720  45132  39188  36477  30631 #> [521]  27837  25089  31360  44649  44795  46179  43761  41408  38759  49026 #> [531]  68520  70112  73531  70510  67030  62078  75739  99834  93708  91751 #> [541]  82853  75285  67417  81054 109286  99095  94185  82905  72430  61456 #> [551]  68336  92857  80126  73643  54791  47462  37592  42179  53727  49101 #> [561]  44750  38709  32988  27885  30952  37371  33771  31685  26639  21617 #> [571]  19925  20144  25223  25772  21457  18464  15703  13210  14714  17109 #> [581]  14560  13055  11608  10012   8354   9034  11907  13318  11672  10221 #> [591]   8954   7517   9062  10702   9748   8725   7642   6942   6120   7973 #> [601]   9417   8286   7638   6820   5821   5019   5997   7313   6679   6293 #> [611]   5753   5409   4988   5680   7115   7093   7011   6209   6635   7492 #> [621]   9815  11747  11411  11784  11319  10784  10077  12693  15272  15141 #> [631]  14837  14225  13919  13623  16997  19942  20896  20873  19590  18350 #> [641]  16800  20778  25104  25041  24601  24240  23650  21961  27780  33704 #> [651]  31415  29698  26454  24611  21246  25096  29826  26946  23856  21100 #> [661]  18359  15017  17236  18718  16670  16169  14158  12378   9934  11275 #> [671]  13299  11725  10544   9329   8508   7325   8426   9835   9170   8353 #> [681]   7296   6548   5420   6547   8068   7309   6748   6193   5339   4495 #> [691]   5363   6424   5559   5032   4564   4012   3502   4085   5224   4778 #> [701]   4554   3796   3451   3112   3439   4662   5226   4616   4350   3808 #> [711]   3417   4288   5125   4578   4235   3747   3553   3268   4347   5308 #> [721]   5148   4973   4634   4134   3521   4339   6166   7828   7553   6815 #> [731]   6485   5719   7240   8618   8255   8414   7895   7615   7065   9204 #> [741]  11692  10965  10231   9389   8950   7053   8558  10497   9461   8769 #> [751]   8134   7970   6442   7780  10005   8235   7598   6576   6297   4968 #> [761]   5523   6807   5665   5449   4855   4401   3583   4271   5129   4549 #> [771]   4014   3678   3107   2665   3267   4321   3829   3576   3205   2893 #> [781]   2433   2912   3923   3534   3260   3037   2773   2431   2890   3938 #> [791]   3805   3616   3329   2902   2551   3448   4639   4386   3980   3505 #> [801]   3596   2748   3786   5325   5241   5195   4537   4216   3570   4631 #> [811]   6986   7111   6533   6094   6084   4743   5772   9073   8631   7802 #> [821]   6877   5741   4132   3694   4950   6605   8419   7718   6126   4287 #>  #> $data$time #>   [1] \"2020-09-23\" \"2020-09-24\" \"2020-09-25\" \"2020-09-26\" \"2020-09-27\" #>   [6] \"2020-09-28\" \"2020-09-29\" \"2020-09-30\" \"2020-10-01\" \"2020-10-02\" #>  [11] \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-06\" \"2020-10-07\" #>  [16] \"2020-10-08\" \"2020-10-09\" \"2020-10-10\" \"2020-10-11\" \"2020-10-12\" #>  [21] \"2020-10-13\" \"2020-10-14\" \"2020-10-15\" \"2020-10-16\" \"2020-10-17\" #>  [26] \"2020-10-18\" \"2020-10-19\" \"2020-10-20\" \"2020-10-21\" \"2020-10-22\" #>  [31] \"2020-10-23\" \"2020-10-24\" \"2020-10-25\" \"2020-10-26\" \"2020-10-27\" #>  [36] \"2020-10-28\" \"2020-10-29\" \"2020-10-30\" \"2020-10-31\" \"2020-11-01\" #>  [41] \"2020-11-02\" \"2020-11-03\" \"2020-11-04\" \"2020-11-05\" \"2020-11-06\" #>  [46] \"2020-11-07\" \"2020-11-08\" \"2020-11-09\" \"2020-11-10\" \"2020-11-11\" #>  [51] \"2020-11-12\" \"2020-11-13\" \"2020-11-14\" \"2020-11-15\" \"2020-11-16\" #>  [56] \"2020-11-17\" \"2020-11-18\" \"2020-11-19\" \"2020-11-20\" \"2020-11-21\" #>  [61] \"2020-11-22\" \"2020-11-23\" \"2020-11-24\" \"2020-11-25\" \"2020-11-26\" #>  [66] \"2020-11-27\" \"2020-11-28\" \"2020-11-29\" \"2020-11-30\" \"2020-12-01\" #>  [71] \"2020-12-02\" \"2020-12-03\" \"2020-12-04\" \"2020-12-05\" \"2020-12-06\" #>  [76] \"2020-12-07\" \"2020-12-08\" \"2020-12-09\" \"2020-12-10\" \"2020-12-11\" #>  [81] \"2020-12-12\" \"2020-12-13\" \"2020-12-14\" \"2020-12-15\" \"2020-12-16\" #>  [86] \"2020-12-17\" \"2020-12-18\" \"2020-12-19\" \"2020-12-20\" \"2020-12-21\" #>  [91] \"2020-12-22\" \"2020-12-23\" \"2020-12-24\" \"2020-12-25\" \"2020-12-26\" #>  [96] \"2020-12-27\" \"2020-12-28\" \"2020-12-29\" \"2020-12-30\" \"2020-12-31\" #> [101] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\" #> [106] \"2021-01-06\" \"2021-01-07\" \"2021-01-08\" \"2021-01-09\" \"2021-01-10\" #> [111] \"2021-01-11\" \"2021-01-12\" \"2021-01-13\" \"2021-01-14\" \"2021-01-15\" #> [116] \"2021-01-16\" \"2021-01-17\" \"2021-01-18\" \"2021-01-19\" \"2021-01-20\" #> [121] \"2021-01-21\" \"2021-01-22\" \"2021-01-23\" \"2021-01-24\" \"2021-01-25\" #> [126] \"2021-01-26\" \"2021-01-27\" \"2021-01-28\" \"2021-01-29\" \"2021-01-30\" #> [131] \"2021-01-31\" \"2021-02-01\" \"2021-02-02\" \"2021-02-03\" \"2021-02-04\" #> [136] \"2021-02-05\" \"2021-02-06\" \"2021-02-07\" \"2021-02-08\" \"2021-02-09\" #> [141] \"2021-02-10\" \"2021-02-11\" \"2021-02-12\" \"2021-02-13\" \"2021-02-14\" #> [146] \"2021-02-15\" \"2021-02-16\" \"2021-02-17\" \"2021-02-18\" \"2021-02-19\" #> [151] \"2021-02-20\" \"2021-02-21\" \"2021-02-22\" \"2021-02-23\" \"2021-02-24\" #> [156] \"2021-02-25\" \"2021-02-26\" \"2021-02-27\" \"2021-02-28\" \"2021-03-01\" #> [161] \"2021-03-02\" \"2021-03-03\" \"2021-03-04\" \"2021-03-05\" \"2021-03-06\" #> [166] \"2021-03-07\" \"2021-03-08\" \"2021-03-09\" \"2021-03-10\" \"2021-03-11\" #> [171] \"2021-03-12\" \"2021-03-13\" \"2021-03-14\" \"2021-03-15\" \"2021-03-16\" #> [176] \"2021-03-17\" \"2021-03-18\" \"2021-03-19\" \"2021-03-20\" \"2021-03-21\" #> [181] \"2021-03-22\" \"2021-03-23\" \"2021-03-24\" \"2021-03-25\" \"2021-03-26\" #> [186] \"2021-03-27\" \"2021-03-28\" \"2021-03-29\" \"2021-03-30\" \"2021-03-31\" #> [191] \"2021-04-01\" \"2021-04-02\" \"2021-04-03\" \"2021-04-04\" \"2021-04-05\" #> [196] \"2021-04-06\" \"2021-04-07\" \"2021-04-08\" \"2021-04-09\" \"2021-04-10\" #> [201] \"2021-04-11\" \"2021-04-12\" \"2021-04-13\" \"2021-04-14\" \"2021-04-15\" #> [206] \"2021-04-16\" \"2021-04-17\" \"2021-04-18\" \"2021-04-19\" \"2021-04-20\" #> [211] \"2021-04-21\" \"2021-04-22\" \"2021-04-23\" \"2021-04-24\" \"2021-04-25\" #> [216] \"2021-04-26\" \"2021-04-27\" \"2021-04-28\" \"2021-04-29\" \"2021-04-30\" #> [221] \"2021-05-01\" \"2021-05-02\" \"2021-05-03\" \"2021-05-04\" \"2021-05-05\" #> [226] \"2021-05-06\" \"2021-05-07\" \"2021-05-08\" \"2021-05-09\" \"2021-05-10\" #> [231] \"2021-05-11\" \"2021-05-12\" \"2021-05-13\" \"2021-05-14\" \"2021-05-15\" #> [236] \"2021-05-16\" \"2021-05-17\" \"2021-05-18\" \"2021-05-19\" \"2021-05-20\" #> [241] \"2021-05-21\" \"2021-05-22\" \"2021-05-23\" \"2021-05-24\" \"2021-05-25\" #> [246] \"2021-05-26\" \"2021-05-27\" \"2021-05-28\" \"2021-05-29\" \"2021-05-30\" #> [251] \"2021-05-31\" \"2021-06-01\" \"2021-06-02\" \"2021-06-03\" \"2021-06-04\" #> [256] \"2021-06-05\" \"2021-06-06\" \"2021-06-07\" \"2021-06-08\" \"2021-06-09\" #> [261] \"2021-06-10\" \"2021-06-11\" \"2021-06-12\" \"2021-06-13\" \"2021-06-14\" #> [266] \"2021-06-15\" \"2021-06-16\" \"2021-06-17\" \"2021-06-18\" \"2021-06-19\" #> [271] \"2021-06-20\" \"2021-06-21\" \"2021-06-22\" \"2021-06-23\" \"2021-06-24\" #> [276] \"2021-06-25\" \"2021-06-26\" \"2021-06-27\" \"2021-06-28\" \"2021-06-29\" #> [281] \"2021-06-30\" \"2021-07-01\" \"2021-07-02\" \"2021-07-03\" \"2021-07-04\" #> [286] \"2021-07-05\" \"2021-07-06\" \"2021-07-07\" \"2021-07-08\" \"2021-07-09\" #> [291] \"2021-07-10\" \"2021-07-11\" \"2021-07-12\" \"2021-07-13\" \"2021-07-14\" #> [296] \"2021-07-15\" \"2021-07-16\" \"2021-07-17\" \"2021-07-18\" \"2021-07-19\" #> [301] \"2021-07-20\" \"2021-07-21\" \"2021-07-22\" \"2021-07-23\" \"2021-07-24\" #> [306] \"2021-07-25\" \"2021-07-26\" \"2021-07-27\" \"2021-07-28\" \"2021-07-29\" #> [311] \"2021-07-30\" \"2021-07-31\" \"2021-08-01\" \"2021-08-02\" \"2021-08-03\" #> [316] \"2021-08-04\" \"2021-08-05\" \"2021-08-06\" \"2021-08-07\" \"2021-08-08\" #> [321] \"2021-08-09\" \"2021-08-10\" \"2021-08-11\" \"2021-08-12\" \"2021-08-13\" #> [326] \"2021-08-14\" \"2021-08-15\" \"2021-08-16\" \"2021-08-17\" \"2021-08-18\" #> [331] \"2021-08-19\" \"2021-08-20\" \"2021-08-21\" \"2021-08-22\" \"2021-08-23\" #> [336] \"2021-08-24\" \"2021-08-25\" \"2021-08-26\" \"2021-08-27\" \"2021-08-28\" #> [341] \"2021-08-29\" \"2021-08-30\" \"2021-08-31\" \"2021-09-01\" \"2021-09-02\" #> [346] \"2021-09-03\" \"2021-09-04\" \"2021-09-05\" \"2021-09-06\" \"2021-09-07\" #> [351] \"2021-09-08\" \"2021-09-09\" \"2021-09-10\" \"2021-09-11\" \"2021-09-12\" #> [356] \"2021-09-13\" \"2021-09-14\" \"2021-09-15\" \"2021-09-16\" \"2021-09-17\" #> [361] \"2021-09-18\" \"2021-09-19\" \"2021-09-20\" \"2021-09-21\" \"2021-09-22\" #> [366] \"2021-09-23\" \"2021-09-24\" \"2021-09-25\" \"2021-09-26\" \"2021-09-27\" #> [371] \"2021-09-28\" \"2021-09-29\" \"2021-09-30\" \"2021-10-01\" \"2021-10-02\" #> [376] \"2021-10-03\" \"2021-10-04\" \"2021-10-05\" \"2021-10-06\" \"2021-10-07\" #> [381] \"2021-10-08\" \"2021-10-09\" \"2021-10-10\" \"2021-10-11\" \"2021-10-12\" #> [386] \"2021-10-13\" \"2021-10-14\" \"2021-10-15\" \"2021-10-16\" \"2021-10-17\" #> [391] \"2021-10-18\" \"2021-10-19\" \"2021-10-20\" \"2021-10-21\" \"2021-10-22\" #> [396] \"2021-10-23\" \"2021-10-24\" \"2021-10-25\" \"2021-10-26\" \"2021-10-27\" #> [401] \"2021-10-28\" \"2021-10-29\" \"2021-10-30\" \"2021-10-31\" \"2021-11-01\" #> [406] \"2021-11-02\" \"2021-11-03\" \"2021-11-04\" \"2021-11-05\" \"2021-11-06\" #> [411] \"2021-11-07\" \"2021-11-08\" \"2021-11-09\" \"2021-11-10\" \"2021-11-11\" #> [416] \"2021-11-12\" \"2021-11-13\" \"2021-11-14\" \"2021-11-15\" \"2021-11-16\" #> [421] \"2021-11-17\" \"2021-11-18\" \"2021-11-19\" \"2021-11-20\" \"2021-11-21\" #> [426] \"2021-11-22\" \"2021-11-23\" \"2021-11-24\" \"2021-11-25\" \"2021-11-26\" #> [431] \"2021-11-27\" \"2021-11-28\" \"2021-11-29\" \"2021-11-30\" \"2021-12-01\" #> [436] \"2021-12-02\" \"2021-12-03\" \"2021-12-04\" \"2021-12-05\" \"2021-12-06\" #> [441] \"2021-12-07\" \"2021-12-08\" \"2021-12-09\" \"2021-12-10\" \"2021-12-11\" #> [446] \"2021-12-12\" \"2021-12-13\" \"2021-12-14\" \"2021-12-15\" \"2021-12-16\" #> [451] \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" \"2021-12-20\" \"2021-12-21\" #> [456] \"2021-12-22\" \"2021-12-23\" \"2021-12-24\" \"2021-12-25\" \"2021-12-26\" #> [461] \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" \"2021-12-30\" \"2021-12-31\" #> [466] \"2022-01-01\" \"2022-01-02\" \"2022-01-03\" \"2022-01-04\" \"2022-01-05\" #> [471] \"2022-01-06\" \"2022-01-07\" \"2022-01-08\" \"2022-01-09\" \"2022-01-10\" #> [476] \"2022-01-11\" \"2022-01-12\" \"2022-01-13\" \"2022-01-14\" \"2022-01-15\" #> [481] \"2022-01-16\" \"2022-01-17\" \"2022-01-18\" \"2022-01-19\" \"2022-01-20\" #> [486] \"2022-01-21\" \"2022-01-22\" \"2022-01-23\" \"2022-01-24\" \"2022-01-25\" #> [491] \"2022-01-26\" \"2022-01-27\" \"2022-01-28\" \"2022-01-29\" \"2022-01-30\" #> [496] \"2022-01-31\" \"2022-02-01\" \"2022-02-02\" \"2022-02-03\" \"2022-02-04\" #> [501] \"2022-02-05\" \"2022-02-06\" \"2022-02-07\" \"2022-02-08\" \"2022-02-09\" #> [506] \"2022-02-10\" \"2022-02-11\" \"2022-02-12\" \"2022-02-13\" \"2022-02-14\" #> [511] \"2022-02-15\" \"2022-02-16\" \"2022-02-17\" \"2022-02-18\" \"2022-02-19\" #> [516] \"2022-02-20\" \"2022-02-21\" \"2022-02-22\" \"2022-02-23\" \"2022-02-24\" #> [521] \"2022-02-25\" \"2022-02-26\" \"2022-02-27\" \"2022-02-28\" \"2022-03-01\" #> [526] \"2022-03-02\" \"2022-03-03\" \"2022-03-04\" \"2022-03-05\" \"2022-03-06\" #> [531] \"2022-03-07\" \"2022-03-08\" \"2022-03-09\" \"2022-03-10\" \"2022-03-11\" #> [536] \"2022-03-12\" \"2022-03-13\" \"2022-03-14\" \"2022-03-15\" \"2022-03-16\" #> [541] \"2022-03-17\" \"2022-03-18\" \"2022-03-19\" \"2022-03-20\" \"2022-03-21\" #> [546] \"2022-03-22\" \"2022-03-23\" \"2022-03-24\" \"2022-03-25\" \"2022-03-26\" #> [551] \"2022-03-27\" \"2022-03-28\" \"2022-03-29\" \"2022-03-30\" \"2022-03-31\" #> [556] \"2022-04-01\" \"2022-04-02\" \"2022-04-03\" \"2022-04-04\" \"2022-04-05\" #> [561] \"2022-04-06\" \"2022-04-07\" \"2022-04-08\" \"2022-04-09\" \"2022-04-10\" #> [566] \"2022-04-11\" \"2022-04-12\" \"2022-04-13\" \"2022-04-14\" \"2022-04-15\" #> [571] \"2022-04-16\" \"2022-04-17\" \"2022-04-18\" \"2022-04-19\" \"2022-04-20\" #> [576] \"2022-04-21\" \"2022-04-22\" \"2022-04-23\" \"2022-04-24\" \"2022-04-25\" #> [581] \"2022-04-26\" \"2022-04-27\" \"2022-04-28\" \"2022-04-29\" \"2022-04-30\" #> [586] \"2022-05-01\" \"2022-05-02\" \"2022-05-03\" \"2022-05-04\" \"2022-05-05\" #> [591] \"2022-05-06\" \"2022-05-07\" \"2022-05-08\" \"2022-05-09\" \"2022-05-10\" #> [596] \"2022-05-11\" \"2022-05-12\" \"2022-05-13\" \"2022-05-14\" \"2022-05-15\" #> [601] \"2022-05-16\" \"2022-05-17\" \"2022-05-18\" \"2022-05-19\" \"2022-05-20\" #> [606] \"2022-05-21\" \"2022-05-22\" \"2022-05-23\" \"2022-05-24\" \"2022-05-25\" #> [611] \"2022-05-26\" \"2022-05-27\" \"2022-05-28\" \"2022-05-29\" \"2022-05-30\" #> [616] \"2022-05-31\" \"2022-06-01\" \"2022-06-02\" \"2022-06-03\" \"2022-06-04\" #> [621] \"2022-06-05\" \"2022-06-06\" \"2022-06-07\" \"2022-06-08\" \"2022-06-09\" #> [626] \"2022-06-10\" \"2022-06-11\" \"2022-06-12\" \"2022-06-13\" \"2022-06-14\" #> [631] \"2022-06-15\" \"2022-06-16\" \"2022-06-17\" \"2022-06-18\" \"2022-06-19\" #> [636] \"2022-06-20\" \"2022-06-21\" \"2022-06-22\" \"2022-06-23\" \"2022-06-24\" #> [641] \"2022-06-25\" \"2022-06-26\" \"2022-06-27\" \"2022-06-28\" \"2022-06-29\" #> [646] \"2022-06-30\" \"2022-07-01\" \"2022-07-02\" \"2022-07-03\" \"2022-07-04\" #> [651] \"2022-07-05\" \"2022-07-06\" \"2022-07-07\" \"2022-07-08\" \"2022-07-09\" #> [656] \"2022-07-10\" \"2022-07-11\" \"2022-07-12\" \"2022-07-13\" \"2022-07-14\" #> [661] \"2022-07-15\" \"2022-07-16\" \"2022-07-17\" \"2022-07-18\" \"2022-07-19\" #> [666] \"2022-07-20\" \"2022-07-21\" \"2022-07-22\" \"2022-07-23\" \"2022-07-24\" #> [671] \"2022-07-25\" \"2022-07-26\" \"2022-07-27\" \"2022-07-28\" \"2022-07-29\" #> [676] \"2022-07-30\" \"2022-07-31\" \"2022-08-01\" \"2022-08-02\" \"2022-08-03\" #> [681] \"2022-08-04\" \"2022-08-05\" \"2022-08-06\" \"2022-08-07\" \"2022-08-08\" #> [686] \"2022-08-09\" \"2022-08-10\" \"2022-08-11\" \"2022-08-12\" \"2022-08-13\" #> [691] \"2022-08-14\" \"2022-08-15\" \"2022-08-16\" \"2022-08-17\" \"2022-08-18\" #> [696] \"2022-08-19\" \"2022-08-20\" \"2022-08-21\" \"2022-08-22\" \"2022-08-23\" #> [701] \"2022-08-24\" \"2022-08-25\" \"2022-08-26\" \"2022-08-27\" \"2022-08-28\" #> [706] \"2022-08-29\" \"2022-08-30\" \"2022-08-31\" \"2022-09-01\" \"2022-09-02\" #> [711] \"2022-09-03\" \"2022-09-04\" \"2022-09-05\" \"2022-09-06\" \"2022-09-07\" #> [716] \"2022-09-08\" \"2022-09-09\" \"2022-09-10\" \"2022-09-11\" \"2022-09-12\" #> [721] \"2022-09-13\" \"2022-09-14\" \"2022-09-15\" \"2022-09-16\" \"2022-09-17\" #> [726] \"2022-09-18\" \"2022-09-19\" \"2022-09-20\" \"2022-09-21\" \"2022-09-22\" #> [731] \"2022-09-23\" \"2022-09-24\" \"2022-09-25\" \"2022-09-26\" \"2022-09-27\" #> [736] \"2022-09-28\" \"2022-09-29\" \"2022-09-30\" \"2022-10-01\" \"2022-10-02\" #> [741] \"2022-10-03\" \"2022-10-04\" \"2022-10-05\" \"2022-10-06\" \"2022-10-07\" #> [746] \"2022-10-08\" \"2022-10-09\" \"2022-10-10\" \"2022-10-11\" \"2022-10-12\" #> [751] \"2022-10-13\" \"2022-10-14\" \"2022-10-15\" \"2022-10-16\" \"2022-10-17\" #> [756] \"2022-10-18\" \"2022-10-19\" \"2022-10-20\" \"2022-10-21\" \"2022-10-22\" #> [761] \"2022-10-23\" \"2022-10-24\" \"2022-10-25\" \"2022-10-26\" \"2022-10-27\" #> [766] \"2022-10-28\" \"2022-10-29\" \"2022-10-30\" \"2022-10-31\" \"2022-11-01\" #> [771] \"2022-11-02\" \"2022-11-03\" \"2022-11-04\" \"2022-11-05\" \"2022-11-06\" #> [776] \"2022-11-07\" \"2022-11-08\" \"2022-11-09\" \"2022-11-10\" \"2022-11-11\" #> [781] \"2022-11-12\" \"2022-11-13\" \"2022-11-14\" \"2022-11-15\" \"2022-11-16\" #> [786] \"2022-11-17\" \"2022-11-18\" \"2022-11-19\" \"2022-11-20\" \"2022-11-21\" #> [791] \"2022-11-22\" \"2022-11-23\" \"2022-11-24\" \"2022-11-25\" \"2022-11-26\" #> [796] \"2022-11-27\" \"2022-11-28\" \"2022-11-29\" \"2022-11-30\" \"2022-12-01\" #> [801] \"2022-12-02\" \"2022-12-03\" \"2022-12-04\" \"2022-12-05\" \"2022-12-06\" #> [806] \"2022-12-07\" \"2022-12-08\" \"2022-12-09\" \"2022-12-10\" \"2022-12-11\" #> [811] \"2022-12-12\" \"2022-12-13\" \"2022-12-14\" \"2022-12-15\" \"2022-12-16\" #> [816] \"2022-12-17\" \"2022-12-18\" \"2022-12-19\" \"2022-12-20\" \"2022-12-21\" #> [821] \"2022-12-22\" \"2022-12-23\" \"2022-12-24\" \"2022-12-25\" \"2022-12-26\" #> [826] \"2022-12-27\" \"2022-12-28\" \"2022-12-29\" \"2022-12-30\" \"2022-12-31\" #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.pathogen_structure\" #> [2] \"list\""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/subtyped.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtyped pathogen structure — subtyped","title":"Subtyped pathogen structure — subtyped","text":"Subtyped pathogen structure","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/subtyped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtyped pathogen structure — subtyped","text":"","code":"subtyped(   case_timeseries,   time,   influenzaA_unsubtyped_timeseries,   influenzaA_subtyped_timeseries,   other_pathogen_timeseries,   smoothing_structure = c(\"shared\", \"independent\", \"correlated\"),   observation_noise = c(\"observation_noise_only\", \"pathogen_specific_noise\") )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/subtyped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtyped pathogen structure — subtyped","text":"case_timeseries vector total case data time vector labelled time data influenzaA_unsubtyped_timeseries case timeseries data unsubtyped influenzaA influenzaA_subtyped_timeseries case timeseries data subtyped influenzaA other_pathogen_timeseries pathogen case timeseries smoothing_structure either `shared` (pathogens smoothing structure; tau[1]), `independent` (pathogen completely independent smoothing structure; tau[number pathogens]), `correlated` (smoothing structure correlated among pathogens Sigma[number pathogens, number pathogens]). Case-insensitive. observation_noise either `observation_noise_only` (includes observation noise - pathogens) `pathogen_specific_noise` (includes noise individual pathogens well). Case-insensitive.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/subtyped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtyped pathogen structure — subtyped","text":"named list including pathogen_structure, pathogen_names, data,   model_params class `EpiStrainDynamics.pathogen_structure`","code":""},{"path":[]},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/subtyped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subtyped pathogen structure — subtyped","text":"","code":"# Both integer and numeric inputs work consistently subtyped(   case_timeseries = influenza$ili,   time = influenza$week,   influenzaA_unsubtyped_timeseries = influenza$inf_A,   influenzaA_subtyped_timeseries = list(     influenzaA.H3N2 = influenza$inf_H3N2,     influenzaA.H1N1 = influenza$inf_H1N1   ),   other_pathogen_timeseries = list(     influenzaB = influenza$inf_B,     other = influenza$num_spec - influenza$inf_all   ),   smoothing_structure = 'independent',   observation_noise = 'observation_noise_only' ) #> $pathogen_structure #> [1] \"subtyped\" #>  #> $pathogen_names #> [1] \"influenzaA.H3N2\" \"influenzaA.H1N1\" \"influenzaB\"      \"other\"           #>  #> $data #> $data$case_timeseries #>   [1]  29  38  42  58  45  60  30  52  33  26  75  65  71  92  71  75  73  39 #>  [19]  57  94 140 144 218 234 176 265 370 389 469 465 434 496 441 399 359 255 #>  [37] 198 195 156 105  78  48  48  77  69  58  64  80  69  60  50  63  41  54 #>  [55]  64  55  53  64  61  68  81  66  81  89  76 100  86 106  39  57  65  64 #>  [73]  80  83 136 125 140 113 133 171 168 166 204 181 245 216 202 236 220 188 #>  [91] 211 157 105  40  58 128  83 106  70  98 106  32  25  45  48  69  60  79 #> [109]  49  49  81  70  84 107 104  99 110 137  92  98  71 124 114  73  67  98 #> [127]  96 136 148 153 179 173 158 213 306 328 381 410 411 336 341 269 186 166 #> [145] 107 121  47 116 110 110 106  75  59  62  65  34  48  61  61  26  11  11 #> [163]  19  22  28  49  40  39  46  48  36  57  62  66 117  99 118 117 131 141 #> [181] 177 202 220 226 231 246 292 327 384 492 375 340 303 242 206 140  80  88 #> [199]  54  55  55  44  31  40  32  28  15  11  13  21  34  17  13  15  22  30 #> [217]  31  38  31  25  28  44  68  57  59  62  68  55  94  91 123  94 110 109 #> [235] 106 116 131 157 178 229 257 315 247 239 260 241 172 118  95  97  73  52 #> [253]  55  49  50  28  38  37  41  20  19  24  34  28  33  22  20  39  38  55 #> [271]  47  41  51  69  57  49  49  51  57  57  58  57  71  89  71  82 114 160 #> [289] 154 186 243 392 464 540 554 475 508 424 374 308 202 171 132 100  93  83 #> [307]  49  72  46  32  37  49  21  19  36  16  42  20  38  50  44  40  58  33 #> [325]  52  53  43  68  74  54  45  64  85 103 101  83  94 110  79 103 109 123 #> [343] 129 120 129 130 146 152 148 153 134  93  85  98  90  76  54  52  54  41 #> [361]  58  46  51  30  14  32  32  45  24  25  34  30  53  56  50  53  73  88 #> [379] 129 160  95 102 207 209 264 320 330 320 285 283 283 280 319 262 274 246 #> [397] 259 273 242 215 225 150 146 101  89  42  55  37  37  41  37  37  39  35 #> [415]  31  19   7  21  26  19  31  37  45  28  38  33 #>  #> $data$time #>   [1] \"2012-01-02\" \"2012-01-09\" \"2012-01-16\" \"2012-01-23\" \"2012-01-30\" #>   [6] \"2012-02-06\" \"2012-02-13\" \"2012-02-20\" \"2012-02-27\" \"2012-03-05\" #>  [11] \"2012-03-12\" \"2012-03-19\" \"2012-03-26\" \"2012-04-02\" \"2012-04-09\" #>  [16] \"2012-04-16\" \"2012-04-23\" \"2012-04-30\" \"2012-05-07\" \"2012-05-14\" #>  [21] \"2012-05-21\" \"2012-05-28\" \"2012-06-04\" \"2012-06-11\" \"2012-06-18\" #>  [26] \"2012-06-25\" \"2012-07-02\" \"2012-07-09\" \"2012-07-16\" \"2012-07-23\" #>  [31] \"2012-07-30\" \"2012-08-06\" \"2012-08-13\" \"2012-08-20\" \"2012-08-27\" #>  [36] \"2012-09-03\" \"2012-09-10\" \"2012-09-17\" \"2012-09-24\" \"2012-10-01\" #>  [41] \"2012-10-08\" \"2012-10-15\" \"2012-10-22\" \"2012-10-29\" \"2012-11-05\" #>  [46] \"2012-11-12\" \"2012-11-19\" \"2012-11-26\" \"2012-12-03\" \"2012-12-10\" #>  [51] \"2012-12-17\" \"2012-12-24\" \"2012-12-31\" \"2013-01-07\" \"2013-01-14\" #>  [56] \"2013-01-21\" \"2013-01-28\" \"2013-02-04\" \"2013-02-11\" \"2013-02-18\" #>  [61] \"2013-02-25\" \"2013-03-04\" \"2013-03-11\" \"2013-03-18\" \"2013-03-25\" #>  [66] \"2013-04-01\" \"2013-04-08\" \"2013-04-15\" \"2013-04-22\" \"2013-04-29\" #>  [71] \"2013-05-06\" \"2013-05-13\" \"2013-05-20\" \"2013-05-27\" \"2013-06-03\" #>  [76] \"2013-06-10\" \"2013-06-17\" \"2013-06-24\" \"2013-07-01\" \"2013-07-08\" #>  [81] \"2013-07-15\" \"2013-07-22\" \"2013-07-29\" \"2013-08-05\" \"2013-08-12\" #>  [86] \"2013-08-19\" \"2013-08-26\" \"2013-09-02\" \"2013-09-09\" \"2013-09-16\" #>  [91] \"2013-09-23\" \"2013-09-30\" \"2013-10-07\" \"2013-10-14\" \"2013-10-21\" #>  [96] \"2013-10-28\" \"2013-11-04\" \"2013-11-11\" \"2013-11-18\" \"2013-11-25\" #> [101] \"2013-12-02\" \"2013-12-09\" \"2013-12-16\" \"2013-12-23\" \"2013-12-30\" #> [106] \"2014-01-06\" \"2014-01-13\" \"2014-01-20\" \"2014-01-27\" \"2014-02-03\" #> [111] \"2014-02-10\" \"2014-02-17\" \"2014-02-24\" \"2014-03-03\" \"2014-03-10\" #> [116] \"2014-03-17\" \"2014-03-24\" \"2014-03-31\" \"2014-04-07\" \"2014-04-14\" #> [121] \"2014-04-21\" \"2014-04-28\" \"2014-05-05\" \"2014-05-12\" \"2014-05-19\" #> [126] \"2014-05-26\" \"2014-06-02\" \"2014-06-09\" \"2014-06-16\" \"2014-06-23\" #> [131] \"2014-06-30\" \"2014-07-07\" \"2014-07-14\" \"2014-07-21\" \"2014-07-28\" #> [136] \"2014-08-04\" \"2014-08-11\" \"2014-08-18\" \"2014-08-25\" \"2014-09-01\" #> [141] \"2014-09-08\" \"2014-09-15\" \"2014-09-22\" \"2014-09-29\" \"2014-10-06\" #> [146] \"2014-10-13\" \"2014-10-20\" \"2014-10-27\" \"2014-11-03\" \"2014-11-10\" #> [151] \"2014-11-17\" \"2014-11-24\" \"2014-12-01\" \"2014-12-08\" \"2014-12-15\" #> [156] \"2014-12-22\" \"2014-12-29\" \"2015-01-05\" \"2015-01-12\" \"2015-01-19\" #> [161] \"2015-01-26\" \"2015-02-02\" \"2015-02-09\" \"2015-02-16\" \"2015-02-23\" #> [166] \"2015-03-02\" \"2015-03-09\" \"2015-03-16\" \"2015-03-23\" \"2015-03-30\" #> [171] \"2015-04-06\" \"2015-04-13\" \"2015-04-20\" \"2015-04-27\" \"2015-05-04\" #> [176] \"2015-05-11\" \"2015-05-18\" \"2015-05-25\" \"2015-06-01\" \"2015-06-08\" #> [181] \"2015-06-15\" \"2015-06-22\" \"2015-06-29\" \"2015-07-06\" \"2015-07-13\" #> [186] \"2015-07-20\" \"2015-07-27\" \"2015-08-03\" \"2015-08-10\" \"2015-08-17\" #> [191] \"2015-08-24\" \"2015-08-31\" \"2015-09-07\" \"2015-09-14\" \"2015-09-21\" #> [196] \"2015-09-28\" \"2015-10-05\" \"2015-10-12\" \"2015-10-19\" \"2015-10-26\" #> [201] \"2015-11-02\" \"2015-11-09\" \"2015-11-16\" \"2015-11-23\" \"2015-11-30\" #> [206] \"2015-12-07\" \"2015-12-14\" \"2015-12-21\" \"2015-12-28\" \"2016-01-04\" #> [211] \"2016-01-11\" \"2016-01-18\" \"2016-01-25\" \"2016-02-01\" \"2016-02-08\" #> [216] \"2016-02-15\" \"2016-02-22\" \"2016-02-29\" \"2016-03-07\" \"2016-03-14\" #> [221] \"2016-03-21\" \"2016-03-28\" \"2016-04-04\" \"2016-04-11\" \"2016-04-18\" #> [226] \"2016-04-25\" \"2016-05-02\" \"2016-05-09\" \"2016-05-16\" \"2016-05-23\" #> [231] \"2016-05-30\" \"2016-06-06\" \"2016-06-13\" \"2016-06-20\" \"2016-06-27\" #> [236] \"2016-07-04\" \"2016-07-11\" \"2016-07-18\" \"2016-07-25\" \"2016-08-01\" #> [241] \"2016-08-08\" \"2016-08-15\" \"2016-08-22\" \"2016-08-29\" \"2016-09-05\" #> [246] \"2016-09-12\" \"2016-09-19\" \"2016-09-26\" \"2016-10-03\" \"2016-10-10\" #> [251] \"2016-10-17\" \"2016-10-24\" \"2016-10-31\" \"2016-11-07\" \"2016-11-14\" #> [256] \"2016-11-21\" \"2016-11-28\" \"2016-12-05\" \"2016-12-12\" \"2016-12-19\" #> [261] \"2016-12-26\" \"2017-01-02\" \"2017-01-09\" \"2017-01-16\" \"2017-01-23\" #> [266] \"2017-01-30\" \"2017-02-06\" \"2017-02-13\" \"2017-02-20\" \"2017-02-27\" #> [271] \"2017-03-06\" \"2017-03-13\" \"2017-03-20\" \"2017-03-27\" \"2017-04-03\" #> [276] \"2017-04-10\" \"2017-04-17\" \"2017-04-24\" \"2017-05-01\" \"2017-05-08\" #> [281] \"2017-05-15\" \"2017-05-22\" \"2017-05-29\" \"2017-06-05\" \"2017-06-12\" #> [286] \"2017-06-19\" \"2017-06-26\" \"2017-07-03\" \"2017-07-10\" \"2017-07-17\" #> [291] \"2017-07-24\" \"2017-07-31\" \"2017-08-07\" \"2017-08-14\" \"2017-08-21\" #> [296] \"2017-08-28\" \"2017-09-04\" \"2017-09-11\" \"2017-09-18\" \"2017-09-25\" #> [301] \"2017-10-02\" \"2017-10-09\" \"2017-10-16\" \"2017-10-23\" \"2017-10-30\" #> [306] \"2017-11-06\" \"2017-11-13\" \"2017-11-20\" \"2017-11-27\" \"2017-12-04\" #> [311] \"2017-12-11\" \"2017-12-18\" \"2017-12-25\" \"2018-01-01\" \"2018-01-08\" #> [316] \"2018-01-15\" \"2018-01-22\" \"2018-01-29\" \"2018-02-05\" \"2018-02-12\" #> [321] \"2018-02-19\" \"2018-02-26\" \"2018-03-05\" \"2018-03-12\" \"2018-03-19\" #> [326] \"2018-03-26\" \"2018-04-02\" \"2018-04-09\" \"2018-04-16\" \"2018-04-23\" #> [331] \"2018-04-30\" \"2018-05-07\" \"2018-05-14\" \"2018-05-21\" \"2018-05-28\" #> [336] \"2018-06-04\" \"2018-06-11\" \"2018-06-18\" \"2018-06-25\" \"2018-07-02\" #> [341] \"2018-07-09\" \"2018-07-16\" \"2018-07-23\" \"2018-07-30\" \"2018-08-06\" #> [346] \"2018-08-13\" \"2018-08-20\" \"2018-08-27\" \"2018-09-03\" \"2018-09-10\" #> [351] \"2018-09-17\" \"2018-09-24\" \"2018-10-01\" \"2018-10-08\" \"2018-10-15\" #> [356] \"2018-10-22\" \"2018-10-29\" \"2018-11-05\" \"2018-11-12\" \"2018-11-19\" #> [361] \"2018-11-26\" \"2018-12-03\" \"2018-12-10\" \"2018-12-17\" \"2018-12-24\" #> [366] \"2018-12-31\" \"2019-01-07\" \"2019-01-14\" \"2019-01-21\" \"2019-01-28\" #> [371] \"2019-02-04\" \"2019-02-11\" \"2019-02-18\" \"2019-02-25\" \"2019-03-04\" #> [376] \"2019-03-11\" \"2019-03-18\" \"2019-03-25\" \"2019-04-01\" \"2019-04-08\" #> [381] \"2019-04-15\" \"2019-04-22\" \"2019-04-29\" \"2019-05-06\" \"2019-05-13\" #> [386] \"2019-05-20\" \"2019-05-27\" \"2019-06-03\" \"2019-06-10\" \"2019-06-17\" #> [391] \"2019-06-24\" \"2019-07-01\" \"2019-07-08\" \"2019-07-15\" \"2019-07-22\" #> [396] \"2019-07-29\" \"2019-08-05\" \"2019-08-12\" \"2019-08-19\" \"2019-08-26\" #> [401] \"2019-09-02\" \"2019-09-09\" \"2019-09-16\" \"2019-09-23\" \"2019-09-30\" #> [406] \"2019-10-07\" \"2019-10-14\" \"2019-10-21\" \"2019-10-28\" \"2019-11-04\" #> [411] \"2019-11-11\" \"2019-11-18\" \"2019-11-25\" \"2019-12-02\" \"2019-12-09\" #> [416] \"2019-12-16\" \"2019-12-23\" \"2019-12-30\" \"2020-01-06\" \"2020-01-13\" #> [421] \"2020-01-20\" \"2020-01-27\" \"2020-02-03\" \"2020-02-10\" \"2020-02-17\" #> [426] \"2020-02-24\" #>  #> $data$component_pathogens #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    4    4   13    6    3    1    2    4    6     4    12     9    14     8 #> [2,]    3    1    8    5    2    7   10    9   13    10    19    12     8     5 #> [3,]  278  219  238  187  228  274  278  266  327   324   346   333   322   317 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     9    16    13    14    12    15    27    33    56    95    95   182 #> [2,]     6     4     4    10     7    12    11     8    18    23    30    72 #> [3,]   326   378   328   379   403   481   524   637   509   512   701   644 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]   264   310   280   311   318   274   295   187   153    89    63    44 #> [2,]    90   129   111   122   117   114    90   100    97    50    46    28 #> [3,]   675   949   903   775   874   844   783   897   686   813   707   508 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]    17    12    10     9     4     0    10    10     0     3     7     2 #> [2,]    15    12     7     6     3     2     3     1     2     1     0     0 #> [3,]   524   450   433   433   367   324   352   374   359   319   357   292 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     3     1     5     8    11    11    10    15    15     8    15     8 #> [2,]     2     0     3     5     6     4     3     3     2     2     1     7 #> [3,]   258   205   153   177   171   171   185   198   198   240   246   260 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]    18    25    10     6     4     4     3     1     2     4     9     5 #> [2,]     3     2     0     2     1     0     0     0     2     3     1     0 #> [3,]   285   305   250   248   289   272   303   296   284   282   378   339 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]     8     4     4     7    23    26    48    37    71    87    80   105 #> [2,]     1     3     1     3     6    10    20     8    10    17    19    23 #> [3,]   317   393   330   370   425   423   441   471   459   469   507   566 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]   127   102   116   113   109    59    64    46    38    39    26    17 #> [2,]    32    14    24    12    16    14    18     7     4     8     6     8 #> [3,]   561   611   509   586   549   461   430   467   321   322   277   269 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]    10     19     12     22      7     11     20     22     23     17 #> [2,]     4     13      5      9      1      2      1      1      2      9 #> [3,]   244    254    217    229    239    119    142    170    173    201 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]     18     29     25     13     20     18     18     10     14     15 #> [2,]      1      2      1      3     13      3      3      7      2      6 #> [3,]    160    179    122    197    237    152    254    211    211    280 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]     12     16      6      5     12     12     15     13     12     16 #> [2,]      7      1      2      4      4      7      4      1      2      3 #> [3,]    229    232    238    231    294    269    310    309    280    329 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]     19     44     83    118    172    176    204    268    237    293 #> [2,]      4      7      8      7     12     12     13      9     31     27 #> [3,]    316    339    374    435    481    451    508    527    631    640 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]    246    187    162    128     92     51     41     17     17     14 #> [2,]     25     30     25     22     18     21     17     12     11     10 #> [3,]    548    532    541    532    524    398    424    357    374    354 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]      7     21      1      2      6      9      5     10      2     19 #> [2,]     18      5      7      4      6      6      2      4      1      1 #> [3,]    312    294    312    247    216    232    223    146     68    197 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]     19     15     11     22     17     25     17     17     17     14 #> [2,]      4      3      5      2      5      5      3      5      3      5 #> [3,]    169    177    175    172    175    216    213    231    214    248 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]     19     32     13     15     28     23     10     17     21     12 #> [2,]      9      5      9     10     11     18     15     25     26     29 #> [3,]    236    267    226    274    291    256    301    295    330    349 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]     22     25     23     23     35     42     40     49     61     78 #> [2,]     41     46     49     59    111     88     92    106     93    125 #> [3,]    349    373    421    403    456    485    502    542    592    549 #>      [,189] [,190] [,191] [,192] [,193] [,194] [,195] [,196] [,197] [,198] #> [1,]     72    114     74     91     86    102    117     68     58     49 #> [2,]    103    137    111     79     73     79     72     45     27     19 #> [3,]    619    624    622    563    560    549    491    385    387    338 #>      [,199] [,200] [,201] [,202] [,203] [,204] [,205] [,206] [,207] [,208] #> [1,]     27     19     24     31      9      9     22     29     15     20 #> [2,]     14      8      6      4      3      2      2      2      2      3 #> [3,]    321    323    314    277    286    275    295    265    254    183 #>      [,209] [,210] [,211] [,212] [,213] [,214] [,215] [,216] [,217] [,218] #> [1,]      6     27     17     11     16     21     22     16     24     21 #> [2,]      0      0      2      1      1      2      8      3      3      8 #> [3,]    108    253    223    207    197    212    222    221    250    273 #>      [,219] [,220] [,221] [,222] [,223] [,224] [,225] [,226] [,227] [,228] #> [1,]     22     16     21      7     14     15      8      6     14     19 #> [2,]      4      6      7      5      6      8      4      5      5     12 #> [3,]    258    267    241    269    284    316    319    306    367    389 #>      [,229] [,230] [,231] [,232] [,233] [,234] [,235] [,236] [,237] [,238] #> [1,]     30     26     35     39     52     63     92     99    121    239 #> [2,]     14      7     12      9     12     14     24     33     55     41 #> [3,]    405    860    805    746    788    897    950   1052   1075   1075 #>      [,239] [,240] [,241] [,242] [,243] [,244] [,245] [,246] [,247] [,248] #> [1,]    243    284    342    488    479    541    539    372    317    236 #> [2,]     54     67     91     81     75     70     63     61     62     37 #> [3,]   1078   1235   1227   1456   1367   1572   1587   1404   1409   1255 #>      [,249] [,250] [,251] [,252] [,253] [,254] [,255] [,256] [,257] [,258] #> [1,]    185    128     65     46     48     20     22     27     12     13 #> [2,]     41     27     17     15     12     14      4      5      8      6 #> [3,]   1250   1163   1017    954    877    848    722    634    607    582 #>      [,259] [,260] [,261] [,262] [,263] [,264] [,265] [,266] [,267] [,268] #> [1,]     17     20      9     30     30     25     37     49     40     30 #> [2,]      4     10      4      6      2      3      2      2      1      3 #> [3,]    557    522    429    326    352    309    275    263    231    288 #>      [,269] [,270] [,271] [,272] [,273] [,274] [,275] [,276] [,277] [,278] #> [1,]     42     25     18     30     34     32     15     17      7     10 #> [2,]      8      2      2      2      2      8      6      1      4      4 #> [3,]    316    381    344    310    509    652    596    593    734    675 #>      [,279] [,280] [,281] [,282] [,283] [,284] [,285] [,286] [,287] [,288] #> [1,]     21     16     28     26     20     24     32     61     59    125 #> [2,]      6      3      4     15      7      7     19     27     23     45 #> [3,]    717    719    725    789    905    781    842    989    947   1114 #>      [,289] [,290] [,291] [,292] [,293] [,294] [,295] [,296] [,297] [,298] #> [1,]    225    363    359    471    610    652    654    584    709    663 #> [2,]     59     74     69    148    207    249    222    220    251    206 #> [3,]   1238   1150   1283   1137   1088   1653   1765   1796   1832   1927 #>      [,299] [,300] [,301] [,302] [,303] [,304] [,305] [,306] [,307] [,308] #> [1,]    502    329    221    132     76     48     40     29     29     13 #> [2,]    219    200    126     96     52     30     36     33     20     22 #> [3,]   1817   1691   1488   1377   1087   1058   1028    987    929    746 #>      [,309] [,310] [,311] [,312] [,313] [,314] [,315] [,316] [,317] [,318] #> [1,]     21     19     17     17     18     38     19     24     34     36 #> [2,]     22     11     15     13     11      9     11     12     22     17 #> [3,]    752    671    641    606    525    428    429    364    337    384 #>      [,319] [,320] [,321] [,322] [,323] [,324] [,325] [,326] [,327] [,328] #> [1,]     26     55     37     23     27     16     18     22     23     14 #> [2,]     10     18     16     14      5      6     10      3      7      0 #> [3,]    326    336    331    368    373    345    544    504    621    678 #>      [,329] [,330] [,331] [,332] [,333] [,334] [,335] [,336] [,337] [,338] #> [1,]     20     16     26     28     29     18     20     25     37     39 #> [2,]      3      2      5      4      4      6      4      0      7      2 #> [3,]    702    669    749    815    933    980    945   1094   1085   1188 #>      [,339] [,340] [,341] [,342] [,343] [,344] [,345] [,346] [,347] [,348] #> [1,]     70     64     89     70     80     71    114    145    186    201 #> [2,]      2      3      7      3      8      0      5      9     14      9 #> [3,]   1163   1244   1427   1422   1408   1399   1341   1476   1457   1440 #>      [,349] [,350] [,351] [,352] [,353] [,354] [,355] [,356] [,357] [,358] #> [1,]    155    238    232    158    176    105     74     56     39     47 #> [2,]     19     14      8     12      7     13      9      3      4      6 #> [3,]   1719   1412   1469   1332   1360   1234   1076    941    936    960 #>      [,359] [,360] [,361] [,362] [,363] [,364] [,365] [,366] [,367] [,368] #> [1,]     63    105    110    186    124    138    103     84     99    123 #> [2,]      7      8      7      3      5      7      6      3      3      2 #> [3,]    943    933    984    843    857    828    664    646    790    717 #>      [,369] [,370] [,371] [,372] [,373] [,374] [,375] [,376] [,377] [,378] #> [1,]     95    107    104    103    124    132     95    105     67     76 #> [2,]      2      3      2      1      1      2      2      6      7      5 #> [3,]    688    778    669    784    876    887    868    884    983    892 #>      [,379] [,380] [,381] [,382] [,383] [,384] [,385] [,386] [,387] [,388] #> [1,]     94    142    174    196    213    245    363    640    655    844 #> [2,]      4      2      4     14      9     12     22     46     52     68 #> [3,]   1095   1176   1129   1271   1267   1327   1556   2041   2178   2207 #>      [,389] [,390] [,391] [,392] [,393] [,394] [,395] [,396] [,397] [,398] #> [1,]    746    782    862    749    567    511    364    294    303    274 #> [2,]     96    109    140    118     95     96     97     87    118    154 #> [3,]   2478   2433   2563   2671   2712   2573   2297   2245   2294   2350 #>      [,399] [,400] [,401] [,402] [,403] [,404] [,405] [,406] [,407] [,408] #> [1,]    338    256    182    159    130    127     79     78     52     38 #> [2,]    138    103    112     65     51     32     28     22      4      7 #> [3,]   2239   2247   2202   1882   2011   1923   1767   1725   1518   1563 #>      [,409] [,410] [,411] [,412] [,413] [,414] [,415] [,416] [,417] [,418] #> [1,]     29     20     25     23     36     51     37     18     25     41 #> [2,]      5      2      0      3      4      3      5      0      1      1 #> [3,]   1367   1226   1219   1202   1107   1160   1142    805    852    979 #>      [,419] [,420] [,421] [,422] [,423] [,424] [,425] [,426] #> [1,]     58     54    103     72     74     62     55     69 #> [2,]      2      2     10     12      6      5      7      3 #> [3,]   1059    891   1057   1290   1290   1193   1293   1513 #>  #> $data$influenzaA_subtyped #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    4    4   13    3    3    1    0    3    4     4    10     9    14     7 #> [2,]    0    0    0    2    0    0    2    1    2     0     2     0     0     0 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     6    13    12    13    11    13    26    28    39    63    79   175 #> [2,]     3     3     1     1     1     2     1     2     1     1     2     5 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]   250   306   272   304   308   268   291   180   148    88    61    43 #> [2,]    11     4     7     5     9     6     3     6     4     1     2     0 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]    15    12     8     9     4     0     8     8     0     1     4     1 #> [2,]     0     0     2     0     0     0     0     1     0     2     3     0 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     1     0     3     2     7     8     6    11     9     7    13     6 #> [2,]     2     1     2     5     3     3     4     3     6     1     1     2 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]     7     7     7     4     2     2     1     1     1     4     7     3 #> [2,]    11    18     3     1     2     2     2     0     1     0     1     1 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]     4     3     4     5    16    19    40    28    58    65    61    74 #> [2,]     4     1     0     2     5     7     7     8    12    21    18    30 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]    70    49    75    70    65    29    32    30    21    22    14    10 #> [2,]    55    52    40    42    42    30    30    15    17    14    11     7 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]     6     12      8     21      6     10     14     15     12     10 #> [2,]     3      5      4      1      1      1      5      7     11      7 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]     14     24     18      9     11     12      7      2      8      9 #> [2,]      4      5      7      3      9      6     11      8      6      6 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]      7     15      5      4      6      3      4      6      2      1 #> [2,]      4      1      1      1      5      9      9      7     10     13 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]      3     12     25     14     33     48     82    110     81     91 #> [2,]     14     30     54    104    131    125    110    148    136    168 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]     73     65     52     57     36     27     21     16     11      7 #> [2,]    152    104     98     60     46     18     17      1      6      7 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]      3     12      1      2      3      7      4     10      2     17 #> [2,]      4      8      0      0      2      2      1      0      0      2 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]     16     14      8     18     14     20     11     14     17     11 #> [2,]      3      1      3      3      3      5      6      3      0      2 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]     14     29     12     13     22     19     10     14     18     10 #> [2,]      5      2      1      2      6      4      0      3      2      2 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]     21     17     23     19     32     36     36     38     52     63 #> [2,]      1      7      0      3      3      6      4      7      8     11 #>      [,189] [,190] [,191] [,192] [,193] [,194] [,195] [,196] [,197] [,198] #> [1,]     63     98     64     80     73     92    103     54     51     44 #> [2,]      6     12      7      8      7      6     12     10      5      5 #>      [,199] [,200] [,201] [,202] [,203] [,204] [,205] [,206] [,207] [,208] #> [1,]     20     15     23     30      9      8     17     13      4      8 #> [2,]      5      4      1      1      0      1      5     16     11     12 #>      [,209] [,210] [,211] [,212] [,213] [,214] [,215] [,216] [,217] [,218] #> [1,]      4     16      3      5      2      4      2      3      6      0 #> [2,]      2     11     14      6     14     17     20     13     18     21 #>      [,219] [,220] [,221] [,222] [,223] [,224] [,225] [,226] [,227] [,228] #> [1,]      4      4     11      3      2      4      4      3      9      8 #> [2,]     18     12     10      4     12     11      4      3      5     11 #>      [,229] [,230] [,231] [,232] [,233] [,234] [,235] [,236] [,237] [,238] #> [1,]     12      7      6      9     10     19     22     22     41     94 #> [2,]     18     14     18     13     26     17     26     25     21     37 #>      [,239] [,240] [,241] [,242] [,243] [,244] [,245] [,246] [,247] [,248] #> [1,]    131    188    221    242    236    293    291    216    196    146 #> [2,]     17     24     17     17     14     11     10     11      7      7 #>      [,249] [,250] [,251] [,252] [,253] [,254] [,255] [,256] [,257] [,258] #> [1,]    118     94     43     26     32     12     13     15      8      6 #> [2,]      6      5      0      1      0      0      0      0      1      0 #>      [,259] [,260] [,261] [,262] [,263] [,264] [,265] [,266] [,267] [,268] #> [1,]     10     18      3     23     19     18     22     37     32     21 #> [2,]      1      0      0      2      2      1      3      2      0      0 #>      [,269] [,270] [,271] [,272] [,273] [,274] [,275] [,276] [,277] [,278] #> [1,]     34     21     14     19     18     15      9      6      2      4 #> [2,]      1      0      2      2      5      3      1      2      4      0 #>      [,279] [,280] [,281] [,282] [,283] [,284] [,285] [,286] [,287] [,288] #> [1,]      9      6      8      7      8      9     12     13     11     29 #> [2,]      8      7     11      8      5      4      8     15     17     15 #>      [,289] [,290] [,291] [,292] [,293] [,294] [,295] [,296] [,297] [,298] #> [1,]     54     59     57     65     95    115    142    135    238    217 #> [2,]     18     18     13     16     14     30     18     26     34     37 #>      [,299] [,300] [,301] [,302] [,303] [,304] [,305] [,306] [,307] [,308] #> [1,]    167    109     93     69     52     36     31     19     16      6 #> [2,]     34     33     28     17      4      4      6      2      3      5 #>      [,309] [,310] [,311] [,312] [,313] [,314] [,315] [,316] [,317] [,318] #> [1,]      9     12      6      7     13     13      6     12     10     20 #> [2,]      6      3      4      5      1     14      6      5      8      4 #>      [,319] [,320] [,321] [,322] [,323] [,324] [,325] [,326] [,327] [,328] #> [1,]     12     26     18     13     14      8      8      8      6      6 #> [2,]      4     13      4      5      4      7      8     11      8      5 #>      [,329] [,330] [,331] [,332] [,333] [,334] [,335] [,336] [,337] [,338] #> [1,]      3      5      5     12      6      1      2      8      3      2 #> [2,]      7      8     10      6      6      5     11     12     27     24 #>      [,339] [,340] [,341] [,342] [,343] [,344] [,345] [,346] [,347] [,348] #> [1,]      6      9      7      5      5      4      8      7     15     14 #> [2,]     41     48     66     44     44     44     68     92     93    112 #>      [,349] [,350] [,351] [,352] [,353] [,354] [,355] [,356] [,357] [,358] #> [1,]     23     26     25     29     55     29     18     24      7      8 #> [2,]    100    107    144     81     61     46     26     21     21     25 #>      [,359] [,360] [,361] [,362] [,363] [,364] [,365] [,366] [,367] [,368] #> [1,]     13      5     14     28     23     28     33     29     39     60 #> [2,]     39     78     73    136     91     92     43     30     51     53 #>      [,369] [,370] [,371] [,372] [,373] [,374] [,375] [,376] [,377] [,378] #> [1,]     47     23     47     33     45     48     23     29     13     17 #> [2,]     26     29     28     28     29     26     25     21     15     13 #>      [,379] [,380] [,381] [,382] [,383] [,384] [,385] [,386] [,387] [,388] #> [1,]     24     73     84    108    104    162    204    390    394    471 #> [2,]     21     13     24     17     21     12     19     15      6      9 #>      [,389] [,390] [,391] [,392] [,393] [,394] [,395] [,396] [,397] [,398] #> [1,]    365    345    355    314    178    150    110     60     40     33 #> [2,]      5     10      3      4      8      6      6      3      3      4 #>      [,399] [,400] [,401] [,402] [,403] [,404] [,405] [,406] [,407] [,408] #> [1,]     52     18     27     23      7      9      5      6      9      7 #> [2,]      6      9      5      1      1      1      3      2      2      4 #>      [,409] [,410] [,411] [,412] [,413] [,414] [,415] [,416] [,417] [,418] #> [1,]      1      0      2      1      0      1      1      0      0      3 #> [2,]      4      5      6      6      9     13     14      0      0     11 #>      [,419] [,420] [,421] [,422] [,423] [,424] [,425] [,426] #> [1,]      3      2      2      5      3      2      7     11 #> [2,]     11     21     37     28     22     16     17     22 #>  #>  #> $model_params #> $model_params$cov_structure #> [1] 1 #>  #> $model_params$noise_structure #> [1] 0 #>  #>  #> attr(,\"class\") #> [1] \"EpiStrainDynamics.pathogen_structure\" #> [2] \"list\"                                  # NOTE: smoothing_structure and observation_noise are case insensitive, so # these will work # subtyped( #    ... #    smoothing_structure = 'Independent', #    observation_noise = 'OBSERVATION_NOISE_ONLY' # )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Posterior Samples Using Splines (Multiple Pathogens) — transform_posterior_multi","title":"Transform Posterior Samples Using Splines (Multiple Pathogens) — transform_posterior_multi","text":"Transforms spline coefficients time series multiple pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Posterior Samples Using Splines (Multiple Pathogens) — transform_posterior_multi","text":"","code":"transform_posterior_multi(post, B_true, num_path, num_days)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Posterior Samples Using Splines (Multiple Pathogens) — transform_posterior_multi","text":"post Posterior samples object containing spline coefficients B_true B-spline basis matrix predict_B_true() num_path Integer number pathogens num_days Integer number time points","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Posterior Samples Using Splines (Multiple Pathogens) — transform_posterior_multi","text":"Array transformed posterior samples [samples, pathogens, time]","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Posterior Samples Using Splines (Single Pathogen) — transform_posterior_single","title":"Transform Posterior Samples Using Splines (Single Pathogen) — transform_posterior_single","text":"Transforms spline coefficients time series single pathogen models","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Posterior Samples Using Splines (Single Pathogen) — transform_posterior_single","text":"","code":"transform_posterior_single(post, B_true, num_days)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Posterior Samples Using Splines (Single Pathogen) — transform_posterior_single","text":"post Posterior samples object containing spline coefficients B_true B-spline basis matrix predict_B_true() num_days Integer number time points","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/transform_posterior_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Posterior Samples Using Splines (Single Pathogen) — transform_posterior_single","text":"Array transformed posterior samples [samples, time]","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_class_inherits.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate object class inheritance — validate_class_inherits","title":"Validate object class inheritance — validate_class_inherits","text":"Validates object inherits one specified classes. multiple classes, object must inherit specified classes.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_class_inherits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate object class inheritance — validate_class_inherits","text":"","code":"validate_class_inherits(obj, class_names, require_all = TRUE)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_class_inherits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate object class inheritance — validate_class_inherits","text":"obj object validate class_names Character vector one class names check require_all Logical; TRUE (default), object must inherit specified classes. FALSE, object must inherit least ONE class.","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_class_inherits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate object class inheritance — validate_class_inherits","text":"Invisible NULL validation passes, otherwise throws error","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_list_vector_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a list of vectors all have the same length — validate_list_vector_lengths","title":"Validate that a list of vectors all have the same length — validate_list_vector_lengths","text":"Validate list vectors length","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_list_vector_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a list of vectors all have the same length — validate_list_vector_lengths","text":"","code":"validate_list_vector_lengths(   vector_list,   list_name,   reference_length = NULL,   .error_call = rlang::caller_env() )"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_list_vector_lengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a list of vectors all have the same length — validate_list_vector_lengths","text":"vector_list Named list vectors list_name Name list parameter error messages reference_length Expected length (optional) .error_call calling function better error messages","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_matching_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input vectors have matching lengths — validate_matching_lengths","title":"Validate input vectors have matching lengths — validate_matching_lengths","text":"Validate input vectors matching lengths","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_matching_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input vectors have matching lengths — validate_matching_lengths","text":"","code":"validate_matching_lengths(..., .error_call = rlang::caller_env())"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_matching_lengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input vectors have matching lengths — validate_matching_lengths","text":"... Named vectors check matching lengths .error_call calling function better error messages","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_positive_whole_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that input is a positive whole number — validate_positive_whole_number","title":"Validate that input is a positive whole number — validate_positive_whole_number","text":"Validate input positive whole number","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_positive_whole_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that input is a positive whole number — validate_positive_whole_number","text":"","code":"validate_positive_whole_number(value, arg_name)"},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_positive_whole_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that input is a positive whole number — validate_positive_whole_number","text":"value value validate arg_name Name argument validated (error messages)","code":""},{"path":"https://acefa-hubs.github.io/EpiStrainDynamics/reference/validate_positive_whole_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that input is a positive whole number — validate_positive_whole_number","text":"NULL (invisibly) validation passes, otherwise stops error","code":""}]
